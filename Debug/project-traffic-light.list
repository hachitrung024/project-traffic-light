
project-traffic-light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08009048  08009048  00019048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800963c  0800963c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800963c  0800963c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800963c  0800963c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001f4  08009838  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08009838  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016298  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f95  00000000  00000000  000364b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00039450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a532  00000000  00000000  0003b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dfe  00000000  00000000  00055a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef25  00000000  00000000  0006b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  000fa778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800902c 	.word	0x0800902c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800902c 	.word	0x0800902c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <buttonRun>:

static uint8_t button_press_flags[MAX_BUTTONS];
static uint8_t button_hold_flags[MAX_BUTTONS];

static uint16_t button_hold_counters[MAX_BUTTONS];
void buttonRun(){
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < MAX_BUTTONS; i++){
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	e06b      	b.n	8000b6c <buttonRun+0xe4>
		//BEGIN for
		button_buffers0[i] = button_buffers1[i];
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4938      	ldr	r1, [pc, #224]	; (8000b7c <buttonRun+0xf4>)
 8000a9a:	5c89      	ldrb	r1, [r1, r2]
 8000a9c:	4a38      	ldr	r2, [pc, #224]	; (8000b80 <buttonRun+0xf8>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
		button_buffers1[i] = button_buffers2[i];
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4937      	ldr	r1, [pc, #220]	; (8000b84 <buttonRun+0xfc>)
 8000aa6:	5c89      	ldrb	r1, [r1, r2]
 8000aa8:	4a34      	ldr	r2, [pc, #208]	; (8000b7c <buttonRun+0xf4>)
 8000aaa:	54d1      	strb	r1, [r2, r3]
		button_buffers2[i] = HAL_GPIO_ReadPin( button_ports[i], button_pins[i]);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4a36      	ldr	r2, [pc, #216]	; (8000b88 <buttonRun+0x100>)
 8000ab0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4935      	ldr	r1, [pc, #212]	; (8000b8c <buttonRun+0x104>)
 8000ab8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000abc:	79fc      	ldrb	r4, [r7, #7]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	f002 f92f 	bl	8002d24 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <buttonRun+0xfc>)
 8000acc:	551a      	strb	r2, [r3, r4]
		if((button_buffers0[i] == button_buffers1[i]) && (button_buffers1[i] == button_buffers2[i])){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <buttonRun+0xf8>)
 8000ad2:	5cd2      	ldrb	r2, [r2, r3]
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	4929      	ldr	r1, [pc, #164]	; (8000b7c <buttonRun+0xf4>)
 8000ad8:	5ccb      	ldrb	r3, [r1, r3]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d13d      	bne.n	8000b5a <buttonRun+0xd2>
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <buttonRun+0xf4>)
 8000ae2:	5cd2      	ldrb	r2, [r2, r3]
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4927      	ldr	r1, [pc, #156]	; (8000b84 <buttonRun+0xfc>)
 8000ae8:	5ccb      	ldrb	r3, [r1, r3]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d135      	bne.n	8000b5a <buttonRun+0xd2>
			//BEGIN stable condition
			if(button_buffers2[i] != button_buffers3[i]){
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <buttonRun+0xfc>)
 8000af2:	5cd2      	ldrb	r2, [r2, r3]
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4926      	ldr	r1, [pc, #152]	; (8000b90 <buttonRun+0x108>)
 8000af8:	5ccb      	ldrb	r3, [r1, r3]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d014      	beq.n	8000b28 <buttonRun+0xa0>
				//BEGIN trigger edge
				button_buffers3[i] = button_buffers2[i];
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4920      	ldr	r1, [pc, #128]	; (8000b84 <buttonRun+0xfc>)
 8000b04:	5c89      	ldrb	r1, [r1, r2]
 8000b06:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <buttonRun+0x108>)
 8000b08:	54d1      	strb	r1, [r2, r3]
				if(button_buffers2[i]==BUTTON_PRESSED){
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <buttonRun+0xfc>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d127      	bne.n	8000b64 <buttonRun+0xdc>
					//Edge down
					button_press_flags[i] = 1;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <buttonRun+0x10c>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	54d1      	strb	r1, [r2, r3]
					button_hold_counters[i] = BUTTON_HOLD_DUR;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <buttonRun+0x110>)
 8000b20:	2164      	movs	r1, #100	; 0x64
 8000b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(button_buffers2[i] != button_buffers3[i]){
 8000b26:	e01d      	b.n	8000b64 <buttonRun+0xdc>
				}
				//END trigger edge
			}else if(button_buffers3[i] == BUTTON_PRESSED){
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <buttonRun+0x108>)
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d118      	bne.n	8000b64 <buttonRun+0xdc>
				//Stable pressed condition
				button_hold_counters[i]--;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <buttonRun+0x110>)
 8000b36:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b3a:	3a01      	subs	r2, #1
 8000b3c:	b291      	uxth	r1, r2
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <buttonRun+0x110>)
 8000b40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(button_hold_counters[i]==0) button_hold_flags[i] = 1;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <buttonRun+0x110>)
 8000b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <buttonRun+0xdc>
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <buttonRun+0x114>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	54d1      	strb	r1, [r2, r3]
			if(button_buffers2[i] != button_buffers3[i]){
 8000b58:	e004      	b.n	8000b64 <buttonRun+0xdc>
			}
			//END stable condition
		} else{
			button_hold_flags[i] = 0;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <buttonRun+0x114>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
 8000b62:	e000      	b.n	8000b66 <buttonRun+0xde>
			if(button_buffers2[i] != button_buffers3[i]){
 8000b64:	bf00      	nop
	for(uint8_t i=0; i < MAX_BUTTONS; i++){
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d990      	bls.n	8000a94 <buttonRun+0xc>
		}
		//END for
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	20000214 	.word	0x20000214
 8000b80:	20000210 	.word	0x20000210
 8000b84:	20000218 	.word	0x20000218
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	2000021c 	.word	0x2000021c
 8000b94:	20000220 	.word	0x20000220
 8000b98:	20000228 	.word	0x20000228
 8000b9c:	20000224 	.word	0x20000224

08000ba0 <isButtonPressed>:
uint8_t isButtonPressed(uint8_t index){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_BUTTONS) return 0;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d901      	bls.n	8000bb4 <isButtonPressed+0x14>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e00b      	b.n	8000bcc <isButtonPressed+0x2c>
	if(button_press_flags[index] == 1){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <isButtonPressed+0x38>)
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d105      	bne.n	8000bca <isButtonPressed+0x2a>
		button_press_flags[index] = 0;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <isButtonPressed+0x38>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <isButtonPressed+0x2c>
	}
	return 0;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000220 	.word	0x20000220

08000bdc <isButtonHolding>:
uint8_t isButtonHolding(uint8_t index){
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_BUTTONS) return 0;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d901      	bls.n	8000bf0 <isButtonHolding+0x14>
 8000bec:	2300      	movs	r3, #0
 8000bee:	e002      	b.n	8000bf6 <isButtonHolding+0x1a>
	return button_hold_flags[index];
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <isButtonHolding+0x24>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000224 	.word	0x20000224

08000c04 <lcd_send>:
uint8_t counters[2];
uint8_t red_duration, amber_duration, green_duration;
uint8_t temp_duration;
char lcd_line1[17];
char lcd_line2[17];
void lcd_send(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	lcd_goto_XY(1, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 faa9 	bl	8001162 <lcd_goto_XY>
	lcd_send_string(lcd_line1);
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <lcd_send+0x24>)
 8000c12:	f000 fa91 	bl	8001138 <lcd_send_string>
	lcd_goto_XY(2, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 faa2 	bl	8001162 <lcd_goto_XY>
	lcd_send_string(lcd_line2);
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <lcd_send+0x28>)
 8000c20:	f000 fa8a 	bl	8001138 <lcd_send_string>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000026c 	.word	0x2000026c
 8000c2c:	20000250 	.word	0x20000250

08000c30 <setCounter>:
void setCounter(uint8_t index, uint8_t value){
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
	setTimer(0, 1000);
 8000c40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 fc93 	bl	8001570 <setTimer>
	counters[index] = value;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4935      	ldr	r1, [pc, #212]	; (8000d24 <setCounter+0xf4>)
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	54ca      	strb	r2, [r1, r3]
//	sprintf(lcd_line1,"1234123412341234")
	sprintf(lcd_line1,"     %d%d      <%d%d",counters[0]/10,counters[0]%10,counters[1]/10,counters[1]%10);
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <setCounter+0xf4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4a34      	ldr	r2, [pc, #208]	; (8000d28 <setCounter+0xf8>)
 8000c58:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461c      	mov	r4, r3
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <setCounter+0xf4>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <setCounter+0xf8>)
 8000c68:	fba3 1302 	umull	r1, r3, r3, r2
 8000c6c:	08d9      	lsrs	r1, r3, #3
 8000c6e:	460b      	mov	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <setCounter+0xf4>)
 8000c7e:	785b      	ldrb	r3, [r3, #1]
 8000c80:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <setCounter+0xf8>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <setCounter+0xf4>)
 8000c8e:	785a      	ldrb	r2, [r3, #1]
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <setCounter+0xf8>)
 8000c92:	fba3 1302 	umull	r1, r3, r3, r2
 8000c96:	08d9      	lsrs	r1, r3, #3
 8000c98:	460b      	mov	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	9000      	str	r0, [sp, #0]
 8000ca8:	462b      	mov	r3, r5
 8000caa:	4622      	mov	r2, r4
 8000cac:	491f      	ldr	r1, [pc, #124]	; (8000d2c <setCounter+0xfc>)
 8000cae:	4820      	ldr	r0, [pc, #128]	; (8000d30 <setCounter+0x100>)
 8000cb0:	f005 ff82 	bl	8006bb8 <siprintf>
	sprintf(lcd_line2,"%d%d>      %d%d     ",counters[1]/10,counters[1]%10,counters[0]/10,counters[0]%10);
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <setCounter+0xf4>)
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <setCounter+0xf8>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461c      	mov	r4, r3
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <setCounter+0xf4>)
 8000cc6:	785a      	ldrb	r2, [r3, #1]
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <setCounter+0xf8>)
 8000cca:	fba3 1302 	umull	r1, r3, r3, r2
 8000cce:	08d9      	lsrs	r1, r3, #3
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461d      	mov	r5, r3
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <setCounter+0xf4>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <setCounter+0xf8>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <setCounter+0xf4>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <setCounter+0xf8>)
 8000cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf8:	08d9      	lsrs	r1, r3, #3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	9000      	str	r0, [sp, #0]
 8000d0a:	462b      	mov	r3, r5
 8000d0c:	4622      	mov	r2, r4
 8000d0e:	4909      	ldr	r1, [pc, #36]	; (8000d34 <setCounter+0x104>)
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <setCounter+0x108>)
 8000d12:	f005 ff51 	bl	8006bb8 <siprintf>
	lcd_send();
 8000d16:	f7ff ff75 	bl	8000c04 <lcd_send>

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bdb0      	pop	{r4, r5, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000264 	.word	0x20000264
 8000d28:	cccccccd 	.word	0xcccccccd
 8000d2c:	08009048 	.word	0x08009048
 8000d30:	2000026c 	.word	0x2000026c
 8000d34:	08009060 	.word	0x08009060
 8000d38:	20000250 	.word	0x20000250

08000d3c <counterRun>:
void counterRun(){
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af02      	add	r7, sp, #8
	if(isFlagTimer(0)){
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 fc04 	bl	8001550 <isFlagTimer>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d074      	beq.n	8000e38 <counterRun+0xfc>
		setTimer(0, 1000);
 8000d4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fc0c 	bl	8001570 <setTimer>
		counters[0]--;
 8000d58:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <counterRun+0x104>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <counterRun+0x104>)
 8000d62:	701a      	strb	r2, [r3, #0]
		counters[1]--;
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <counterRun+0x104>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <counterRun+0x104>)
 8000d6e:	705a      	strb	r2, [r3, #1]
//		updateBuffer7SEG(counters[0], counters[1]);
		sprintf(lcd_line1,"     %d%d      <%d%d",counters[0]/10,counters[0]%10,counters[1]/10,counters[1]%10);
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <counterRun+0x104>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4a33      	ldr	r2, [pc, #204]	; (8000e44 <counterRun+0x108>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461c      	mov	r4, r3
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <counterRun+0x104>)
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <counterRun+0x108>)
 8000d86:	fba3 1302 	umull	r1, r3, r3, r2
 8000d8a:	08d9      	lsrs	r1, r3, #3
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461d      	mov	r5, r3
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <counterRun+0x104>)
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <counterRun+0x108>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <counterRun+0x104>)
 8000dac:	785a      	ldrb	r2, [r3, #1]
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <counterRun+0x108>)
 8000db0:	fba3 1302 	umull	r1, r3, r3, r2
 8000db4:	08d9      	lsrs	r1, r3, #3
 8000db6:	460b      	mov	r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	9000      	str	r0, [sp, #0]
 8000dc6:	462b      	mov	r3, r5
 8000dc8:	4622      	mov	r2, r4
 8000dca:	491f      	ldr	r1, [pc, #124]	; (8000e48 <counterRun+0x10c>)
 8000dcc:	481f      	ldr	r0, [pc, #124]	; (8000e4c <counterRun+0x110>)
 8000dce:	f005 fef3 	bl	8006bb8 <siprintf>
		sprintf(lcd_line2,"%d%d>      %d%d     ",counters[1]/10,counters[1]%10,counters[0]/10,counters[0]%10);
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <counterRun+0x104>)
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <counterRun+0x108>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461c      	mov	r4, r3
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <counterRun+0x104>)
 8000de4:	785a      	ldrb	r2, [r3, #1]
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <counterRun+0x108>)
 8000de8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dec:	08d9      	lsrs	r1, r3, #3
 8000dee:	460b      	mov	r3, r1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461d      	mov	r5, r3
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <counterRun+0x104>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <counterRun+0x108>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <counterRun+0x104>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <counterRun+0x108>)
 8000e12:	fba3 1302 	umull	r1, r3, r3, r2
 8000e16:	08d9      	lsrs	r1, r3, #3
 8000e18:	460b      	mov	r3, r1
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	9000      	str	r0, [sp, #0]
 8000e28:	462b      	mov	r3, r5
 8000e2a:	4622      	mov	r2, r4
 8000e2c:	4908      	ldr	r1, [pc, #32]	; (8000e50 <counterRun+0x114>)
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <counterRun+0x118>)
 8000e30:	f005 fec2 	bl	8006bb8 <siprintf>
		lcd_send();
 8000e34:	f7ff fee6 	bl	8000c04 <lcd_send>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000264 	.word	0x20000264
 8000e44:	cccccccd 	.word	0xcccccccd
 8000e48:	08009048 	.word	0x08009048
 8000e4c:	2000026c 	.word	0x2000026c
 8000e50:	08009060 	.word	0x08009060
 8000e54:	20000250 	.word	0x20000250

08000e58 <led_on>:
		green_duration++;
		if(green_duration >= red_duration) green_duration = red_duration - amber_duration;
//		updateBuffer7SEG(5, green_duration);
	}
}
void led_on(uint8_t way, uint8_t led){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	4613      	mov	r3, r2
 8000e66:	71bb      	strb	r3, [r7, #6]
	if(way == WAY1){
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d161      	bne.n	8000f32 <led_on+0xda>
		switch (led) {
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d032      	beq.n	8000eda <led_on+0x82>
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	dc46      	bgt.n	8000f06 <led_on+0xae>
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d002      	beq.n	8000e82 <led_on+0x2a>
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d016      	beq.n	8000eae <led_on+0x56>
 8000e80:	e041      	b.n	8000f06 <led_on+0xae>
			case RED:
				HAL_GPIO_WritePin(TLM0_A_GPIO_Port, TLM0_A_Pin, SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	4862      	ldr	r0, [pc, #392]	; (8001010 <led_on+0x1b8>)
 8000e88:	f001 ff63 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM0_B_GPIO_Port, TLM0_B_Pin, SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2120      	movs	r1, #32
 8000e90:	485f      	ldr	r0, [pc, #380]	; (8001010 <led_on+0x1b8>)
 8000e92:	f001 ff5e 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_A_GPIO_Port, TLM1_A_Pin, SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2110      	movs	r1, #16
 8000e9a:	485d      	ldr	r0, [pc, #372]	; (8001010 <led_on+0x1b8>)
 8000e9c:	f001 ff59 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_B_GPIO_Port, TLM1_B_Pin, SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	485a      	ldr	r0, [pc, #360]	; (8001010 <led_on+0x1b8>)
 8000ea8:	f001 ff53 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000eac:	e042      	b.n	8000f34 <led_on+0xdc>
			case AMBER:
				HAL_GPIO_WritePin(TLM0_A_GPIO_Port, TLM0_A_Pin, RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4857      	ldr	r0, [pc, #348]	; (8001010 <led_on+0x1b8>)
 8000eb4:	f001 ff4d 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM0_B_GPIO_Port, TLM0_B_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4854      	ldr	r0, [pc, #336]	; (8001010 <led_on+0x1b8>)
 8000ebe:	f001 ff48 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_A_GPIO_Port, TLM1_A_Pin, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	4852      	ldr	r0, [pc, #328]	; (8001010 <led_on+0x1b8>)
 8000ec8:	f001 ff43 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_B_GPIO_Port, TLM1_B_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	484f      	ldr	r0, [pc, #316]	; (8001010 <led_on+0x1b8>)
 8000ed4:	f001 ff3d 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000ed8:	e02c      	b.n	8000f34 <led_on+0xdc>
			case GREEN:
				HAL_GPIO_WritePin(TLM0_A_GPIO_Port, TLM0_A_Pin, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2108      	movs	r1, #8
 8000ede:	484c      	ldr	r0, [pc, #304]	; (8001010 <led_on+0x1b8>)
 8000ee0:	f001 ff37 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM0_B_GPIO_Port, TLM0_B_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4849      	ldr	r0, [pc, #292]	; (8001010 <led_on+0x1b8>)
 8000eea:	f001 ff32 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_A_GPIO_Port, TLM1_A_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4847      	ldr	r0, [pc, #284]	; (8001010 <led_on+0x1b8>)
 8000ef4:	f001 ff2d 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_B_GPIO_Port, TLM1_B_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	4844      	ldr	r0, [pc, #272]	; (8001010 <led_on+0x1b8>)
 8000f00:	f001 ff27 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000f04:	e016      	b.n	8000f34 <led_on+0xdc>
			default:
				HAL_GPIO_WritePin(TLM0_A_GPIO_Port, TLM0_A_Pin, RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4841      	ldr	r0, [pc, #260]	; (8001010 <led_on+0x1b8>)
 8000f0c:	f001 ff21 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM0_B_GPIO_Port, TLM0_B_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2120      	movs	r1, #32
 8000f14:	483e      	ldr	r0, [pc, #248]	; (8001010 <led_on+0x1b8>)
 8000f16:	f001 ff1c 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_A_GPIO_Port, TLM1_A_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	483c      	ldr	r0, [pc, #240]	; (8001010 <led_on+0x1b8>)
 8000f20:	f001 ff17 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM1_B_GPIO_Port, TLM1_B_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2a:	4839      	ldr	r0, [pc, #228]	; (8001010 <led_on+0x1b8>)
 8000f2c:	f001 ff11 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000f30:	e000      	b.n	8000f34 <led_on+0xdc>
		}
	}
 8000f32:	bf00      	nop
	if(way == WAY2){
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d165      	bne.n	8001006 <led_on+0x1ae>
		switch (led) {
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d034      	beq.n	8000faa <led_on+0x152>
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	dc49      	bgt.n	8000fd8 <led_on+0x180>
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d002      	beq.n	8000f4e <led_on+0xf6>
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <led_on+0x124>
 8000f4c:	e044      	b.n	8000fd8 <led_on+0x180>
			case RED:
				HAL_GPIO_WritePin(TLM2_A_GPIO_Port, TLM2_A_Pin, SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f54:	482f      	ldr	r0, [pc, #188]	; (8001014 <led_on+0x1bc>)
 8000f56:	f001 fefc 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM2_B_GPIO_Port, TLM2_B_Pin, SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f60:	482c      	ldr	r0, [pc, #176]	; (8001014 <led_on+0x1bc>)
 8000f62:	f001 fef6 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_A_GPIO_Port, TLM3_A_Pin, SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	482b      	ldr	r0, [pc, #172]	; (8001018 <led_on+0x1c0>)
 8000f6c:	f001 fef1 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_B_GPIO_Port, TLM3_B_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4826      	ldr	r0, [pc, #152]	; (8001010 <led_on+0x1b8>)
 8000f76:	f001 feec 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000f7a:	e045      	b.n	8001008 <led_on+0x1b0>
			case AMBER:
				HAL_GPIO_WritePin(TLM2_A_GPIO_Port, TLM2_A_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	4824      	ldr	r0, [pc, #144]	; (8001014 <led_on+0x1bc>)
 8000f84:	f001 fee5 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM2_B_GPIO_Port, TLM2_B_Pin, SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8e:	4821      	ldr	r0, [pc, #132]	; (8001014 <led_on+0x1bc>)
 8000f90:	f001 fedf 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_A_GPIO_Port, TLM3_A_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	481f      	ldr	r0, [pc, #124]	; (8001018 <led_on+0x1c0>)
 8000f9a:	f001 feda 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_B_GPIO_Port, TLM3_B_Pin, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	481b      	ldr	r0, [pc, #108]	; (8001010 <led_on+0x1b8>)
 8000fa4:	f001 fed5 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000fa8:	e02e      	b.n	8001008 <led_on+0x1b0>
			case GREEN:
				HAL_GPIO_WritePin(TLM2_A_GPIO_Port, TLM2_A_Pin, SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <led_on+0x1bc>)
 8000fb2:	f001 fece 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM2_B_GPIO_Port, TLM2_B_Pin, RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <led_on+0x1bc>)
 8000fbe:	f001 fec8 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_A_GPIO_Port, TLM3_A_Pin, SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <led_on+0x1c0>)
 8000fc8:	f001 fec3 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_B_GPIO_Port, TLM3_B_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <led_on+0x1b8>)
 8000fd2:	f001 febe 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8000fd6:	e017      	b.n	8001008 <led_on+0x1b0>
			default:
				HAL_GPIO_WritePin(TLM2_A_GPIO_Port, TLM2_A_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <led_on+0x1bc>)
 8000fe0:	f001 feb7 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM2_B_GPIO_Port, TLM2_B_Pin, RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <led_on+0x1bc>)
 8000fec:	f001 feb1 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_A_GPIO_Port, TLM3_A_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <led_on+0x1c0>)
 8000ff6:	f001 feac 	bl	8002d52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TLM3_B_GPIO_Port, TLM3_B_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <led_on+0x1b8>)
 8001000:	f001 fea7 	bl	8002d52 <HAL_GPIO_WritePin>
				break;
 8001004:	e000      	b.n	8001008 <led_on+0x1b0>
		}
	}
 8001006:	bf00      	nop
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40010800 	.word	0x40010800
 8001018:	40011000 	.word	0x40011000

0800101c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f023 030f 	bic.w	r3, r3, #15
 800102c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f043 030c 	orr.w	r3, r3, #12
 800103a:	b2db      	uxtb	r3, r3
 800103c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	b2db      	uxtb	r3, r3
 8001046:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	f043 030c 	orr.w	r3, r3, #12
 800104e:	b2db      	uxtb	r3, r3
 8001050:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800105c:	f107 0208 	add.w	r2, r7, #8
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2304      	movs	r3, #4
 8001066:	2142      	movs	r1, #66	; 0x42
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <lcd_send_cmd+0x5c>)
 800106a:	f001 ffe3 	bl	8003034 <HAL_I2C_Master_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000280 	.word	0x20000280

0800107c <lcd_send_data>:

void lcd_send_data (char data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f023 030f 	bic.w	r3, r3, #15
 800108c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f043 030d 	orr.w	r3, r3, #13
 800109a:	b2db      	uxtb	r3, r3
 800109c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f043 0309 	orr.w	r3, r3, #9
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	f043 030d 	orr.w	r3, r3, #13
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	f043 0309 	orr.w	r3, r3, #9
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010bc:	f107 0208 	add.w	r2, r7, #8
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2304      	movs	r3, #4
 80010c6:	2142      	movs	r1, #66	; 0x42
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <lcd_send_data+0x5c>)
 80010ca:	f001 ffb3 	bl	8003034 <HAL_I2C_Master_Transmit>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000280 	.word	0x20000280

080010dc <lcd_init>:

void lcd_init (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80010e0:	2033      	movs	r0, #51	; 0x33
 80010e2:	f7ff ff9b 	bl	800101c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f7ff ff98 	bl	800101c <lcd_send_cmd>
	HAL_Delay(50);
 80010ec:	2032      	movs	r0, #50	; 0x32
 80010ee:	f001 fadd 	bl	80026ac <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f7ff ff92 	bl	800101c <lcd_send_cmd>
	HAL_Delay(50);
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f001 fad7 	bl	80026ac <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff8c 	bl	800101c <lcd_send_cmd>
	HAL_Delay(50);
 8001104:	2032      	movs	r0, #50	; 0x32
 8001106:	f001 fad1 	bl	80026ac <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800110a:	2006      	movs	r0, #6
 800110c:	f7ff ff86 	bl	800101c <lcd_send_cmd>
	HAL_Delay(50);
 8001110:	2032      	movs	r0, #50	; 0x32
 8001112:	f001 facb 	bl	80026ac <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001116:	200c      	movs	r0, #12
 8001118:	f7ff ff80 	bl	800101c <lcd_send_cmd>
	HAL_Delay(50);
 800111c:	2032      	movs	r0, #50	; 0x32
 800111e:	f001 fac5 	bl	80026ac <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff ff7a 	bl	800101c <lcd_send_cmd>
	HAL_Delay(50);
 8001128:	2032      	movs	r0, #50	; 0x32
 800112a:	f001 fabf 	bl	80026ac <HAL_Delay>
	lcd_send_cmd (0x80);
 800112e:	2080      	movs	r0, #128	; 0x80
 8001130:	f7ff ff74 	bl	800101c <lcd_send_cmd>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001140:	e006      	b.n	8001150 <lcd_send_string+0x18>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff96 	bl	800107c <lcd_send_data>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f4      	bne.n	8001142 <lcd_send_string+0xa>
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	337f      	adds	r3, #127	; 0x7f
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e008      	b.n	8001196 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	3340      	adds	r3, #64	; 0x40
 800118a:	b2db      	uxtb	r3, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001192:	b25b      	sxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff3f 	bl	800101c <lcd_send_cmd>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f001 fa1c 	bl	80025e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f83c 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f000 f91e 	bl	80013f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011b8:	f000 f8f2 	bl	80013a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011bc:	f000 f876 	bl	80012ac <MX_I2C1_Init>
  MX_TIM2_Init();
 80011c0:	f000 f8a2 	bl	8001308 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <main+0x74>)
 80011c6:	f004 fbe5 	bl	8005994 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  float myFloat = 3.14159;
//  char str[20];
//  sprintf(str, "%.2f", myFloat);
//  HAL_Delay(1000);
  lcd_init();
 80011ca:	f7ff ff87 	bl	80010dc <lcd_init>
  setTimer(0, 1000);
 80011ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f9cc 	bl	8001570 <setTimer>
  setTimer(0, 2000);
 80011d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f9c7 	bl	8001570 <setTimer>
  setTimer(1, 1000);
 80011e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 f9c2 	bl	8001570 <setTimer>
  setTimer(2, 1000);
 80011ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f0:	2002      	movs	r0, #2
 80011f2:	f000 f9bd 	bl	8001570 <setTimer>
  red_duration = 10;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <main+0x78>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	701a      	strb	r2, [r3, #0]
  amber_duration = 2;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <main+0x7c>)
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
  green_duration = 8;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <main+0x80>)
 8001204:	2208      	movs	r2, #8
 8001206:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  traffic_light_fsm_sel();
 8001208:	f000 fd9e 	bl	8001d48 <traffic_light_fsm_sel>
	  traffic_light_fsm_auto();
 800120c:	f000 fbfc 	bl	8001a08 <traffic_light_fsm_auto>
	  traffic_light_fsm_man();
 8001210:	f000 fc9e 	bl	8001b50 <traffic_light_fsm_man>
	  traffic_light_fsm_set();
 8001214:	f000 ffb8 	bl	8002188 <traffic_light_fsm_set>
	  traffic_light_fsm_sel();
 8001218:	e7f6      	b.n	8001208 <main+0x60>
 800121a:	bf00      	nop
 800121c:	200002d4 	.word	0x200002d4
 8001220:	20000267 	.word	0x20000267
 8001224:	20000263 	.word	0x20000263
 8001228:	20000261 	.word	0x20000261

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	; 0x40
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	2228      	movs	r2, #40	; 0x28
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 f854 	bl	80062e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001256:	2310      	movs	r3, #16
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001262:	2300      	movs	r3, #0
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	4618      	mov	r0, r3
 800126c:	f003 ff34 	bl	80050d8 <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001276:	f000 f965 	bl	8001544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127a:	230f      	movs	r3, #15
 800127c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127e:	2302      	movs	r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f004 f99f 	bl	80055d8 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80012a0:	f000 f950 	bl	8001544 <Error_Handler>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3740      	adds	r7, #64	; 0x40
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f001 fd4b 	bl	8002d84 <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f000 f926 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000280 	.word	0x20000280
 8001300:	40005400 	.word	0x40005400
 8001304:	000186a0 	.word	0x000186a0

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM2_Init+0x94>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM2_Init+0x94>)
 800132e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM2_Init+0x94>)
 800133c:	2209      	movs	r2, #9
 800133e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM2_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM2_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM2_Init+0x94>)
 800134e:	f004 fad1 	bl	80058f4 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 f8f4 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM2_Init+0x94>)
 800136a:	f004 fc55 	bl	8005c18 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 f8e6 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM2_Init+0x94>)
 8001386:	f004 fe37 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 f8d8 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002d4 	.word	0x200002d4

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f004 fe7e 	bl	80060d8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f8af 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000031c 	.word	0x2000031c
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b44      	ldr	r3, [pc, #272]	; (800151c <MX_GPIO_Init+0x128>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a43      	ldr	r2, [pc, #268]	; (800151c <MX_GPIO_Init+0x128>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <MX_GPIO_Init+0x128>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b3e      	ldr	r3, [pc, #248]	; (800151c <MX_GPIO_Init+0x128>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a3d      	ldr	r2, [pc, #244]	; (800151c <MX_GPIO_Init+0x128>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <MX_GPIO_Init+0x128>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b38      	ldr	r3, [pc, #224]	; (800151c <MX_GPIO_Init+0x128>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a37      	ldr	r2, [pc, #220]	; (800151c <MX_GPIO_Init+0x128>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_GPIO_Init+0x128>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_GPIO_Init+0x128>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a31      	ldr	r2, [pc, #196]	; (800151c <MX_GPIO_Init+0x128>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <MX_GPIO_Init+0x128>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TLM2_A_Pin|TLM2_B_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800146e:	482c      	ldr	r0, [pc, #176]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001470:	f001 fc6f 	bl	8002d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TLM1_B_Pin|TLM0_A_Pin|TLM1_A_Pin|TLM0_B_Pin
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800147a:	482a      	ldr	r0, [pc, #168]	; (8001524 <MX_GPIO_Init+0x130>)
 800147c:	f001 fc69 	bl	8002d52 <HAL_GPIO_WritePin>
                          |TLM3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLM3_A_GPIO_Port, TLM3_A_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	4828      	ldr	r0, [pc, #160]	; (8001528 <MX_GPIO_Init+0x134>)
 8001486:	f001 fc64 	bl	8002d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT_MODE_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin;
 800148a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001494:	2301      	movs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_MODE_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	4822      	ldr	r0, [pc, #136]	; (8001528 <MX_GPIO_Init+0x134>)
 80014a0:	f001 fabc 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_OK_Pin BT_SET_Pin */
  GPIO_InitStruct.Pin = BT_OK_Pin|BT_SET_Pin;
 80014a4:	2303      	movs	r3, #3
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	481a      	ldr	r0, [pc, #104]	; (8001520 <MX_GPIO_Init+0x12c>)
 80014b8:	f001 fab0 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TLM2_A_Pin TLM2_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TLM2_A_Pin|TLM2_B_Pin;
 80014bc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4619      	mov	r1, r3
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <MX_GPIO_Init+0x12c>)
 80014d6:	f001 faa1 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : TLM1_B_Pin TLM0_A_Pin TLM1_A_Pin TLM0_B_Pin
                           TLM3_B_Pin */
  GPIO_InitStruct.Pin = TLM1_B_Pin|TLM0_A_Pin|TLM1_A_Pin|TLM0_B_Pin
 80014da:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80014de:	613b      	str	r3, [r7, #16]
                          |TLM3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_GPIO_Init+0x130>)
 80014f4:	f001 fa92 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TLM3_A_Pin */
  GPIO_InitStruct.Pin = TLM3_A_Pin;
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2302      	movs	r3, #2
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TLM3_A_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_GPIO_Init+0x134>)
 8001510:	f001 fa84 	bl	8002a1c <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	40010800 	.word	0x40010800
 8001524:	40010c00 	.word	0x40010c00
 8001528:	40011000 	.word	0x40011000

0800152c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	timerRun();
 8001534:	f000 f83a 	bl	80015ac <timerRun>
	buttonRun();
 8001538:	f7ff faa6 	bl	8000a88 <buttonRun>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <isFlagTimer+0x1c>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000240 	.word	0x20000240

08001570 <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <setTimer+0x30>)
 8001580:	2100      	movs	r1, #0
 8001582:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration / TIMER_CYCLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <setTimer+0x34>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001590:	4905      	ldr	r1, [pc, #20]	; (80015a8 <setTimer+0x38>)
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000240 	.word	0x20000240
 80015a4:	20000014 	.word	0x20000014
 80015a8:	20000230 	.word	0x20000230

080015ac <timerRun>:
void timerInit(uint32_t prescaler, uint32_t period){
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
	TIMER_CYCLE  = (prescaler+1)*(period+1)*1000/frequency;
}
void timerRun(){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 80015b2:	2300      	movs	r3, #0
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	e01a      	b.n	80015ee <timerRun+0x42>
		if(timer_counters[i] > 0){
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <timerRun+0x54>)
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d011      	beq.n	80015e8 <timerRun+0x3c>
			timer_counters[i] --;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <timerRun+0x54>)
 80015c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015cc:	3a01      	subs	r2, #1
 80015ce:	490c      	ldr	r1, [pc, #48]	; (8001600 <timerRun+0x54>)
 80015d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <timerRun+0x54>)
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <timerRun+0x3c>
				timer_flags[i] = 1;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <timerRun+0x58>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	3301      	adds	r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d9e1      	bls.n	80015b8 <timerRun+0xc>
			}
		}
	}

}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000230 	.word	0x20000230
 8001604:	20000240 	.word	0x20000240

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a25      	ldr	r2, [pc, #148]	; (800171c <HAL_I2C_MspInit+0xb0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d142      	bne.n	8001712 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_I2C_MspInit+0xb4>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a23      	ldr	r2, [pc, #140]	; (8001720 <HAL_I2C_MspInit+0xb4>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_I2C_MspInit+0xb4>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016aa:	2312      	movs	r3, #18
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	481a      	ldr	r0, [pc, #104]	; (8001724 <HAL_I2C_MspInit+0xb8>)
 80016ba:	f001 f9af 	bl	8002a1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_I2C_MspInit+0xbc>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_I2C_MspInit+0xbc>)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_I2C_MspInit+0xb4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_I2C_MspInit+0xb4>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_I2C_MspInit+0xb4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201f      	movs	r0, #31
 80016f8:	f001 f8d3 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016fc:	201f      	movs	r0, #31
 80016fe:	f001 f8ec 	bl	80028da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2020      	movs	r0, #32
 8001708:	f001 f8cb 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800170c:	2020      	movs	r0, #32
 800170e:	f001 f8e4 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40005400 	.word	0x40005400
 8001720:	40021000 	.word	0x40021000
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40010000 	.word	0x40010000

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d113      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f001 f8a1 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f001 f8ba 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0x70>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d123      	bne.n	80017dc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_UART_MspInit+0x74>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <HAL_UART_MspInit+0x74>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179e:	61d3      	str	r3, [r2, #28]
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x74>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_UART_MspInit+0x74>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_UART_MspInit+0x74>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_UART_MspInit+0x74>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017c4:	230c      	movs	r3, #12
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0x78>)
 80017d8:	f001 f920 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 ff1d 	bl	8002674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM2_IRQHandler+0x10>)
 8001846:	f004 f8f7 	bl	8005a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002d4 	.word	0x200002d4

08001854 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <I2C1_EV_IRQHandler+0x10>)
 800185a:	f001 fce9 	bl	8003230 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000280 	.word	0x20000280

08001868 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <I2C1_ER_IRQHandler+0x10>)
 800186e:	f001 fe50 	bl	8003512 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000280 	.word	0x20000280

0800187c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <_kill>:

int _kill(int pid, int sig)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001894:	f004 fcfe 	bl	8006294 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	2216      	movs	r2, #22
 800189c:	601a      	str	r2, [r3, #0]
	return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_exit>:

void _exit (int status)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b2:	f04f 31ff 	mov.w	r1, #4294967295
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffe7 	bl	800188a <_kill>
	while (1) {}		/* Make sure we hang here */
 80018bc:	e7fe      	b.n	80018bc <_exit+0x12>

080018be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e00a      	b.n	80018e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d0:	f3af 8000 	nop.w
 80018d4:	4601      	mov	r1, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	60ba      	str	r2, [r7, #8]
 80018dc:	b2ca      	uxtb	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbf0      	blt.n	80018d0 <_read+0x12>
	}

return len;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e009      	b.n	800191e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf1      	blt.n	800190a <_write+0x12>
	}
	return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_close>:

int _close(int file)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001956:	605a      	str	r2, [r3, #4]
	return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <_isatty>:

int _isatty(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f004 fc68 	bl	8006294 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20005000 	.word	0x20005000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	20000244 	.word	0x20000244
 80019f8:	20000378 	.word	0x20000378

080019fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <traffic_light_fsm_auto>:
 */


#include "traffic_light_fsm_auto.h"

void traffic_light_fsm_auto(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	switch (status) {
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <traffic_light_fsm_auto+0x134>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3b06      	subs	r3, #6
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	f200 8086 	bhi.w	8001b24 <traffic_light_fsm_auto+0x11c>
 8001a18:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <traffic_light_fsm_auto+0x18>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a75 	.word	0x08001a75
 8001a28:	08001ab1 	.word	0x08001ab1
 8001a2c:	08001ae1 	.word	0x08001ae1
		case AUTO_RED_GREEN:
			counterRun();
 8001a30:	f7ff f984 	bl	8000d3c <counterRun>
			if(counters[1] == 0){
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <traffic_light_fsm_auto+0x138>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d111      	bne.n	8001a60 <traffic_light_fsm_auto+0x58>
				status = AUTO_RED_AMBER;
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <traffic_light_fsm_auto+0x134>)
 8001a3e:	2207      	movs	r2, #7
 8001a40:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001a42:	2102      	movs	r1, #2
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fa07 	bl	8000e58 <led_on>
				led_on(WAY2, AMBER);
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff fa03 	bl	8000e58 <led_on>
				setCounter(1, amber_duration);
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <traffic_light_fsm_auto+0x13c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff f8e9 	bl	8000c30 <setCounter>
			}else if(isButtonPressed(0)){
				status = INIT;
			}
			break;
 8001a5e:	e063      	b.n	8001b28 <traffic_light_fsm_auto+0x120>
			}else if(isButtonPressed(0)){
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff f89d 	bl	8000ba0 <isButtonPressed>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d05d      	beq.n	8001b28 <traffic_light_fsm_auto+0x120>
				status = INIT;
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <traffic_light_fsm_auto+0x134>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
			break;
 8001a72:	e059      	b.n	8001b28 <traffic_light_fsm_auto+0x120>
		case AUTO_RED_AMBER:
			counterRun();
 8001a74:	f7ff f962 	bl	8000d3c <counterRun>
			if(counters[1]==0){
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <traffic_light_fsm_auto+0x138>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d155      	bne.n	8001b2c <traffic_light_fsm_auto+0x124>
				status = AUTO_GREEN_RED;
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <traffic_light_fsm_auto+0x134>)
 8001a82:	2208      	movs	r2, #8
 8001a84:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, GREEN);
 8001a86:	2104      	movs	r1, #4
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff f9e5 	bl	8000e58 <led_on>
				led_on(WAY2, RED);
 8001a8e:	2102      	movs	r1, #2
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff f9e1 	bl	8000e58 <led_on>
				setCounter(0, green_duration);
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <traffic_light_fsm_auto+0x140>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff f8c7 	bl	8000c30 <setCounter>
				setCounter(1, red_duration);
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <traffic_light_fsm_auto+0x144>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff f8c1 	bl	8000c30 <setCounter>
			}
			break;
 8001aae:	e03d      	b.n	8001b2c <traffic_light_fsm_auto+0x124>
		case AUTO_GREEN_RED:
			counterRun();
 8001ab0:	f7ff f944 	bl	8000d3c <counterRun>
			if(counters[0]==0){
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <traffic_light_fsm_auto+0x138>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d139      	bne.n	8001b30 <traffic_light_fsm_auto+0x128>
				status = AUTO_AMBER_RED;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <traffic_light_fsm_auto+0x134>)
 8001abe:	2209      	movs	r2, #9
 8001ac0:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, AMBER);
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff f9c7 	bl	8000e58 <led_on>
				led_on(WAY2, RED);
 8001aca:	2102      	movs	r1, #2
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff f9c3 	bl	8000e58 <led_on>
				setCounter(0, amber_duration);
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <traffic_light_fsm_auto+0x13c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff f8a9 	bl	8000c30 <setCounter>
			}
			break;
 8001ade:	e027      	b.n	8001b30 <traffic_light_fsm_auto+0x128>
		case AUTO_AMBER_RED:
			counterRun();
 8001ae0:	f7ff f92c 	bl	8000d3c <counterRun>
			if(counters[0]==0 || counters[1] == 0){
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <traffic_light_fsm_auto+0x138>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <traffic_light_fsm_auto+0xec>
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <traffic_light_fsm_auto+0x138>)
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11f      	bne.n	8001b34 <traffic_light_fsm_auto+0x12c>
				status = AUTO_RED_GREEN;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <traffic_light_fsm_auto+0x134>)
 8001af6:	2206      	movs	r2, #6
 8001af8:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001afa:	2102      	movs	r1, #2
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff f9ab 	bl	8000e58 <led_on>
				led_on(WAY2, GREEN);
 8001b02:	2104      	movs	r1, #4
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff f9a7 	bl	8000e58 <led_on>
				setCounter(0, red_duration);
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <traffic_light_fsm_auto+0x144>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff f88d 	bl	8000c30 <setCounter>
				setCounter(1, green_duration);
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <traffic_light_fsm_auto+0x140>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff f887 	bl	8000c30 <setCounter>
			}
			break;
 8001b22:	e007      	b.n	8001b34 <traffic_light_fsm_auto+0x12c>
		default:
			break;
 8001b24:	bf00      	nop
 8001b26:	e006      	b.n	8001b36 <traffic_light_fsm_auto+0x12e>
			break;
 8001b28:	bf00      	nop
 8001b2a:	e004      	b.n	8001b36 <traffic_light_fsm_auto+0x12e>
			break;
 8001b2c:	bf00      	nop
 8001b2e:	e002      	b.n	8001b36 <traffic_light_fsm_auto+0x12e>
			break;
 8001b30:	bf00      	nop
 8001b32:	e000      	b.n	8001b36 <traffic_light_fsm_auto+0x12e>
			break;
 8001b34:	bf00      	nop
	}
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000027d 	.word	0x2000027d
 8001b40:	20000264 	.word	0x20000264
 8001b44:	20000263 	.word	0x20000263
 8001b48:	20000261 	.word	0x20000261
 8001b4c:	20000267 	.word	0x20000267

08001b50 <traffic_light_fsm_man>:
 *      Author: hachi
 */

#include "traffic_light_fsm_man.h"

void traffic_light_fsm_man(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	switch (status) {
 8001b54:	4b71      	ldr	r3, [pc, #452]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b0a      	subs	r3, #10
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	f200 80d2 	bhi.w	8001d04 <traffic_light_fsm_man+0x1b4>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <traffic_light_fsm_man+0x18>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001bdd 	.word	0x08001bdd
 8001b70:	08001c41 	.word	0x08001c41
 8001b74:	08001ca3 	.word	0x08001ca3
		case MAN_RED_GREEN:
			if(isFlagTimer(0)|| isButtonPressed(BT_MODE)){
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fce9 	bl	8001550 <isFlagTimer>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <traffic_light_fsm_man+0x40>
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff f80b 	bl	8000ba0 <isButtonPressed>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <traffic_light_fsm_man+0x48>
				status = INIT;
 8001b90:	4b62      	ldr	r3, [pc, #392]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]

				sprintf(lcd_line1,"     RED   AMBER");
				sprintf(lcd_line2,"AMBER   RED     ");
				lcd_send();
			}
			break;
 8001b96:	e0b7      	b.n	8001d08 <traffic_light_fsm_man+0x1b8>
			}else if(isButtonPressed(BT_SET)){
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff f801 	bl	8000ba0 <isButtonPressed>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80b1 	beq.w	8001d08 <traffic_light_fsm_man+0x1b8>
				status = MAN_RED_AMBER;
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001ba8:	220b      	movs	r2, #11
 8001baa:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001bac:	2102      	movs	r1, #2
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff f952 	bl	8000e58 <led_on>
				led_on(WAY2, AMBER);
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff f94e 	bl	8000e58 <led_on>
				setTimer(0, MANUAL_TIMEOUT);
 8001bbc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fcd5 	bl	8001570 <setTimer>
				sprintf(lcd_line1,"     RED   AMBER");
 8001bc6:	4956      	ldr	r1, [pc, #344]	; (8001d20 <traffic_light_fsm_man+0x1d0>)
 8001bc8:	4856      	ldr	r0, [pc, #344]	; (8001d24 <traffic_light_fsm_man+0x1d4>)
 8001bca:	f004 fff5 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"AMBER   RED     ");
 8001bce:	4956      	ldr	r1, [pc, #344]	; (8001d28 <traffic_light_fsm_man+0x1d8>)
 8001bd0:	4856      	ldr	r0, [pc, #344]	; (8001d2c <traffic_light_fsm_man+0x1dc>)
 8001bd2:	f004 fff1 	bl	8006bb8 <siprintf>
				lcd_send();
 8001bd6:	f7ff f815 	bl	8000c04 <lcd_send>
			break;
 8001bda:	e095      	b.n	8001d08 <traffic_light_fsm_man+0x1b8>
		case MAN_RED_AMBER:
			if(isFlagTimer(0)|| isButtonPressed(BT_MODE)){
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fcb7 	bl	8001550 <isFlagTimer>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <traffic_light_fsm_man+0xa4>
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7fe ffd9 	bl	8000ba0 <isButtonPressed>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <traffic_light_fsm_man+0xac>
				status = INIT;
 8001bf4:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]

				sprintf(lcd_line1,"     GREEN   RED");
				sprintf(lcd_line2,"RED   GREEN     ");
				lcd_send();
			}
			break;
 8001bfa:	e087      	b.n	8001d0c <traffic_light_fsm_man+0x1bc>
			}else if(isButtonPressed(BT_SET)){
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7fe ffcf 	bl	8000ba0 <isButtonPressed>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8081 	beq.w	8001d0c <traffic_light_fsm_man+0x1bc>
				status = MAN_GREEN_RED;
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, GREEN);
 8001c10:	2104      	movs	r1, #4
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff f920 	bl	8000e58 <led_on>
				led_on(WAY2, RED);
 8001c18:	2102      	movs	r1, #2
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff f91c 	bl	8000e58 <led_on>
				setTimer(0, MANUAL_TIMEOUT);
 8001c20:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fca3 	bl	8001570 <setTimer>
				sprintf(lcd_line1,"     GREEN   RED");
 8001c2a:	4941      	ldr	r1, [pc, #260]	; (8001d30 <traffic_light_fsm_man+0x1e0>)
 8001c2c:	483d      	ldr	r0, [pc, #244]	; (8001d24 <traffic_light_fsm_man+0x1d4>)
 8001c2e:	f004 ffc3 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"RED   GREEN     ");
 8001c32:	4940      	ldr	r1, [pc, #256]	; (8001d34 <traffic_light_fsm_man+0x1e4>)
 8001c34:	483d      	ldr	r0, [pc, #244]	; (8001d2c <traffic_light_fsm_man+0x1dc>)
 8001c36:	f004 ffbf 	bl	8006bb8 <siprintf>
				lcd_send();
 8001c3a:	f7fe ffe3 	bl	8000c04 <lcd_send>
			break;
 8001c3e:	e065      	b.n	8001d0c <traffic_light_fsm_man+0x1bc>
		case MAN_GREEN_RED:
			if(isFlagTimer(0)|| isButtonPressed(BT_MODE)){
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fc85 	bl	8001550 <isFlagTimer>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <traffic_light_fsm_man+0x108>
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7fe ffa7 	bl	8000ba0 <isButtonPressed>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <traffic_light_fsm_man+0x110>
				status = INIT;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]

				sprintf(lcd_line1,"     AMBER   RED");
				sprintf(lcd_line2,"RED   AMBER     ");
				lcd_send();
			}
			break;
 8001c5e:	e057      	b.n	8001d10 <traffic_light_fsm_man+0x1c0>
			}else if(isButtonPressed(BT_SET)){
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7fe ff9d 	bl	8000ba0 <isButtonPressed>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d051      	beq.n	8001d10 <traffic_light_fsm_man+0x1c0>
				status = MAN_AMBER_RED;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001c6e:	220d      	movs	r2, #13
 8001c70:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, AMBER);
 8001c72:	2103      	movs	r1, #3
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff f8ef 	bl	8000e58 <led_on>
				led_on(WAY2, RED);
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f7ff f8eb 	bl	8000e58 <led_on>
				setTimer(0, MANUAL_TIMEOUT);
 8001c82:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fc72 	bl	8001570 <setTimer>
				sprintf(lcd_line1,"     AMBER   RED");
 8001c8c:	492a      	ldr	r1, [pc, #168]	; (8001d38 <traffic_light_fsm_man+0x1e8>)
 8001c8e:	4825      	ldr	r0, [pc, #148]	; (8001d24 <traffic_light_fsm_man+0x1d4>)
 8001c90:	f004 ff92 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"RED   AMBER     ");
 8001c94:	4929      	ldr	r1, [pc, #164]	; (8001d3c <traffic_light_fsm_man+0x1ec>)
 8001c96:	4825      	ldr	r0, [pc, #148]	; (8001d2c <traffic_light_fsm_man+0x1dc>)
 8001c98:	f004 ff8e 	bl	8006bb8 <siprintf>
				lcd_send();
 8001c9c:	f7fe ffb2 	bl	8000c04 <lcd_send>
			break;
 8001ca0:	e036      	b.n	8001d10 <traffic_light_fsm_man+0x1c0>
		case MAN_AMBER_RED:
			if(isFlagTimer(0)|| isButtonPressed(BT_MODE)){
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fc54 	bl	8001550 <isFlagTimer>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <traffic_light_fsm_man+0x16a>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7fe ff76 	bl	8000ba0 <isButtonPressed>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <traffic_light_fsm_man+0x172>
				status = INIT;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

				sprintf(lcd_line1,"     RED   GREEN");
				sprintf(lcd_line2,"GREEN   RED     ");
				lcd_send();
			}
			break;
 8001cc0:	e028      	b.n	8001d14 <traffic_light_fsm_man+0x1c4>
			}else if(isButtonPressed(BT_SET)){
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7fe ff6c 	bl	8000ba0 <isButtonPressed>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d022      	beq.n	8001d14 <traffic_light_fsm_man+0x1c4>
				status = MAN_RED_GREEN;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <traffic_light_fsm_man+0x1cc>)
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff f8be 	bl	8000e58 <led_on>
				led_on(WAY2, GREEN);
 8001cdc:	2104      	movs	r1, #4
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff f8ba 	bl	8000e58 <led_on>
				setTimer(0, MANUAL_TIMEOUT);
 8001ce4:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fc41 	bl	8001570 <setTimer>
				sprintf(lcd_line1,"     RED   GREEN");
 8001cee:	4914      	ldr	r1, [pc, #80]	; (8001d40 <traffic_light_fsm_man+0x1f0>)
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <traffic_light_fsm_man+0x1d4>)
 8001cf2:	f004 ff61 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"GREEN   RED     ");
 8001cf6:	4913      	ldr	r1, [pc, #76]	; (8001d44 <traffic_light_fsm_man+0x1f4>)
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <traffic_light_fsm_man+0x1dc>)
 8001cfa:	f004 ff5d 	bl	8006bb8 <siprintf>
				lcd_send();
 8001cfe:	f7fe ff81 	bl	8000c04 <lcd_send>
			break;
 8001d02:	e007      	b.n	8001d14 <traffic_light_fsm_man+0x1c4>
		default:
			break;
 8001d04:	bf00      	nop
 8001d06:	e006      	b.n	8001d16 <traffic_light_fsm_man+0x1c6>
			break;
 8001d08:	bf00      	nop
 8001d0a:	e004      	b.n	8001d16 <traffic_light_fsm_man+0x1c6>
			break;
 8001d0c:	bf00      	nop
 8001d0e:	e002      	b.n	8001d16 <traffic_light_fsm_man+0x1c6>
			break;
 8001d10:	bf00      	nop
 8001d12:	e000      	b.n	8001d16 <traffic_light_fsm_man+0x1c6>
			break;
 8001d14:	bf00      	nop
	}
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000027d 	.word	0x2000027d
 8001d20:	08009078 	.word	0x08009078
 8001d24:	2000026c 	.word	0x2000026c
 8001d28:	0800908c 	.word	0x0800908c
 8001d2c:	20000250 	.word	0x20000250
 8001d30:	080090a0 	.word	0x080090a0
 8001d34:	080090b4 	.word	0x080090b4
 8001d38:	080090c8 	.word	0x080090c8
 8001d3c:	080090dc 	.word	0x080090dc
 8001d40:	080090f0 	.word	0x080090f0
 8001d44:	08009104 	.word	0x08009104

08001d48 <traffic_light_fsm_sel>:
 */


#include "traffic_light_fsm_sel.h"

void traffic_light_fsm_sel(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	switch (status) {
 8001d4c:	4bc5      	ldr	r3, [pc, #788]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	f200 81fc 	bhi.w	800214e <traffic_light_fsm_sel+0x406>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <traffic_light_fsm_sel+0x14>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d75 	.word	0x08001d75
 8001d60:	08001dbd 	.word	0x08001dbd
 8001d64:	08001e39 	.word	0x08001e39
 8001d68:	08001ed1 	.word	0x08001ed1
 8001d6c:	08001f9b 	.word	0x08001f9b
 8001d70:	080020b5 	.word	0x080020b5
		case INIT:
			if(1){
				status = SEL_AUTO;
 8001d74:	4bbb      	ldr	r3, [pc, #748]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
				setCounter(0, 0);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7fe ff57 	bl	8000c30 <setCounter>
				setCounter(1, 0);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7fe ff53 	bl	8000c30 <setCounter>
				setTimer(0, SELECT_TIMEOUT);
 8001d8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff fbee 	bl	8001570 <setTimer>
				isButtonPressed(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7fe ff03 	bl	8000ba0 <isButtonPressed>
				isButtonPressed(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7fe ff00 	bl	8000ba0 <isButtonPressed>
				isButtonPressed(2);
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7fe fefd 	bl	8000ba0 <isButtonPressed>
				sprintf(lcd_line1,">AUTO RED  GREEN");
 8001da6:	49b0      	ldr	r1, [pc, #704]	; (8002068 <traffic_light_fsm_sel+0x320>)
 8001da8:	48b0      	ldr	r0, [pc, #704]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001daa:	f004 ff05 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2," MANU AMBER     ");
 8001dae:	49b0      	ldr	r1, [pc, #704]	; (8002070 <traffic_light_fsm_sel+0x328>)
 8001db0:	48b0      	ldr	r0, [pc, #704]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8001db2:	f004 ff01 	bl	8006bb8 <siprintf>
				lcd_send();
 8001db6:	f7fe ff25 	bl	8000c04 <lcd_send>
			}
			break;
 8001dba:	e1d3      	b.n	8002164 <traffic_light_fsm_sel+0x41c>
		case SEL_AUTO:
			if(isFlagTimer(0) || isButtonPressed(BT_OK)){
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fbc7 	bl	8001550 <isFlagTimer>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <traffic_light_fsm_sel+0x8c>
 8001dc8:	2002      	movs	r0, #2
 8001dca:	f7fe fee9 	bl	8000ba0 <isButtonPressed>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d017      	beq.n	8001e04 <traffic_light_fsm_sel+0xbc>
				status = AUTO_RED_GREEN;
 8001dd4:	4ba3      	ldr	r3, [pc, #652]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001dda:	2102      	movs	r1, #2
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff f83b 	bl	8000e58 <led_on>
				led_on(WAY2, GREEN);
 8001de2:	2104      	movs	r1, #4
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff f837 	bl	8000e58 <led_on>
				setCounter(0, red_duration);
 8001dea:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <traffic_light_fsm_sel+0x330>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7fe ff1d 	bl	8000c30 <setCounter>
				setCounter(1, green_duration);
 8001df6:	4ba1      	ldr	r3, [pc, #644]	; (800207c <traffic_light_fsm_sel+0x334>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7fe ff17 	bl	8000c30 <setCounter>

				sprintf(lcd_line1," AUTO RED  GREEN");
				sprintf(lcd_line2,">MANU AMBER     ");
				lcd_send();
			}
			break;
 8001e02:	e1a6      	b.n	8002152 <traffic_light_fsm_sel+0x40a>
			}else if(isButtonPressed(BT_MODE)){
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7fe fecb 	bl	8000ba0 <isButtonPressed>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 81a0 	beq.w	8002152 <traffic_light_fsm_sel+0x40a>
				status = SEL_MAN;
 8001e12:	4b94      	ldr	r3, [pc, #592]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
				setTimer(0, SELECT_TIMEOUT);
 8001e18:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fba7 	bl	8001570 <setTimer>
				sprintf(lcd_line1," AUTO RED  GREEN");
 8001e22:	4997      	ldr	r1, [pc, #604]	; (8002080 <traffic_light_fsm_sel+0x338>)
 8001e24:	4891      	ldr	r0, [pc, #580]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001e26:	f004 fec7 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,">MANU AMBER     ");
 8001e2a:	4996      	ldr	r1, [pc, #600]	; (8002084 <traffic_light_fsm_sel+0x33c>)
 8001e2c:	4891      	ldr	r0, [pc, #580]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8001e2e:	f004 fec3 	bl	8006bb8 <siprintf>
				lcd_send();
 8001e32:	f7fe fee7 	bl	8000c04 <lcd_send>
			break;
 8001e36:	e18c      	b.n	8002152 <traffic_light_fsm_sel+0x40a>
		case SEL_MAN:
			if(isFlagTimer(0)){
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff fb89 	bl	8001550 <isFlagTimer>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <traffic_light_fsm_sel+0x102>
				status = INIT;
 8001e44:	4b87      	ldr	r3, [pc, #540]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(BT_OK)){
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f7fe fea8 	bl	8000ba0 <isButtonPressed>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01a      	beq.n	8001e8c <traffic_light_fsm_sel+0x144>
				status = MAN_RED_GREEN;
 8001e56:	4b83      	ldr	r3, [pc, #524]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7fe fffa 	bl	8000e58 <led_on>
				led_on(WAY2, GREEN);
 8001e64:	2104      	movs	r1, #4
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7fe fff6 	bl	8000e58 <led_on>
				setTimer(0, SETTING_TIMEOUT);
 8001e6c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fb7d 	bl	8001570 <setTimer>

				sprintf(lcd_line1,"     RED   GREEN");
 8001e76:	4984      	ldr	r1, [pc, #528]	; (8002088 <traffic_light_fsm_sel+0x340>)
 8001e78:	487c      	ldr	r0, [pc, #496]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001e7a:	f004 fe9d 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"GREEN   RED     ");
 8001e7e:	4983      	ldr	r1, [pc, #524]	; (800208c <traffic_light_fsm_sel+0x344>)
 8001e80:	487c      	ldr	r0, [pc, #496]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8001e82:	f004 fe99 	bl	8006bb8 <siprintf>
				lcd_send();
 8001e86:	f7fe febd 	bl	8000c04 <lcd_send>
				sprintf(lcd_line1," AUTO>RED  GREEN");
				sprintf(lcd_line2," MANU AMBER     ");
				lcd_send();
			}

			break;
 8001e8a:	e164      	b.n	8002156 <traffic_light_fsm_sel+0x40e>
			}else if(isButtonPressed(BT_MODE)){
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7fe fe87 	bl	8000ba0 <isButtonPressed>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 815e 	beq.w	8002156 <traffic_light_fsm_sel+0x40e>
				status = SEL_RED;
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7fe ffd8 	bl	8000e58 <led_on>
				led_on(WAY2, RED);
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7fe ffd4 	bl	8000e58 <led_on>
				setTimer(0, SELECT_TIMEOUT);
 8001eb0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff fb5b 	bl	8001570 <setTimer>
				sprintf(lcd_line1," AUTO>RED  GREEN");
 8001eba:	4975      	ldr	r1, [pc, #468]	; (8002090 <traffic_light_fsm_sel+0x348>)
 8001ebc:	486b      	ldr	r0, [pc, #428]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001ebe:	f004 fe7b 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2," MANU AMBER     ");
 8001ec2:	496b      	ldr	r1, [pc, #428]	; (8002070 <traffic_light_fsm_sel+0x328>)
 8001ec4:	486b      	ldr	r0, [pc, #428]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8001ec6:	f004 fe77 	bl	8006bb8 <siprintf>
				lcd_send();
 8001eca:	f7fe fe9b 	bl	8000c04 <lcd_send>
			break;
 8001ece:	e142      	b.n	8002156 <traffic_light_fsm_sel+0x40e>
		case SEL_RED:
			if(isFlagTimer(0)){
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fb3d 	bl	8001550 <isFlagTimer>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <traffic_light_fsm_sel+0x19a>
				status = INIT;
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(BT_OK)){
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7fe fe5c 	bl	8000ba0 <isButtonPressed>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d033      	beq.n	8001f56 <traffic_light_fsm_sel+0x20e>
				temp_duration = red_duration;
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <traffic_light_fsm_sel+0x330>)
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4b68      	ldr	r3, [pc, #416]	; (8002094 <traffic_light_fsm_sel+0x34c>)
 8001ef4:	701a      	strb	r2, [r3, #0]
				status = SET_RED;
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001ef8:	220e      	movs	r2, #14
 8001efa:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, RED);
 8001efc:	2102      	movs	r1, #2
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7fe ffaa 	bl	8000e58 <led_on>
				led_on(WAY2, RED);
 8001f04:	2102      	movs	r1, #2
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7fe ffa6 	bl	8000e58 <led_on>
				setTimer(0, SETTING_TIMEOUT);
 8001f0c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fb2d 	bl	8001570 <setTimer>
//				updateBuffer7SEG(3, red_duration);
				sprintf(lcd_line1,"Setting: RED    ");
 8001f16:	4960      	ldr	r1, [pc, #384]	; (8002098 <traffic_light_fsm_sel+0x350>)
 8001f18:	4854      	ldr	r0, [pc, #336]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001f1a:	f004 fe4d 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"Duration: %d%d    ", red_duration/10, red_duration%10);
 8001f1e:	4b56      	ldr	r3, [pc, #344]	; (8002078 <traffic_light_fsm_sel+0x330>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4a5e      	ldr	r2, [pc, #376]	; (800209c <traffic_light_fsm_sel+0x354>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4b52      	ldr	r3, [pc, #328]	; (8002078 <traffic_light_fsm_sel+0x330>)
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b5a      	ldr	r3, [pc, #360]	; (800209c <traffic_light_fsm_sel+0x354>)
 8001f34:	fba3 1302 	umull	r1, r3, r3, r2
 8001f38:	08d9      	lsrs	r1, r3, #3
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4602      	mov	r2, r0
 8001f48:	4955      	ldr	r1, [pc, #340]	; (80020a0 <traffic_light_fsm_sel+0x358>)
 8001f4a:	484a      	ldr	r0, [pc, #296]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8001f4c:	f004 fe34 	bl	8006bb8 <siprintf>
				lcd_send();
 8001f50:	f7fe fe58 	bl	8000c04 <lcd_send>

				sprintf(lcd_line1," AUTO RED  GREEN");
				sprintf(lcd_line2," MANU>AMBER     ");
				lcd_send();
			}
			break;
 8001f54:	e101      	b.n	800215a <traffic_light_fsm_sel+0x412>
			}else if(isButtonPressed(BT_MODE)){
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe fe22 	bl	8000ba0 <isButtonPressed>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80fb 	beq.w	800215a <traffic_light_fsm_sel+0x412>
				status = SEL_AMBER;
 8001f64:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001f66:	2204      	movs	r2, #4
 8001f68:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, AMBER);
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe ff73 	bl	8000e58 <led_on>
				led_on(WAY2, AMBER);
 8001f72:	2103      	movs	r1, #3
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7fe ff6f 	bl	8000e58 <led_on>
				setTimer(0, SELECT_TIMEOUT);
 8001f7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff faf6 	bl	8001570 <setTimer>
				sprintf(lcd_line1," AUTO RED  GREEN");
 8001f84:	493e      	ldr	r1, [pc, #248]	; (8002080 <traffic_light_fsm_sel+0x338>)
 8001f86:	4839      	ldr	r0, [pc, #228]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001f88:	f004 fe16 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2," MANU>AMBER     ");
 8001f8c:	4945      	ldr	r1, [pc, #276]	; (80020a4 <traffic_light_fsm_sel+0x35c>)
 8001f8e:	4839      	ldr	r0, [pc, #228]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8001f90:	f004 fe12 	bl	8006bb8 <siprintf>
				lcd_send();
 8001f94:	f7fe fe36 	bl	8000c04 <lcd_send>
			break;
 8001f98:	e0df      	b.n	800215a <traffic_light_fsm_sel+0x412>
		case SEL_AMBER:
			if(isFlagTimer(0)){
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fad8 	bl	8001550 <isFlagTimer>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <traffic_light_fsm_sel+0x264>
				status = INIT;
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(BT_OK)){
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7fe fdf7 	bl	8000ba0 <isButtonPressed>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d033      	beq.n	8002020 <traffic_light_fsm_sel+0x2d8>
				temp_duration = amber_duration;
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <traffic_light_fsm_sel+0x360>)
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <traffic_light_fsm_sel+0x34c>)
 8001fbe:	701a      	strb	r2, [r3, #0]
				status = SET_AMBER;
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, AMBER);
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7fe ff45 	bl	8000e58 <led_on>
				led_on(WAY2, AMBER);
 8001fce:	2103      	movs	r1, #3
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7fe ff41 	bl	8000e58 <led_on>
				setTimer(0, SETTING_TIMEOUT);
 8001fd6:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff fac8 	bl	8001570 <setTimer>
//				updateBuffer7SEG(4, amber_duration);
				sprintf(lcd_line1,"Setting: AMBER  ");
 8001fe0:	4932      	ldr	r1, [pc, #200]	; (80020ac <traffic_light_fsm_sel+0x364>)
 8001fe2:	4822      	ldr	r0, [pc, #136]	; (800206c <traffic_light_fsm_sel+0x324>)
 8001fe4:	f004 fde8 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"Duration: %d%d    ", amber_duration/10, amber_duration%10);
 8001fe8:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <traffic_light_fsm_sel+0x360>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <traffic_light_fsm_sel+0x354>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <traffic_light_fsm_sel+0x360>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <traffic_light_fsm_sel+0x354>)
 8001ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8002002:	08d9      	lsrs	r1, r3, #3
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4602      	mov	r2, r0
 8002012:	4923      	ldr	r1, [pc, #140]	; (80020a0 <traffic_light_fsm_sel+0x358>)
 8002014:	4817      	ldr	r0, [pc, #92]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 8002016:	f004 fdcf 	bl	8006bb8 <siprintf>
				lcd_send();
 800201a:	f7fe fdf3 	bl	8000c04 <lcd_send>
				setTimer(0, SELECT_TIMEOUT);
				sprintf(lcd_line1," AUTO RED >GREEN");
				sprintf(lcd_line2," MANU AMBER     ");
				lcd_send();
			}
			break;
 800201e:	e09e      	b.n	800215e <traffic_light_fsm_sel+0x416>
			}else if(isButtonPressed(BT_MODE)){
 8002020:	2000      	movs	r0, #0
 8002022:	f7fe fdbd 	bl	8000ba0 <isButtonPressed>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8098 	beq.w	800215e <traffic_light_fsm_sel+0x416>
				status = SEL_GREEN;
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <traffic_light_fsm_sel+0x31c>)
 8002030:	2205      	movs	r2, #5
 8002032:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, GREEN);
 8002034:	2104      	movs	r1, #4
 8002036:	2000      	movs	r0, #0
 8002038:	f7fe ff0e 	bl	8000e58 <led_on>
				led_on(WAY2, GREEN);
 800203c:	2104      	movs	r1, #4
 800203e:	2001      	movs	r0, #1
 8002040:	f7fe ff0a 	bl	8000e58 <led_on>
				setTimer(0, SELECT_TIMEOUT);
 8002044:	f241 3188 	movw	r1, #5000	; 0x1388
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff fa91 	bl	8001570 <setTimer>
				sprintf(lcd_line1," AUTO RED >GREEN");
 800204e:	4918      	ldr	r1, [pc, #96]	; (80020b0 <traffic_light_fsm_sel+0x368>)
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <traffic_light_fsm_sel+0x324>)
 8002052:	f004 fdb1 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2," MANU AMBER     ");
 8002056:	4906      	ldr	r1, [pc, #24]	; (8002070 <traffic_light_fsm_sel+0x328>)
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <traffic_light_fsm_sel+0x32c>)
 800205a:	f004 fdad 	bl	8006bb8 <siprintf>
				lcd_send();
 800205e:	f7fe fdd1 	bl	8000c04 <lcd_send>
			break;
 8002062:	e07c      	b.n	800215e <traffic_light_fsm_sel+0x416>
 8002064:	2000027d 	.word	0x2000027d
 8002068:	08009118 	.word	0x08009118
 800206c:	2000026c 	.word	0x2000026c
 8002070:	0800912c 	.word	0x0800912c
 8002074:	20000250 	.word	0x20000250
 8002078:	20000267 	.word	0x20000267
 800207c:	20000261 	.word	0x20000261
 8002080:	08009140 	.word	0x08009140
 8002084:	08009154 	.word	0x08009154
 8002088:	08009168 	.word	0x08009168
 800208c:	0800917c 	.word	0x0800917c
 8002090:	08009190 	.word	0x08009190
 8002094:	20000268 	.word	0x20000268
 8002098:	080091a4 	.word	0x080091a4
 800209c:	cccccccd 	.word	0xcccccccd
 80020a0:	080091b8 	.word	0x080091b8
 80020a4:	080091cc 	.word	0x080091cc
 80020a8:	20000263 	.word	0x20000263
 80020ac:	080091e0 	.word	0x080091e0
 80020b0:	080091f4 	.word	0x080091f4
		case SEL_GREEN:
			if(isFlagTimer(0)){
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7ff fa4b 	bl	8001550 <isFlagTimer>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <traffic_light_fsm_sel+0x37e>
				status = INIT;
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <traffic_light_fsm_sel+0x420>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(BT_OK)){
 80020c6:	2002      	movs	r0, #2
 80020c8:	f7fe fd6a 	bl	8000ba0 <isButtonPressed>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d033      	beq.n	800213a <traffic_light_fsm_sel+0x3f2>
				temp_duration = green_duration;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <traffic_light_fsm_sel+0x424>)
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <traffic_light_fsm_sel+0x428>)
 80020d8:	701a      	strb	r2, [r3, #0]
				status = SET_GREEN;
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <traffic_light_fsm_sel+0x420>)
 80020dc:	2210      	movs	r2, #16
 80020de:	701a      	strb	r2, [r3, #0]
				led_on(WAY1, GREEN);
 80020e0:	2104      	movs	r1, #4
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7fe feb8 	bl	8000e58 <led_on>
				led_on(WAY2, GREEN);
 80020e8:	2104      	movs	r1, #4
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7fe feb4 	bl	8000e58 <led_on>
				setTimer(0, SETTING_TIMEOUT);
 80020f0:	f643 2198 	movw	r1, #15000	; 0x3a98
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff fa3b 	bl	8001570 <setTimer>
//				updateBuffer7SEG(5, green_duration);
				sprintf(lcd_line1,"Setting: GREEN  ");
 80020fa:	491e      	ldr	r1, [pc, #120]	; (8002174 <traffic_light_fsm_sel+0x42c>)
 80020fc:	481e      	ldr	r0, [pc, #120]	; (8002178 <traffic_light_fsm_sel+0x430>)
 80020fe:	f004 fd5b 	bl	8006bb8 <siprintf>
				sprintf(lcd_line2,"Duration: %d%d    ", green_duration/10, green_duration%10);
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <traffic_light_fsm_sel+0x424>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4a1d      	ldr	r2, [pc, #116]	; (800217c <traffic_light_fsm_sel+0x434>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <traffic_light_fsm_sel+0x424>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <traffic_light_fsm_sel+0x434>)
 8002118:	fba3 1302 	umull	r1, r3, r3, r2
 800211c:	08d9      	lsrs	r1, r3, #3
 800211e:	460b      	mov	r3, r1
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4602      	mov	r2, r0
 800212c:	4914      	ldr	r1, [pc, #80]	; (8002180 <traffic_light_fsm_sel+0x438>)
 800212e:	4815      	ldr	r0, [pc, #84]	; (8002184 <traffic_light_fsm_sel+0x43c>)
 8002130:	f004 fd42 	bl	8006bb8 <siprintf>
				lcd_send();
 8002134:	f7fe fd66 	bl	8000c04 <lcd_send>
			}else if(isButtonPressed(BT_MODE)){
				status = INIT;
			}

			break;
 8002138:	e013      	b.n	8002162 <traffic_light_fsm_sel+0x41a>
			}else if(isButtonPressed(BT_MODE)){
 800213a:	2000      	movs	r0, #0
 800213c:	f7fe fd30 	bl	8000ba0 <isButtonPressed>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <traffic_light_fsm_sel+0x41a>
				status = INIT;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <traffic_light_fsm_sel+0x420>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
			break;
 800214c:	e009      	b.n	8002162 <traffic_light_fsm_sel+0x41a>
		default:
			break;
 800214e:	bf00      	nop
 8002150:	e008      	b.n	8002164 <traffic_light_fsm_sel+0x41c>
			break;
 8002152:	bf00      	nop
 8002154:	e006      	b.n	8002164 <traffic_light_fsm_sel+0x41c>
			break;
 8002156:	bf00      	nop
 8002158:	e004      	b.n	8002164 <traffic_light_fsm_sel+0x41c>
			break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <traffic_light_fsm_sel+0x41c>
			break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <traffic_light_fsm_sel+0x41c>
			break;
 8002162:	bf00      	nop
	}
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000027d 	.word	0x2000027d
 800216c:	20000261 	.word	0x20000261
 8002170:	20000268 	.word	0x20000268
 8002174:	08009208 	.word	0x08009208
 8002178:	2000026c 	.word	0x2000026c
 800217c:	cccccccd 	.word	0xcccccccd
 8002180:	080091b8 	.word	0x080091b8
 8002184:	20000250 	.word	0x20000250

08002188 <traffic_light_fsm_set>:
 *      Author: hachi
 */

#include "traffic_light_fsm_set.h"

void traffic_light_fsm_set(){
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	switch (status) {
 800218c:	4b9f      	ldr	r3, [pc, #636]	; (800240c <traffic_light_fsm_set+0x284>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b10      	cmp	r3, #16
 8002192:	f000 814b 	beq.w	800242c <traffic_light_fsm_set+0x2a4>
 8002196:	2b10      	cmp	r3, #16
 8002198:	f300 81e6 	bgt.w	8002568 <traffic_light_fsm_set+0x3e0>
 800219c:	2b0e      	cmp	r3, #14
 800219e:	d003      	beq.n	80021a8 <traffic_light_fsm_set+0x20>
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	f000 809c 	beq.w	80022de <traffic_light_fsm_set+0x156>
			}else if(isFlagTimer(0) || isButtonPressed(BT_MODE)){
				status = INIT;
			}
			break;
		default:
			break;
 80021a6:	e1df      	b.n	8002568 <traffic_light_fsm_set+0x3e0>
			if(isButtonPressed(BT_SET)){
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7fe fcf9 	bl	8000ba0 <isButtonPressed>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02c      	beq.n	800220e <traffic_light_fsm_set+0x86>
				temp_duration++;
 80021b4:	4b96      	ldr	r3, [pc, #600]	; (8002410 <traffic_light_fsm_set+0x288>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b94      	ldr	r3, [pc, #592]	; (8002410 <traffic_light_fsm_set+0x288>)
 80021be:	701a      	strb	r2, [r3, #0]
				if(temp_duration > 99) temp_duration = 5;
 80021c0:	4b93      	ldr	r3, [pc, #588]	; (8002410 <traffic_light_fsm_set+0x288>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b63      	cmp	r3, #99	; 0x63
 80021c6:	d902      	bls.n	80021ce <traffic_light_fsm_set+0x46>
 80021c8:	4b91      	ldr	r3, [pc, #580]	; (8002410 <traffic_light_fsm_set+0x288>)
 80021ca:	2205      	movs	r2, #5
 80021cc:	701a      	strb	r2, [r3, #0]
				sprintf(lcd_line2,"Duration: %d%d    ", temp_duration/10, temp_duration%10);
 80021ce:	4b90      	ldr	r3, [pc, #576]	; (8002410 <traffic_light_fsm_set+0x288>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	4a90      	ldr	r2, [pc, #576]	; (8002414 <traffic_light_fsm_set+0x28c>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	4b8c      	ldr	r3, [pc, #560]	; (8002410 <traffic_light_fsm_set+0x288>)
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	4b8c      	ldr	r3, [pc, #560]	; (8002414 <traffic_light_fsm_set+0x28c>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	08d9      	lsrs	r1, r3, #3
 80021ea:	460b      	mov	r3, r1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4602      	mov	r2, r0
 80021f8:	4987      	ldr	r1, [pc, #540]	; (8002418 <traffic_light_fsm_set+0x290>)
 80021fa:	4888      	ldr	r0, [pc, #544]	; (800241c <traffic_light_fsm_set+0x294>)
 80021fc:	f004 fcdc 	bl	8006bb8 <siprintf>
				lcd_send();
 8002200:	f7fe fd00 	bl	8000c04 <lcd_send>
				setTimer(0, SETTING_TIMEOUT);
 8002204:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff f9b1 	bl	8001570 <setTimer>
			if(isButtonHolding(BT_SET)){
 800220e:	2001      	movs	r0, #1
 8002210:	f7fe fce4 	bl	8000bdc <isButtonHolding>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d031      	beq.n	800227e <traffic_light_fsm_set+0xf6>
				if(isFlagTimer(2)){
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff f998 	bl	8001550 <isFlagTimer>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d02b      	beq.n	800227e <traffic_light_fsm_set+0xf6>
					setTimer(2, 200);
 8002226:	21c8      	movs	r1, #200	; 0xc8
 8002228:	2002      	movs	r0, #2
 800222a:	f7ff f9a1 	bl	8001570 <setTimer>
					temp_duration++;
 800222e:	4b78      	ldr	r3, [pc, #480]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002238:	701a      	strb	r2, [r3, #0]
					if(temp_duration > 99) temp_duration = 5;
 800223a:	4b75      	ldr	r3, [pc, #468]	; (8002410 <traffic_light_fsm_set+0x288>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b63      	cmp	r3, #99	; 0x63
 8002240:	d902      	bls.n	8002248 <traffic_light_fsm_set+0xc0>
 8002242:	4b73      	ldr	r3, [pc, #460]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002244:	2205      	movs	r2, #5
 8002246:	701a      	strb	r2, [r3, #0]
					sprintf(lcd_line2,"Duration: %d%d    ", temp_duration/10, temp_duration%10);
 8002248:	4b71      	ldr	r3, [pc, #452]	; (8002410 <traffic_light_fsm_set+0x288>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4a71      	ldr	r2, [pc, #452]	; (8002414 <traffic_light_fsm_set+0x28c>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	08db      	lsrs	r3, r3, #3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <traffic_light_fsm_set+0x288>)
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <traffic_light_fsm_set+0x28c>)
 800225e:	fba3 1302 	umull	r1, r3, r3, r2
 8002262:	08d9      	lsrs	r1, r3, #3
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4602      	mov	r2, r0
 8002272:	4969      	ldr	r1, [pc, #420]	; (8002418 <traffic_light_fsm_set+0x290>)
 8002274:	4869      	ldr	r0, [pc, #420]	; (800241c <traffic_light_fsm_set+0x294>)
 8002276:	f004 fc9f 	bl	8006bb8 <siprintf>
					lcd_send();
 800227a:	f7fe fcc3 	bl	8000c04 <lcd_send>
			if(isButtonPressed(BT_OK)){
 800227e:	2002      	movs	r0, #2
 8002280:	f7fe fc8e 	bl	8000ba0 <isButtonPressed>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d018      	beq.n	80022bc <traffic_light_fsm_set+0x134>
				red_duration = temp_duration;
 800228a:	4b61      	ldr	r3, [pc, #388]	; (8002410 <traffic_light_fsm_set+0x288>)
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <traffic_light_fsm_set+0x298>)
 8002290:	701a      	strb	r2, [r3, #0]
				if(red_duration <= amber_duration) amber_duration = 2;
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <traffic_light_fsm_set+0x298>)
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <traffic_light_fsm_set+0x29c>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d802      	bhi.n	80022a4 <traffic_light_fsm_set+0x11c>
 800229e:	4b61      	ldr	r3, [pc, #388]	; (8002424 <traffic_light_fsm_set+0x29c>)
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
				green_duration = red_duration - amber_duration;
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <traffic_light_fsm_set+0x298>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <traffic_light_fsm_set+0x29c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <traffic_light_fsm_set+0x2a0>)
 80022b2:	701a      	strb	r2, [r3, #0]
				status = INIT;
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <traffic_light_fsm_set+0x284>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
			break;
 80022ba:	e157      	b.n	800256c <traffic_light_fsm_set+0x3e4>
			}else if(isFlagTimer(0) || isButtonPressed(BT_MODE)){
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff f947 	bl	8001550 <isFlagTimer>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <traffic_light_fsm_set+0x14e>
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fc69 	bl	8000ba0 <isButtonPressed>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 814b 	beq.w	800256c <traffic_light_fsm_set+0x3e4>
				status = INIT;
 80022d6:	4b4d      	ldr	r3, [pc, #308]	; (800240c <traffic_light_fsm_set+0x284>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
			break;
 80022dc:	e146      	b.n	800256c <traffic_light_fsm_set+0x3e4>
			if(isButtonPressed(BT_SET)){
 80022de:	2001      	movs	r0, #1
 80022e0:	f7fe fc5e 	bl	8000ba0 <isButtonPressed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d02e      	beq.n	8002348 <traffic_light_fsm_set+0x1c0>
				temp_duration++;
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <traffic_light_fsm_set+0x288>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <traffic_light_fsm_set+0x288>)
 80022f4:	701a      	strb	r2, [r3, #0]
				if(temp_duration >= green_duration) temp_duration = 2;
 80022f6:	4b46      	ldr	r3, [pc, #280]	; (8002410 <traffic_light_fsm_set+0x288>)
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <traffic_light_fsm_set+0x2a0>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <traffic_light_fsm_set+0x180>
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002304:	2202      	movs	r2, #2
 8002306:	701a      	strb	r2, [r3, #0]
				sprintf(lcd_line2,"Duration: %d%d    ", temp_duration/10, temp_duration%10);
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <traffic_light_fsm_set+0x288>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4a41      	ldr	r2, [pc, #260]	; (8002414 <traffic_light_fsm_set+0x28c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <traffic_light_fsm_set+0x288>)
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <traffic_light_fsm_set+0x28c>)
 800231e:	fba3 1302 	umull	r1, r3, r3, r2
 8002322:	08d9      	lsrs	r1, r3, #3
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	4602      	mov	r2, r0
 8002332:	4939      	ldr	r1, [pc, #228]	; (8002418 <traffic_light_fsm_set+0x290>)
 8002334:	4839      	ldr	r0, [pc, #228]	; (800241c <traffic_light_fsm_set+0x294>)
 8002336:	f004 fc3f 	bl	8006bb8 <siprintf>
				lcd_send();
 800233a:	f7fe fc63 	bl	8000c04 <lcd_send>
				setTimer(0, SETTING_TIMEOUT);
 800233e:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff f914 	bl	8001570 <setTimer>
			if(isButtonHolding(BT_SET)){
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe fc47 	bl	8000bdc <isButtonHolding>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d033      	beq.n	80023bc <traffic_light_fsm_set+0x234>
				if(isFlagTimer(2)){
 8002354:	2002      	movs	r0, #2
 8002356:	f7ff f8fb 	bl	8001550 <isFlagTimer>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d02d      	beq.n	80023bc <traffic_light_fsm_set+0x234>
					setTimer(2, 200);
 8002360:	21c8      	movs	r1, #200	; 0xc8
 8002362:	2002      	movs	r0, #2
 8002364:	f7ff f904 	bl	8001570 <setTimer>
					temp_duration++;
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <traffic_light_fsm_set+0x288>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002372:	701a      	strb	r2, [r3, #0]
					if(temp_duration >= green_duration) temp_duration = 2;
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <traffic_light_fsm_set+0x2a0>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d302      	bcc.n	8002386 <traffic_light_fsm_set+0x1fe>
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
					sprintf(lcd_line2,"Duration: %d%d    ", temp_duration/10, temp_duration%10);
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <traffic_light_fsm_set+0x28c>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <traffic_light_fsm_set+0x288>)
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <traffic_light_fsm_set+0x28c>)
 800239c:	fba3 1302 	umull	r1, r3, r3, r2
 80023a0:	08d9      	lsrs	r1, r3, #3
 80023a2:	460b      	mov	r3, r1
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4602      	mov	r2, r0
 80023b0:	4919      	ldr	r1, [pc, #100]	; (8002418 <traffic_light_fsm_set+0x290>)
 80023b2:	481a      	ldr	r0, [pc, #104]	; (800241c <traffic_light_fsm_set+0x294>)
 80023b4:	f004 fc00 	bl	8006bb8 <siprintf>
					lcd_send();
 80023b8:	f7fe fc24 	bl	8000c04 <lcd_send>
			if(isButtonPressed(BT_OK)){
 80023bc:	2002      	movs	r0, #2
 80023be:	f7fe fbef 	bl	8000ba0 <isButtonPressed>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00f      	beq.n	80023e8 <traffic_light_fsm_set+0x260>
				amber_duration = temp_duration;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <traffic_light_fsm_set+0x288>)
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <traffic_light_fsm_set+0x29c>)
 80023ce:	701a      	strb	r2, [r3, #0]
				green_duration = red_duration - amber_duration;
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <traffic_light_fsm_set+0x298>)
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <traffic_light_fsm_set+0x29c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <traffic_light_fsm_set+0x2a0>)
 80023de:	701a      	strb	r2, [r3, #0]
				status = INIT;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <traffic_light_fsm_set+0x284>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
			break;
 80023e6:	e0c3      	b.n	8002570 <traffic_light_fsm_set+0x3e8>
			}else if(isFlagTimer(0) || isButtonPressed(BT_MODE)){
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff f8b1 	bl	8001550 <isFlagTimer>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <traffic_light_fsm_set+0x27a>
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7fe fbd3 	bl	8000ba0 <isButtonPressed>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80b7 	beq.w	8002570 <traffic_light_fsm_set+0x3e8>
				status = INIT;
 8002402:	4b02      	ldr	r3, [pc, #8]	; (800240c <traffic_light_fsm_set+0x284>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
			break;
 8002408:	e0b2      	b.n	8002570 <traffic_light_fsm_set+0x3e8>
 800240a:	bf00      	nop
 800240c:	2000027d 	.word	0x2000027d
 8002410:	20000268 	.word	0x20000268
 8002414:	cccccccd 	.word	0xcccccccd
 8002418:	0800921c 	.word	0x0800921c
 800241c:	20000250 	.word	0x20000250
 8002420:	20000267 	.word	0x20000267
 8002424:	20000263 	.word	0x20000263
 8002428:	20000261 	.word	0x20000261
			if(isButtonPressed(BT_SET)){
 800242c:	2001      	movs	r0, #1
 800242e:	f7fe fbb7 	bl	8000ba0 <isButtonPressed>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02e      	beq.n	8002496 <traffic_light_fsm_set+0x30e>
				temp_duration++;
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <traffic_light_fsm_set+0x3f4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b4e      	ldr	r3, [pc, #312]	; (800257c <traffic_light_fsm_set+0x3f4>)
 8002442:	701a      	strb	r2, [r3, #0]
				if(temp_duration >= red_duration) temp_duration = 3;
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <traffic_light_fsm_set+0x3f4>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <traffic_light_fsm_set+0x3f8>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d302      	bcc.n	8002456 <traffic_light_fsm_set+0x2ce>
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <traffic_light_fsm_set+0x3f4>)
 8002452:	2203      	movs	r2, #3
 8002454:	701a      	strb	r2, [r3, #0]
				sprintf(lcd_line2,"Duration: %d%d    ", temp_duration/10, temp_duration%10);
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <traffic_light_fsm_set+0x3f4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <traffic_light_fsm_set+0x3fc>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	4b45      	ldr	r3, [pc, #276]	; (800257c <traffic_light_fsm_set+0x3f4>)
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <traffic_light_fsm_set+0x3fc>)
 800246c:	fba3 1302 	umull	r1, r3, r3, r2
 8002470:	08d9      	lsrs	r1, r3, #3
 8002472:	460b      	mov	r3, r1
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4602      	mov	r2, r0
 8002480:	4941      	ldr	r1, [pc, #260]	; (8002588 <traffic_light_fsm_set+0x400>)
 8002482:	4842      	ldr	r0, [pc, #264]	; (800258c <traffic_light_fsm_set+0x404>)
 8002484:	f004 fb98 	bl	8006bb8 <siprintf>
				lcd_send();
 8002488:	f7fe fbbc 	bl	8000c04 <lcd_send>
				setTimer(0, SETTING_TIMEOUT);
 800248c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff f86d 	bl	8001570 <setTimer>
			if(isButtonHolding(BT_SET)){
 8002496:	2001      	movs	r0, #1
 8002498:	f7fe fba0 	bl	8000bdc <isButtonHolding>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d033      	beq.n	800250a <traffic_light_fsm_set+0x382>
				if(isFlagTimer(2)){
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7ff f854 	bl	8001550 <isFlagTimer>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02d      	beq.n	800250a <traffic_light_fsm_set+0x382>
					setTimer(2, 200);
 80024ae:	21c8      	movs	r1, #200	; 0xc8
 80024b0:	2002      	movs	r0, #2
 80024b2:	f7ff f85d 	bl	8001570 <setTimer>
					temp_duration++;
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <traffic_light_fsm_set+0x3f4>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <traffic_light_fsm_set+0x3f4>)
 80024c0:	701a      	strb	r2, [r3, #0]
					if(temp_duration >= red_duration) temp_duration = 3;
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <traffic_light_fsm_set+0x3f4>)
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <traffic_light_fsm_set+0x3f8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <traffic_light_fsm_set+0x34c>
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <traffic_light_fsm_set+0x3f4>)
 80024d0:	2203      	movs	r2, #3
 80024d2:	701a      	strb	r2, [r3, #0]
					sprintf(lcd_line2,"Duration: %d%d    ", temp_duration/10, temp_duration%10);
 80024d4:	4b29      	ldr	r3, [pc, #164]	; (800257c <traffic_light_fsm_set+0x3f4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <traffic_light_fsm_set+0x3fc>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	08db      	lsrs	r3, r3, #3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <traffic_light_fsm_set+0x3f4>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <traffic_light_fsm_set+0x3fc>)
 80024ea:	fba3 1302 	umull	r1, r3, r3, r2
 80024ee:	08d9      	lsrs	r1, r3, #3
 80024f0:	460b      	mov	r3, r1
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4602      	mov	r2, r0
 80024fe:	4922      	ldr	r1, [pc, #136]	; (8002588 <traffic_light_fsm_set+0x400>)
 8002500:	4822      	ldr	r0, [pc, #136]	; (800258c <traffic_light_fsm_set+0x404>)
 8002502:	f004 fb59 	bl	8006bb8 <siprintf>
					lcd_send();
 8002506:	f7fe fb7d 	bl	8000c04 <lcd_send>
			if(isButtonPressed(BT_OK)){
 800250a:	2002      	movs	r0, #2
 800250c:	f7fe fb48 	bl	8000ba0 <isButtonPressed>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <traffic_light_fsm_set+0x3c0>
				green_duration = temp_duration;
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <traffic_light_fsm_set+0x3f4>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <traffic_light_fsm_set+0x408>)
 800251c:	701a      	strb	r2, [r3, #0]
				if(green_duration <= amber_duration) amber_duration = 2;
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <traffic_light_fsm_set+0x408>)
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <traffic_light_fsm_set+0x40c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d802      	bhi.n	8002530 <traffic_light_fsm_set+0x3a8>
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <traffic_light_fsm_set+0x40c>)
 800252c:	2202      	movs	r2, #2
 800252e:	701a      	strb	r2, [r3, #0]
				red_duration = green_duration + amber_duration;
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <traffic_light_fsm_set+0x408>)
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <traffic_light_fsm_set+0x40c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4413      	add	r3, r2
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <traffic_light_fsm_set+0x3f8>)
 800253e:	701a      	strb	r2, [r3, #0]
				status = INIT;
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <traffic_light_fsm_set+0x410>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
			break;
 8002546:	e015      	b.n	8002574 <traffic_light_fsm_set+0x3ec>
			}else if(isFlagTimer(0) || isButtonPressed(BT_MODE)){
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff f801 	bl	8001550 <isFlagTimer>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <traffic_light_fsm_set+0x3d8>
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe fb23 	bl	8000ba0 <isButtonPressed>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <traffic_light_fsm_set+0x3ec>
				status = INIT;
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <traffic_light_fsm_set+0x410>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
			break;
 8002566:	e005      	b.n	8002574 <traffic_light_fsm_set+0x3ec>
			break;
 8002568:	bf00      	nop
 800256a:	e004      	b.n	8002576 <traffic_light_fsm_set+0x3ee>
			break;
 800256c:	bf00      	nop
 800256e:	e002      	b.n	8002576 <traffic_light_fsm_set+0x3ee>
			break;
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <traffic_light_fsm_set+0x3ee>
			break;
 8002574:	bf00      	nop
	}
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000268 	.word	0x20000268
 8002580:	20000267 	.word	0x20000267
 8002584:	cccccccd 	.word	0xcccccccd
 8002588:	0800921c 	.word	0x0800921c
 800258c:	20000250 	.word	0x20000250
 8002590:	20000261 	.word	0x20000261
 8002594:	20000263 	.word	0x20000263
 8002598:	2000027d 	.word	0x2000027d

0800259c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800259c:	f7ff fa2e 	bl	80019fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025a2:	490c      	ldr	r1, [pc, #48]	; (80025d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025a4:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025b8:	4c09      	ldr	r4, [pc, #36]	; (80025e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c6:	f003 fe6b 	bl	80062a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ca:	f7fe fded 	bl	80011a8 <main>
  bx lr
 80025ce:	4770      	bx	lr
  ldr r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80025d8:	08009644 	.word	0x08009644
  ldr r2, =_sbss
 80025dc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80025e0:	20000378 	.word	0x20000378

080025e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC1_2_IRQHandler>
	...

080025e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_Init+0x28>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_Init+0x28>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f000 f947 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fe:	2000      	movs	r0, #0
 8002600:	f000 f808 	bl	8002614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002604:	f7ff f800 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000

08002614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x54>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x58>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	fbb3 f3f1 	udiv	r3, r3, r1
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f95f 	bl	80028f6 <HAL_SYSTICK_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00e      	b.n	8002660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d80a      	bhi.n	800265e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002648:	2200      	movs	r2, #0
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f000 f927 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <HAL_InitTick+0x5c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000018 	.word	0x20000018
 800266c:	20000020 	.word	0x20000020
 8002670:	2000001c 	.word	0x2000001c

08002674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_IncTick+0x1c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_IncTick+0x20>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a03      	ldr	r2, [pc, #12]	; (8002694 <HAL_IncTick+0x20>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000020 	.word	0x20000020
 8002694:	20000364 	.word	0x20000364

08002698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <HAL_GetTick+0x10>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000364 	.word	0x20000364

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff fff0 	bl	8002698 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffe0 	bl	8002698 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000020 	.word	0x20000020

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4906      	ldr	r1, [pc, #24]	; (800278c <__NVIC_EnableIRQ+0x34>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff90 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff2d 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff42 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff35 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d005      	beq.n	8002934 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e051      	b.n	80029d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 020e 	bic.w	r2, r2, #14
 8002942:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_DMA_Abort_IT+0xd4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d029      	beq.n	80029b2 <HAL_DMA_Abort_IT+0xa2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <HAL_DMA_Abort_IT+0xd8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d022      	beq.n	80029ae <HAL_DMA_Abort_IT+0x9e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_DMA_Abort_IT+0xdc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x98>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_DMA_Abort_IT+0xe0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d012      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x92>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_DMA_Abort_IT+0xe4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00a      	beq.n	800299c <HAL_DMA_Abort_IT+0x8c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_DMA_Abort_IT+0xe8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d102      	bne.n	8002996 <HAL_DMA_Abort_IT+0x86>
 8002990:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002994:	e00e      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 8002996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299a:	e00b      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 800299c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a0:	e008      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a6:	e005      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ac:	e002      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029ae:	2310      	movs	r3, #16
 80029b0:	e000      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029b2:	2301      	movs	r3, #1
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_DMA_Abort_IT+0xec>)
 80029b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
    } 
  }
  return status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40020008 	.word	0x40020008
 80029e8:	4002001c 	.word	0x4002001c
 80029ec:	40020030 	.word	0x40020030
 80029f0:	40020044 	.word	0x40020044
 80029f4:	40020058 	.word	0x40020058
 80029f8:	4002006c 	.word	0x4002006c
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a0e:	b2db      	uxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b08b      	sub	sp, #44	; 0x2c
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	e169      	b.n	8002d04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a30:	2201      	movs	r2, #1
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f040 8158 	bne.w	8002cfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a9a      	ldr	r2, [pc, #616]	; (8002cbc <HAL_GPIO_Init+0x2a0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d05e      	beq.n	8002b16 <HAL_GPIO_Init+0xfa>
 8002a58:	4a98      	ldr	r2, [pc, #608]	; (8002cbc <HAL_GPIO_Init+0x2a0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d875      	bhi.n	8002b4a <HAL_GPIO_Init+0x12e>
 8002a5e:	4a98      	ldr	r2, [pc, #608]	; (8002cc0 <HAL_GPIO_Init+0x2a4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d058      	beq.n	8002b16 <HAL_GPIO_Init+0xfa>
 8002a64:	4a96      	ldr	r2, [pc, #600]	; (8002cc0 <HAL_GPIO_Init+0x2a4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d86f      	bhi.n	8002b4a <HAL_GPIO_Init+0x12e>
 8002a6a:	4a96      	ldr	r2, [pc, #600]	; (8002cc4 <HAL_GPIO_Init+0x2a8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d052      	beq.n	8002b16 <HAL_GPIO_Init+0xfa>
 8002a70:	4a94      	ldr	r2, [pc, #592]	; (8002cc4 <HAL_GPIO_Init+0x2a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d869      	bhi.n	8002b4a <HAL_GPIO_Init+0x12e>
 8002a76:	4a94      	ldr	r2, [pc, #592]	; (8002cc8 <HAL_GPIO_Init+0x2ac>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04c      	beq.n	8002b16 <HAL_GPIO_Init+0xfa>
 8002a7c:	4a92      	ldr	r2, [pc, #584]	; (8002cc8 <HAL_GPIO_Init+0x2ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d863      	bhi.n	8002b4a <HAL_GPIO_Init+0x12e>
 8002a82:	4a92      	ldr	r2, [pc, #584]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d046      	beq.n	8002b16 <HAL_GPIO_Init+0xfa>
 8002a88:	4a90      	ldr	r2, [pc, #576]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d85d      	bhi.n	8002b4a <HAL_GPIO_Init+0x12e>
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d82a      	bhi.n	8002ae8 <HAL_GPIO_Init+0xcc>
 8002a92:	2b12      	cmp	r3, #18
 8002a94:	d859      	bhi.n	8002b4a <HAL_GPIO_Init+0x12e>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <HAL_GPIO_Init+0x80>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002b17 	.word	0x08002b17
 8002aa0:	08002af1 	.word	0x08002af1
 8002aa4:	08002b03 	.word	0x08002b03
 8002aa8:	08002b45 	.word	0x08002b45
 8002aac:	08002b4b 	.word	0x08002b4b
 8002ab0:	08002b4b 	.word	0x08002b4b
 8002ab4:	08002b4b 	.word	0x08002b4b
 8002ab8:	08002b4b 	.word	0x08002b4b
 8002abc:	08002b4b 	.word	0x08002b4b
 8002ac0:	08002b4b 	.word	0x08002b4b
 8002ac4:	08002b4b 	.word	0x08002b4b
 8002ac8:	08002b4b 	.word	0x08002b4b
 8002acc:	08002b4b 	.word	0x08002b4b
 8002ad0:	08002b4b 	.word	0x08002b4b
 8002ad4:	08002b4b 	.word	0x08002b4b
 8002ad8:	08002b4b 	.word	0x08002b4b
 8002adc:	08002b4b 	.word	0x08002b4b
 8002ae0:	08002af9 	.word	0x08002af9
 8002ae4:	08002b0d 	.word	0x08002b0d
 8002ae8:	4a79      	ldr	r2, [pc, #484]	; (8002cd0 <HAL_GPIO_Init+0x2b4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aee:	e02c      	b.n	8002b4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	623b      	str	r3, [r7, #32]
          break;
 8002af6:	e029      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	3304      	adds	r3, #4
 8002afe:	623b      	str	r3, [r7, #32]
          break;
 8002b00:	e024      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	3308      	adds	r3, #8
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e01f      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	330c      	adds	r3, #12
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e01a      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	623b      	str	r3, [r7, #32]
          break;
 8002b22:	e013      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	611a      	str	r2, [r3, #16]
          break;
 8002b36:	e009      	b.n	8002b4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	615a      	str	r2, [r3, #20]
          break;
 8002b42:	e003      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
          break;
 8002b48:	e000      	b.n	8002b4c <HAL_GPIO_Init+0x130>
          break;
 8002b4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d801      	bhi.n	8002b56 <HAL_GPIO_Init+0x13a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	e001      	b.n	8002b5a <HAL_GPIO_Init+0x13e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2bff      	cmp	r3, #255	; 0xff
 8002b60:	d802      	bhi.n	8002b68 <HAL_GPIO_Init+0x14c>
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	e002      	b.n	8002b6e <HAL_GPIO_Init+0x152>
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	3b08      	subs	r3, #8
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	210f      	movs	r1, #15
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	6a39      	ldr	r1, [r7, #32]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80b1 	beq.w	8002cfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_GPIO_Init+0x2b8>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a4c      	ldr	r2, [pc, #304]	; (8002cd4 <HAL_GPIO_Init+0x2b8>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_GPIO_Init+0x2b8>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb4:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <HAL_GPIO_Init+0x2bc>)
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <HAL_GPIO_Init+0x2c0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3f      	ldr	r2, [pc, #252]	; (8002ce0 <HAL_GPIO_Init+0x2c4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00d      	beq.n	8002c04 <HAL_GPIO_Init+0x1e8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3e      	ldr	r2, [pc, #248]	; (8002ce4 <HAL_GPIO_Init+0x2c8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <HAL_GPIO_Init+0x1e4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3d      	ldr	r2, [pc, #244]	; (8002ce8 <HAL_GPIO_Init+0x2cc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_GPIO_Init+0x1e0>
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e006      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	e004      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e002      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	f002 0203 	and.w	r2, r2, #3
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	4093      	lsls	r3, r2
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c1a:	492f      	ldr	r1, [pc, #188]	; (8002cd8 <HAL_GPIO_Init+0x2bc>)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c34:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	492c      	ldr	r1, [pc, #176]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	4928      	ldr	r1, [pc, #160]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d006      	beq.n	8002c6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	4922      	ldr	r1, [pc, #136]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	491e      	ldr	r1, [pc, #120]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4918      	ldr	r1, [pc, #96]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	4914      	ldr	r1, [pc, #80]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d021      	beq.n	8002cf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	e021      	b.n	8002cfe <HAL_GPIO_Init+0x2e2>
 8002cba:	bf00      	nop
 8002cbc:	10320000 	.word	0x10320000
 8002cc0:	10310000 	.word	0x10310000
 8002cc4:	10220000 	.word	0x10220000
 8002cc8:	10210000 	.word	0x10210000
 8002ccc:	10120000 	.word	0x10120000
 8002cd0:	10110000 	.word	0x10110000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40010800 	.word	0x40010800
 8002ce0:	40010c00 	.word	0x40010c00
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	4909      	ldr	r1, [pc, #36]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	3301      	adds	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f47f ae8e 	bne.w	8002a30 <HAL_GPIO_Init+0x14>
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	372c      	adds	r7, #44	; 0x2c
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	807b      	strh	r3, [r7, #2]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d62:	787b      	ldrb	r3, [r7, #1]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d68:	887a      	ldrh	r2, [r7, #2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d6e:	e003      	b.n	8002d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e12b      	b.n	8002fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fc5e 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de8:	f002 fd3e 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8002dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a81      	ldr	r2, [pc, #516]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d807      	bhi.n	8002e08 <HAL_I2C_Init+0x84>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a80      	ldr	r2, [pc, #512]	; (8002ffc <HAL_I2C_Init+0x278>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e006      	b.n	8002e16 <HAL_I2C_Init+0x92>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	; (8003000 <HAL_I2C_Init+0x27c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0e7      	b.n	8002fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a78      	ldr	r2, [pc, #480]	; (8003004 <HAL_I2C_Init+0x280>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9b      	lsrs	r3, r3, #18
 8002e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d802      	bhi.n	8002e58 <HAL_I2C_Init+0xd4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	e009      	b.n	8002e6c <HAL_I2C_Init+0xe8>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a69      	ldr	r2, [pc, #420]	; (8003008 <HAL_I2C_Init+0x284>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	495c      	ldr	r1, [pc, #368]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d819      	bhi.n	8002ec0 <HAL_I2C_Init+0x13c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e59      	subs	r1, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_I2C_Init+0x138>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e59      	subs	r1, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	e051      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e04f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_I2C_Init+0x168>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e012      	b.n	8002f12 <HAL_I2C_Init+0x18e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Init+0x196>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10e      	bne.n	8002f40 <HAL_I2C_Init+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e58      	subs	r0, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6911      	ldr	r1, [r2, #16]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	000186a0 	.word	0x000186a0
 8002ffc:	001e847f 	.word	0x001e847f
 8003000:	003d08ff 	.word	0x003d08ff
 8003004:	431bde83 	.word	0x431bde83
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d103      	bne.n	800302a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	611a      	str	r2, [r3, #16]
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	461a      	mov	r2, r3
 8003040:	460b      	mov	r3, r1
 8003042:	817b      	strh	r3, [r7, #10]
 8003044:	4613      	mov	r3, r2
 8003046:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff fb26 	bl	8002698 <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	f040 80e0 	bne.w	800321c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2319      	movs	r3, #25
 8003062:	2201      	movs	r2, #1
 8003064:	4970      	ldr	r1, [pc, #448]	; (8003228 <HAL_I2C_Master_Transmit+0x1f4>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f001 fe12 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	e0d3      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_I2C_Master_Transmit+0x50>
 8003080:	2302      	movs	r3, #2
 8003082:	e0cc      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d007      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2210      	movs	r2, #16
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	893a      	ldrh	r2, [r7, #8]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_I2C_Master_Transmit+0x1f8>)
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030ec:	8979      	ldrh	r1, [r7, #10]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f001 fca2 	bl	8004a3c <I2C_MasterRequestWrite>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e08d      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003118:	e066      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f001 fed0 	bl	8004ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b04      	cmp	r3, #4
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06b      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d11b      	bne.n	80031bc <HAL_I2C_Master_Transmit+0x188>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d017      	beq.n	80031bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6a39      	ldr	r1, [r7, #32]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f001 fec7 	bl	8004f54 <I2C_WaitOnBTFFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d107      	bne.n	80031e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01a      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d194      	bne.n	800311a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	00100002 	.word	0x00100002
 800322c:	ffff0000 	.word	0xffff0000

08003230 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003250:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b10      	cmp	r3, #16
 800325e:	d003      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0x38>
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	f040 80c1 	bne.w	80033ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_I2C_EV_IRQHandler+0x6e>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003288:	d003      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x62>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003290:	d101      	bne.n	8003296 <HAL_I2C_EV_IRQHandler+0x66>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x68>
 8003296:	2300      	movs	r3, #0
 8003298:	2b01      	cmp	r3, #1
 800329a:	f000 8132 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x92>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	0a5b      	lsrs	r3, r3, #9
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f001 fef5 	bl	80050a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fd99 	bl	8003df2 <I2C_Master_SB>
 80032c0:	e092      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0a5b      	lsrs	r3, r3, #9
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fe0e 	bl	8003efc <I2C_Master_ADD10>
 80032e0:	e082      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_I2C_EV_IRQHandler+0xd2>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	0a5b      	lsrs	r3, r3, #9
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fe27 	bl	8003f4e <I2C_Master_ADDR>
 8003300:	e072      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03b      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331c:	f000 80f3 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	09db      	lsrs	r3, r3, #7
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00f      	beq.n	800334c <HAL_I2C_EV_IRQHandler+0x11c>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_I2C_EV_IRQHandler+0x11c>
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9f1 	bl	800372c <I2C_MasterTransmit_TXE>
 800334a:	e04d      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80d6 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	0a5b      	lsrs	r3, r3, #9
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80cf 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003368:	7bbb      	ldrb	r3, [r7, #14]
 800336a:	2b21      	cmp	r3, #33	; 0x21
 800336c:	d103      	bne.n	8003376 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa78 	bl	8003864 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003374:	e0c7      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	f040 80c4 	bne.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fae6 	bl	8003950 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003384:	e0bf      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	f000 80b7 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00f      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x194>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	0a9b      	lsrs	r3, r3, #10
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x194>
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fb5f 	bl	8003a80 <I2C_MasterReceive_RXNE>
 80033c2:	e011      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 809a 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	0a5b      	lsrs	r3, r3, #9
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8093 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fc15 	bl	8003c10 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e6:	e08e      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033e8:	e08d      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e007      	b.n	800340c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x20e>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	0a5b      	lsrs	r3, r3, #9
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003434:	69b9      	ldr	r1, [r7, #24]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 ffe0 	bl	80043fc <I2C_Slave_ADDR>
 800343c:	e066      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x22e>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	0a5b      	lsrs	r3, r3, #9
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f81a 	bl	8004490 <I2C_Slave_STOPF>
 800345c:	e056      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	2b21      	cmp	r3, #33	; 0x21
 8003462:	d002      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x23a>
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	2b29      	cmp	r3, #41	; 0x29
 8003468:	d125      	bne.n	80034b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	09db      	lsrs	r3, r3, #7
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00f      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x266>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0a9b      	lsrs	r3, r3, #10
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x266>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fef8 	bl	8004284 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003494:	e039      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d033      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02d      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 ff25 	bl	80042fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b4:	e029      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00f      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	0a9b      	lsrs	r3, r3, #10
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ff2f 	bl	800433e <I2C_SlaveReceive_RXNE>
 80034e0:	e014      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 ff5d 	bl	80043ba <I2C_SlaveReceive_BTF>
 8003500:	e004      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08a      	sub	sp, #40	; 0x28
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003534:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_I2C_ER_IRQHandler+0x5e>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800355e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	0a5b      	lsrs	r3, r3, #9
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <HAL_I2C_ER_IRQHandler+0x88>
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003598:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	0a9b      	lsrs	r3, r3, #10
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03f      	beq.n	8003626 <HAL_I2C_ER_IRQHandler+0x114>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d039      	beq.n	8003626 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80035b2:	7efb      	ldrb	r3, [r7, #27]
 80035b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035cc:	7ebb      	ldrb	r3, [r7, #26]
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d112      	bne.n	80035f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b21      	cmp	r3, #33	; 0x21
 80035dc:	d008      	beq.n	80035f0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b29      	cmp	r3, #41	; 0x29
 80035e2:	d005      	beq.n	80035f0 <HAL_I2C_ER_IRQHandler+0xde>
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b28      	cmp	r3, #40	; 0x28
 80035e8:	d106      	bne.n	80035f8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b21      	cmp	r3, #33	; 0x21
 80035ee:	d103      	bne.n	80035f8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f001 f87d 	bl	80046f0 <I2C_Slave_AF>
 80035f6:	e016      	b.n	8003626 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003600:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800360a:	7efb      	ldrb	r3, [r7, #27]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d002      	beq.n	8003616 <HAL_I2C_ER_IRQHandler+0x104>
 8003610:	7efb      	ldrb	r3, [r7, #27]
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d107      	bne.n	8003626 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003624:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	0adb      	lsrs	r3, r3, #11
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00e      	beq.n	8003650 <HAL_I2C_ER_IRQHandler+0x13e>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800364e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f001 f8b8 	bl	80047d8 <I2C_ITError>
  }
}
 8003668:	bf00      	nop
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
 80036c4:	4613      	mov	r3, r2
 80036c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003742:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d150      	bne.n	80037f4 <I2C_MasterTransmit_TXE+0xc8>
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b21      	cmp	r3, #33	; 0x21
 8003756:	d14d      	bne.n	80037f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d01d      	beq.n	800379a <I2C_MasterTransmit_TXE+0x6e>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b20      	cmp	r3, #32
 8003762:	d01a      	beq.n	800379a <I2C_MasterTransmit_TXE+0x6e>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800376a:	d016      	beq.n	800379a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2211      	movs	r2, #17
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff6c 	bl	8003670 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003798:	e060      	b.n	800385c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d107      	bne.n	80037e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff81 	bl	80036e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e2:	e03b      	b.n	800385c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff3f 	bl	8003670 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f2:	e033      	b.n	800385c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b21      	cmp	r3, #33	; 0x21
 80037f8:	d005      	beq.n	8003806 <I2C_MasterTransmit_TXE+0xda>
 80037fa:	7bbb      	ldrb	r3, [r7, #14]
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d12d      	bne.n	800385c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b22      	cmp	r3, #34	; 0x22
 8003804:	d12a      	bne.n	800385c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003820:	e01c      	b.n	800385c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	d103      	bne.n	8003836 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f88e 	bl	8003950 <I2C_MemoryTransmit_TXE_BTF>
}
 8003834:	e012      	b.n	800385c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800385a:	e7ff      	b.n	800385c <I2C_MasterTransmit_TXE+0x130>
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b21      	cmp	r3, #33	; 0x21
 800387c:	d164      	bne.n	8003948 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038ac:	e04c      	b.n	8003948 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d01d      	beq.n	80038f0 <I2C_MasterTransmit_BTF+0x8c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d01a      	beq.n	80038f0 <I2C_MasterTransmit_BTF+0x8c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c0:	d016      	beq.n	80038f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2211      	movs	r2, #17
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fec1 	bl	8003670 <HAL_I2C_MasterTxCpltCallback>
}
 80038ee:	e02b      	b.n	8003948 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d107      	bne.n	800393a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fed6 	bl	80036e4 <HAL_I2C_MemTxCpltCallback>
}
 8003938:	e006      	b.n	8003948 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fe94 	bl	8003670 <HAL_I2C_MasterTxCpltCallback>
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11d      	bne.n	80039a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10b      	bne.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003974:	b2da      	uxtb	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003986:	e077      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	b29b      	uxth	r3, r3
 800398e:	121b      	asrs	r3, r3, #8
 8003990:	b2da      	uxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a2:	e069      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10b      	bne.n	80039c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c2:	e059      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d152      	bne.n	8003a72 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b22      	cmp	r3, #34	; 0x22
 80039d0:	d10d      	bne.n	80039ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ec:	e044      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d015      	beq.n	8003a24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b21      	cmp	r3, #33	; 0x21
 80039fc:	d112      	bne.n	8003a24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a22:	e029      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d124      	bne.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b21      	cmp	r3, #33	; 0x21
 8003a32:	d121      	bne.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fe3a 	bl	80036e4 <HAL_I2C_MemTxCpltCallback>
}
 8003a70:	e002      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff faca 	bl	800300c <I2C_Flush_DR>
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b22      	cmp	r3, #34	; 0x22
 8003a92:	f040 80b9 	bne.w	8003c08 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d921      	bls.n	8003aee <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	f040 8096 	bne.w	8003c08 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003aec:	e08c      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d07f      	beq.n	8003bf6 <I2C_MasterReceive_RXNE+0x176>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <I2C_MasterReceive_RXNE+0x82>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d179      	bne.n	8003bf6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 fa6e 	bl	8004fe4 <I2C_WaitOnSTOPRequestThroughIT>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d14c      	bne.n	8003ba8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d10a      	bne.n	8003b7e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fdbd 	bl	80036f6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b7c:	e044      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d002      	beq.n	8003b92 <I2C_MasterReceive_RXNE+0x112>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d103      	bne.n	8003b9a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
 8003b98:	e002      	b.n	8003ba0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2212      	movs	r2, #18
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fd6e 	bl	8003682 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ba6:	e02f      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fd8a 	bl	8003708 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bf4:	e008      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c04:	605a      	str	r2, [r3, #4]
}
 8003c06:	e7ff      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x188>
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11b      	bne.n	8003c60 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c5e:	e0c4      	b.n	8003dea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d129      	bne.n	8003cbe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d00a      	beq.n	8003c96 <I2C_MasterReceive_BTF+0x86>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d007      	beq.n	8003c96 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cbc:	e095      	b.n	8003dea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d17d      	bne.n	8003dc4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d002      	beq.n	8003cd4 <I2C_MasterReceive_BTF+0xc4>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d108      	bne.n	8003ce6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e016      	b.n	8003d14 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d002      	beq.n	8003cf2 <I2C_MasterReceive_BTF+0xe2>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e007      	b.n	8003d14 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d6e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d10a      	bne.n	8003d9a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff fcaf 	bl	80036f6 <HAL_I2C_MemRxCpltCallback>
}
 8003d98:	e027      	b.n	8003dea <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d002      	beq.n	8003dae <I2C_MasterReceive_BTF+0x19e>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d103      	bne.n	8003db6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
 8003db4:	e002      	b.n	8003dbc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2212      	movs	r2, #18
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fc60 	bl	8003682 <HAL_I2C_MasterRxCpltCallback>
}
 8003dc2:	e012      	b.n	8003dea <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d117      	bne.n	8003e36 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e1e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e20:	e067      	b.n	8003ef2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]
}
 8003e34:	e05d      	b.n	8003ef2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3e:	d133      	bne.n	8003ea8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b21      	cmp	r3, #33	; 0x21
 8003e4a:	d109      	bne.n	8003e60 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]
 8003e5e:	e008      	b.n	8003e72 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <I2C_Master_SB+0x92>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d032      	beq.n	8003ef2 <I2C_Master_SB+0x100>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02d      	beq.n	8003ef2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea4:	605a      	str	r2, [r3, #4]
}
 8003ea6:	e024      	b.n	8003ef2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10e      	bne.n	8003ece <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	11db      	asrs	r3, r3, #7
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 0306 	and.w	r3, r3, #6
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f063 030f 	orn	r3, r3, #15
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	611a      	str	r2, [r3, #16]
}
 8003ecc:	e011      	b.n	8003ef2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10d      	bne.n	8003ef2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	11db      	asrs	r3, r3, #7
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0306 	and.w	r3, r3, #6
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f063 030e 	orn	r3, r3, #14
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <I2C_Master_ADD10+0x26>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <I2C_Master_ADD10+0x48>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f42:	605a      	str	r2, [r3, #4]
  }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b091      	sub	sp, #68	; 0x44
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b22      	cmp	r3, #34	; 0x22
 8003f76:	f040 8174 	bne.w	8004262 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <I2C_Master_ADDR+0x54>
 8003f82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d10b      	bne.n	8003fa2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	e16b      	b.n	800427a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11d      	bne.n	8003fe6 <I2C_Master_ADDR+0x98>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fb2:	d118      	bne.n	8003fe6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8003fe4:	e149      	b.n	800427a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d113      	bne.n	8004018 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e120      	b.n	800425a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 808a 	bne.w	8004138 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800402a:	d137      	bne.n	800409c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404a:	d113      	bne.n	8004074 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	e0f2      	b.n	800425a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e0de      	b.n	800425a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d02e      	beq.n	8004100 <I2C_Master_ADDR+0x1b2>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d02b      	beq.n	8004100 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	2b12      	cmp	r3, #18
 80040ac:	d102      	bne.n	80040b4 <I2C_Master_ADDR+0x166>
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d125      	bne.n	8004100 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d00e      	beq.n	80040d8 <I2C_Master_ADDR+0x18a>
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d00b      	beq.n	80040d8 <I2C_Master_ADDR+0x18a>
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d008      	beq.n	80040d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	e0ac      	b.n	800425a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e090      	b.n	800425a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d158      	bne.n	80041f4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	2b04      	cmp	r3, #4
 8004146:	d021      	beq.n	800418c <I2C_Master_ADDR+0x23e>
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b02      	cmp	r3, #2
 800414c:	d01e      	beq.n	800418c <I2C_Master_ADDR+0x23e>
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b10      	cmp	r3, #16
 8004152:	d01b      	beq.n	800418c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004162:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e012      	b.n	80041b2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c0:	d14b      	bne.n	800425a <I2C_Master_ADDR+0x30c>
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c8:	d00b      	beq.n	80041e2 <I2C_Master_ADDR+0x294>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d008      	beq.n	80041e2 <I2C_Master_ADDR+0x294>
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d005      	beq.n	80041e2 <I2C_Master_ADDR+0x294>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d002      	beq.n	80041e2 <I2C_Master_ADDR+0x294>
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d13b      	bne.n	800425a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	e032      	b.n	800425a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004202:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d117      	bne.n	8004244 <I2C_Master_ADDR+0x2f6>
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800421a:	d00b      	beq.n	8004234 <I2C_Master_ADDR+0x2e6>
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	2b01      	cmp	r3, #1
 8004220:	d008      	beq.n	8004234 <I2C_Master_ADDR+0x2e6>
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b08      	cmp	r3, #8
 8004226:	d005      	beq.n	8004234 <I2C_Master_ADDR+0x2e6>
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	2b10      	cmp	r3, #16
 800422c:	d002      	beq.n	8004234 <I2C_Master_ADDR+0x2e6>
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2b20      	cmp	r3, #32
 8004232:	d107      	bne.n	8004244 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004242:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004260:	e00b      	b.n	800427a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
}
 8004278:	e7ff      	b.n	800427a <I2C_Master_ADDR+0x32c>
 800427a:	bf00      	nop
 800427c:	3744      	adds	r7, #68	; 0x44
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d02b      	beq.n	80042f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d114      	bne.n	80042f6 <I2C_SlaveTransmit_TXE+0x72>
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b29      	cmp	r3, #41	; 0x29
 80042d0:	d111      	bne.n	80042f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2221      	movs	r2, #33	; 0x21
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2228      	movs	r2, #40	; 0x28
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff f9cf 	bl	8003694 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d011      	beq.n	8004334 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02c      	beq.n	80043b2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d114      	bne.n	80043b2 <I2C_SlaveReceive_RXNE+0x74>
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b2a      	cmp	r3, #42	; 0x2a
 800438c:	d111      	bne.n	80043b2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2222      	movs	r2, #34	; 0x22
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2228      	movs	r2, #40	; 0x28
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff f97a 	bl	80036a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004416:	2b28      	cmp	r3, #40	; 0x28
 8004418:	d127      	bne.n	800446a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004428:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	09db      	lsrs	r3, r3, #7
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	81bb      	strh	r3, [r7, #12]
 800444c:	e002      	b.n	8004454 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800445c:	89ba      	ldrh	r2, [r7, #12]
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff f928 	bl	80036b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004468:	e00e      	b.n	8004488 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ec:	d172      	bne.n	80045d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b22      	cmp	r3, #34	; 0x22
 80044f2:	d002      	beq.n	80044fa <I2C_Slave_STOPF+0x6a>
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b2a      	cmp	r3, #42	; 0x2a
 80044f8:	d135      	bne.n	8004566 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f043 0204 	orr.w	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800452c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fa64 	bl	8002a00 <HAL_DMA_GetState>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d049      	beq.n	80045d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	4a69      	ldr	r2, [pc, #420]	; (80046e8 <I2C_Slave_STOPF+0x258>)
 8004544:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe f9e0 	bl	8002910 <HAL_DMA_Abort_IT>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d03d      	beq.n	80045d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004560:	4610      	mov	r0, r2
 8004562:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004564:	e035      	b.n	80045d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004598:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fa2e 	bl	8002a00 <HAL_DMA_GetState>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d014      	beq.n	80045d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	4a4e      	ldr	r2, [pc, #312]	; (80046e8 <I2C_Slave_STOPF+0x258>)
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe f9aa 	bl	8002910 <HAL_DMA_Abort_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045cc:	4610      	mov	r0, r2
 80045ce:	4798      	blx	r3
 80045d0:	e000      	b.n	80045d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d03e      	beq.n	800465c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d112      	bne.n	8004612 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d112      	bne.n	8004646 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f043 0204 	orr.w	r2, r3, #4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8b7 	bl	80047d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800466a:	e039      	b.n	80046e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b2a      	cmp	r3, #42	; 0x2a
 8004670:	d109      	bne.n	8004686 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2228      	movs	r2, #40	; 0x28
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff f810 	bl	80036a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b28      	cmp	r3, #40	; 0x28
 8004690:	d111      	bne.n	80046b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <I2C_Slave_STOPF+0x25c>)
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff f80f 	bl	80036d2 <HAL_I2C_ListenCpltCallback>
}
 80046b4:	e014      	b.n	80046e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	2b22      	cmp	r3, #34	; 0x22
 80046bc:	d002      	beq.n	80046c4 <I2C_Slave_STOPF+0x234>
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b22      	cmp	r3, #34	; 0x22
 80046c2:	d10d      	bne.n	80046e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fe ffe3 	bl	80036a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	08004b41 	.word	0x08004b41
 80046ec:	ffff0000 	.word	0xffff0000

080046f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d002      	beq.n	8004712 <I2C_Slave_AF+0x22>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d129      	bne.n	8004766 <I2C_Slave_AF+0x76>
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b28      	cmp	r3, #40	; 0x28
 8004716:	d126      	bne.n	8004766 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <I2C_Slave_AF+0xe4>)
 800471c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800472c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004736:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe ffb7 	bl	80036d2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004764:	e031      	b.n	80047ca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b21      	cmp	r3, #33	; 0x21
 800476a:	d129      	bne.n	80047c0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <I2C_Slave_AF+0xe4>)
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2221      	movs	r2, #33	; 0x21
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004796:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe fc2a 	bl	800300c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fe ff6b 	bl	8003694 <HAL_I2C_SlaveTxCpltCallback>
}
 80047be:	e004      	b.n	80047ca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047c8:	615a      	str	r2, [r3, #20]
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	ffff0000 	.word	0xffff0000

080047d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d002      	beq.n	80047fc <I2C_ITError+0x24>
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d10a      	bne.n	8004812 <I2C_ITError+0x3a>
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b22      	cmp	r3, #34	; 0x22
 8004800:	d107      	bne.n	8004812 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004810:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004818:	2b28      	cmp	r3, #40	; 0x28
 800481a:	d107      	bne.n	800482c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2228      	movs	r2, #40	; 0x28
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800482a:	e015      	b.n	8004858 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483a:	d00a      	beq.n	8004852 <I2C_ITError+0x7a>
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b60      	cmp	r3, #96	; 0x60
 8004840:	d007      	beq.n	8004852 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004866:	d162      	bne.n	800492e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004876:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d020      	beq.n	80048c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	4a6a      	ldr	r2, [pc, #424]	; (8004a34 <I2C_ITError+0x25c>)
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe f83c 	bl	8002910 <HAL_DMA_Abort_IT>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8089 	beq.w	80049b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c2:	4610      	mov	r0, r2
 80048c4:	4798      	blx	r3
 80048c6:	e074      	b.n	80049b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	4a59      	ldr	r2, [pc, #356]	; (8004a34 <I2C_ITError+0x25c>)
 80048ce:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe f81b 	bl	8002910 <HAL_DMA_Abort_IT>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d068      	beq.n	80049b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d10b      	bne.n	8004906 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004928:	4610      	mov	r0, r2
 800492a:	4798      	blx	r3
 800492c:	e041      	b.n	80049b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b60      	cmp	r3, #96	; 0x60
 8004938:	d125      	bne.n	8004986 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d10b      	bne.n	800496e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe fecb 	bl	800371a <HAL_I2C_AbortCpltCallback>
 8004984:	e015      	b.n	80049b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d10b      	bne.n	80049ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fe feab 	bl	8003708 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10e      	bne.n	80049e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d113      	bne.n	8004a2c <I2C_ITError+0x254>
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b28      	cmp	r3, #40	; 0x28
 8004a08:	d110      	bne.n	8004a2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <I2C_ITError+0x260>)
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fe fe53 	bl	80036d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	08004b41 	.word	0x08004b41
 8004a38:	ffff0000 	.word	0xffff0000

08004a3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d006      	beq.n	8004a66 <I2C_MasterRequestWrite+0x2a>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d003      	beq.n	8004a66 <I2C_MasterRequestWrite+0x2a>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a64:	d108      	bne.n	8004a78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e00b      	b.n	8004a90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	2b12      	cmp	r3, #18
 8004a7e:	d107      	bne.n	8004a90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8f7 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab6:	d103      	bne.n	8004ac0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e035      	b.n	8004b30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004acc:	d108      	bne.n	8004ae0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004adc:	611a      	str	r2, [r3, #16]
 8004ade:	e01b      	b.n	8004b18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ae0:	897b      	ldrh	r3, [r7, #10]
 8004ae2:	11db      	asrs	r3, r3, #7
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f063 030f 	orn	r3, r3, #15
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	490e      	ldr	r1, [pc, #56]	; (8004b38 <I2C_MasterRequestWrite+0xfc>)
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f940 	bl	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e010      	b.n	8004b30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4907      	ldr	r1, [pc, #28]	; (8004b3c <I2C_MasterRequestWrite+0x100>)
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f930 	bl	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	00010008 	.word	0x00010008
 8004b3c:	00010002 	.word	0x00010002

08004b40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	; (8004c88 <I2C_DMAAbort+0x148>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <I2C_DMAAbort+0x14c>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0a1a      	lsrs	r2, r3, #8
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	00da      	lsls	r2, r3, #3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b86:	e00a      	b.n	8004b9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9c:	d0ea      	beq.n	8004b74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be0:	2200      	movs	r2, #0
 8004be2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b60      	cmp	r3, #96	; 0x60
 8004c0e:	d10e      	bne.n	8004c2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f7fe fd77 	bl	800371a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c2c:	e027      	b.n	8004c7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c34:	2b28      	cmp	r3, #40	; 0x28
 8004c36:	d117      	bne.n	8004c68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2228      	movs	r2, #40	; 0x28
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c66:	e007      	b.n	8004c78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c78:	6978      	ldr	r0, [r7, #20]
 8004c7a:	f7fe fd45 	bl	8003708 <HAL_I2C_ErrorCallback>
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000018 	.word	0x20000018
 8004c8c:	14f8b589 	.word	0x14f8b589

08004c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	e048      	b.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d044      	beq.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fd fcf5 	bl	8002698 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d139      	bne.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10d      	bne.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	43da      	mvns	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	e00c      	b.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	43da      	mvns	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d116      	bne.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e023      	b.n	8004d7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d10d      	bne.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	e00c      	b.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	43da      	mvns	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d093      	beq.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d92:	e071      	b.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da2:	d123      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e067      	b.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d041      	beq.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df4:	f7fd fc50 	bl	8002698 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d136      	bne.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10c      	bne.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e00b      	b.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	43da      	mvns	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e021      	b.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10c      	bne.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e00b      	b.n	8004eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f af6d 	bne.w	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ed0:	e034      	b.n	8004f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f8b8 	bl	8005048 <I2C_IsAcknowledgeFailed>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e034      	b.n	8004f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d028      	beq.n	8004f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fd fbd5 	bl	8002698 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11d      	bne.n	8004f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d016      	beq.n	8004f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e007      	b.n	8004f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d1c3      	bne.n	8004ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f60:	e034      	b.n	8004fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f870 	bl	8005048 <I2C_IsAcknowledgeFailed>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e034      	b.n	8004fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d028      	beq.n	8004fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fd fb8d 	bl	8002698 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11d      	bne.n	8004fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d016      	beq.n	8004fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e007      	b.n	8004fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d1c3      	bne.n	8004f62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ff0:	4b13      	ldr	r3, [pc, #76]	; (8005040 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	08db      	lsrs	r3, r3, #3
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	0a1a      	lsrs	r2, r3, #8
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b01      	subs	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e008      	b.n	8005034 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d0e9      	beq.n	8005006 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000018 	.word	0x20000018
 8005044:	14f8b589 	.word	0x14f8b589

08005048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505e:	d11b      	bne.n	8005098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0204 	orr.w	r2, r3, #4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050b4:	d103      	bne.n	80050be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050bc:	e007      	b.n	80050ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050c6:	d102      	bne.n	80050ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2208      	movs	r2, #8
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e26c      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8087 	beq.w	8005206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050f8:	4b92      	ldr	r3, [pc, #584]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b04      	cmp	r3, #4
 8005102:	d00c      	beq.n	800511e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005104:	4b8f      	ldr	r3, [pc, #572]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d112      	bne.n	8005136 <HAL_RCC_OscConfig+0x5e>
 8005110:	4b8c      	ldr	r3, [pc, #560]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d10b      	bne.n	8005136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511e:	4b89      	ldr	r3, [pc, #548]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06c      	beq.n	8005204 <HAL_RCC_OscConfig+0x12c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d168      	bne.n	8005204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e246      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513e:	d106      	bne.n	800514e <HAL_RCC_OscConfig+0x76>
 8005140:	4b80      	ldr	r3, [pc, #512]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a7f      	ldr	r2, [pc, #508]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e02e      	b.n	80051ac <HAL_RCC_OscConfig+0xd4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x98>
 8005156:	4b7b      	ldr	r3, [pc, #492]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a7a      	ldr	r2, [pc, #488]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800515c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b78      	ldr	r3, [pc, #480]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a77      	ldr	r2, [pc, #476]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e01d      	b.n	80051ac <HAL_RCC_OscConfig+0xd4>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0xbc>
 800517a:	4b72      	ldr	r3, [pc, #456]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a71      	ldr	r2, [pc, #452]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b6f      	ldr	r3, [pc, #444]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a6e      	ldr	r2, [pc, #440]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0xd4>
 8005194:	4b6b      	ldr	r3, [pc, #428]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a6a      	ldr	r2, [pc, #424]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800519a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	4b68      	ldr	r3, [pc, #416]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a67      	ldr	r2, [pc, #412]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b4:	f7fd fa70 	bl	8002698 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051bc:	f7fd fa6c 	bl	8002698 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e1fa      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	4b5d      	ldr	r3, [pc, #372]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0xe4>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd fa5c 	bl	8002698 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd fa58 	bl	8002698 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1e6      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	4b53      	ldr	r3, [pc, #332]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x10c>
 8005202:	e000      	b.n	8005206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d063      	beq.n	80052da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005212:	4b4c      	ldr	r3, [pc, #304]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800521e:	4b49      	ldr	r3, [pc, #292]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b08      	cmp	r3, #8
 8005228:	d11c      	bne.n	8005264 <HAL_RCC_OscConfig+0x18c>
 800522a:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d116      	bne.n	8005264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005236:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_RCC_OscConfig+0x176>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d001      	beq.n	800524e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e1ba      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524e:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4939      	ldr	r1, [pc, #228]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005262:	e03a      	b.n	80052da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d020      	beq.n	80052ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCC_OscConfig+0x270>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fd fa11 	bl	8002698 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527a:	f7fd fa0d 	bl	8002698 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e19b      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4927      	ldr	r1, [pc, #156]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]
 80052ac:	e015      	b.n	80052da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_RCC_OscConfig+0x270>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fd f9f0 	bl	8002698 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052bc:	f7fd f9ec 	bl	8002698 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e17a      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03a      	beq.n	800535c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d019      	beq.n	8005322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ee:	4b17      	ldr	r3, [pc, #92]	; (800534c <HAL_RCC_OscConfig+0x274>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f4:	f7fd f9d0 	bl	8002698 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fc:	f7fd f9cc 	bl	8002698 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e15a      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800531a:	2001      	movs	r0, #1
 800531c:	f000 facc 	bl	80058b8 <RCC_Delay>
 8005320:	e01c      	b.n	800535c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <HAL_RCC_OscConfig+0x274>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005328:	f7fd f9b6 	bl	8002698 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800532e:	e00f      	b.n	8005350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005330:	f7fd f9b2 	bl	8002698 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d908      	bls.n	8005350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e140      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	42420000 	.word	0x42420000
 800534c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005350:	4b9e      	ldr	r3, [pc, #632]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e9      	bne.n	8005330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80a6 	beq.w	80054b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536e:	4b97      	ldr	r3, [pc, #604]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10d      	bne.n	8005396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537a:	4b94      	ldr	r3, [pc, #592]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	4a93      	ldr	r2, [pc, #588]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	61d3      	str	r3, [r2, #28]
 8005386:	4b91      	ldr	r3, [pc, #580]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	4b8e      	ldr	r3, [pc, #568]	; (80055d0 <HAL_RCC_OscConfig+0x4f8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d118      	bne.n	80053d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a2:	4b8b      	ldr	r3, [pc, #556]	; (80055d0 <HAL_RCC_OscConfig+0x4f8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a8a      	ldr	r2, [pc, #552]	; (80055d0 <HAL_RCC_OscConfig+0x4f8>)
 80053a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ae:	f7fd f973 	bl	8002698 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b6:	f7fd f96f 	bl	8002698 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b64      	cmp	r3, #100	; 0x64
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0fd      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c8:	4b81      	ldr	r3, [pc, #516]	; (80055d0 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d106      	bne.n	80053ea <HAL_RCC_OscConfig+0x312>
 80053dc:	4b7b      	ldr	r3, [pc, #492]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4a7a      	ldr	r2, [pc, #488]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6213      	str	r3, [r2, #32]
 80053e8:	e02d      	b.n	8005446 <HAL_RCC_OscConfig+0x36e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <HAL_RCC_OscConfig+0x334>
 80053f2:	4b76      	ldr	r3, [pc, #472]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4a75      	ldr	r2, [pc, #468]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	6213      	str	r3, [r2, #32]
 80053fe:	4b73      	ldr	r3, [pc, #460]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	4a72      	ldr	r2, [pc, #456]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	6213      	str	r3, [r2, #32]
 800540a:	e01c      	b.n	8005446 <HAL_RCC_OscConfig+0x36e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b05      	cmp	r3, #5
 8005412:	d10c      	bne.n	800542e <HAL_RCC_OscConfig+0x356>
 8005414:	4b6d      	ldr	r3, [pc, #436]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4a6c      	ldr	r2, [pc, #432]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800541a:	f043 0304 	orr.w	r3, r3, #4
 800541e:	6213      	str	r3, [r2, #32]
 8005420:	4b6a      	ldr	r3, [pc, #424]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	4a69      	ldr	r2, [pc, #420]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6213      	str	r3, [r2, #32]
 800542c:	e00b      	b.n	8005446 <HAL_RCC_OscConfig+0x36e>
 800542e:	4b67      	ldr	r3, [pc, #412]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4a66      	ldr	r2, [pc, #408]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	6213      	str	r3, [r2, #32]
 800543a:	4b64      	ldr	r3, [pc, #400]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a63      	ldr	r2, [pc, #396]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005440:	f023 0304 	bic.w	r3, r3, #4
 8005444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544e:	f7fd f923 	bl	8002698 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	e00a      	b.n	800546c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005456:	f7fd f91f 	bl	8002698 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e0ab      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546c:	4b57      	ldr	r3, [pc, #348]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ee      	beq.n	8005456 <HAL_RCC_OscConfig+0x37e>
 8005478:	e014      	b.n	80054a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547a:	f7fd f90d 	bl	8002698 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fd f909 	bl	8002698 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e095      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005498:	4b4c      	ldr	r3, [pc, #304]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1ee      	bne.n	8005482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054aa:	4b48      	ldr	r3, [pc, #288]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	4a47      	ldr	r2, [pc, #284]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80054b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8081 	beq.w	80055c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c0:	4b42      	ldr	r3, [pc, #264]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d061      	beq.n	8005590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d146      	bne.n	8005562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d4:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_RCC_OscConfig+0x4fc>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fd f8dd 	bl	8002698 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fd f8d9 	bl	8002698 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e067      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f4:	4b35      	ldr	r3, [pc, #212]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f0      	bne.n	80054e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d108      	bne.n	800551c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800550a:	4b30      	ldr	r3, [pc, #192]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	492d      	ldr	r1, [pc, #180]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800551c:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a19      	ldr	r1, [r3, #32]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	430b      	orrs	r3, r1
 800552e:	4927      	ldr	r1, [pc, #156]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCC_OscConfig+0x4fc>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553a:	f7fd f8ad 	bl	8002698 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005542:	f7fd f8a9 	bl	8002698 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e037      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005554:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x46a>
 8005560:	e02f      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_OscConfig+0x4fc>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fd f896 	bl	8002698 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005570:	f7fd f892 	bl	8002698 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e020      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x498>
 800558e:	e018      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e013      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_OscConfig+0x4f4>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40007000 	.word	0x40007000
 80055d4:	42420060 	.word	0x42420060

080055d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0d0      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055ec:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d910      	bls.n	800561c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 0207 	bic.w	r2, r3, #7
 8005602:	4965      	ldr	r1, [pc, #404]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	4b63      	ldr	r3, [pc, #396]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0b8      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d020      	beq.n	800566a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005634:	4b59      	ldr	r3, [pc, #356]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a58      	ldr	r2, [pc, #352]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 800563a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800563e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800564c:	4b53      	ldr	r3, [pc, #332]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a52      	ldr	r2, [pc, #328]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	494d      	ldr	r1, [pc, #308]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005666:	4313      	orrs	r3, r2
 8005668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d040      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d107      	bne.n	800568e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567e:	4b47      	ldr	r3, [pc, #284]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d115      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e07f      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d107      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005696:	4b41      	ldr	r3, [pc, #260]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e073      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a6:	4b3d      	ldr	r3, [pc, #244]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e06b      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f023 0203 	bic.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4936      	ldr	r1, [pc, #216]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c8:	f7fc ffe6 	bl	8002698 <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d0:	f7fc ffe2 	bl	8002698 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e053      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e6:	4b2d      	ldr	r3, [pc, #180]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 020c 	and.w	r2, r3, #12
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1eb      	bne.n	80056d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d210      	bcs.n	8005728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 0207 	bic.w	r2, r3, #7
 800570e:	4922      	ldr	r1, [pc, #136]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e032      	b.n	800578e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4916      	ldr	r1, [pc, #88]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	490e      	ldr	r1, [pc, #56]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005766:	f000 f821 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 800576a:	4602      	mov	r2, r0
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	490a      	ldr	r1, [pc, #40]	; (80057a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005778:	5ccb      	ldrb	r3, [r1, r3]
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1cc>)
 8005780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <HAL_RCC_ClockConfig+0x1d0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7fc ff44 	bl	8002614 <HAL_InitTick>

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40022000 	.word	0x40022000
 800579c:	40021000 	.word	0x40021000
 80057a0:	08009230 	.word	0x08009230
 80057a4:	20000018 	.word	0x20000018
 80057a8:	2000001c 	.word	0x2000001c

080057ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_RCC_GetSysClockFreq+0x94>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d002      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x30>
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d003      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0x36>
 80057da:	e027      	b.n	800582c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_GetSysClockFreq+0x98>)
 80057de:	613b      	str	r3, [r7, #16]
      break;
 80057e0:	e027      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	0c9b      	lsrs	r3, r3, #18
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <HAL_RCC_GetSysClockFreq+0x94>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	0c5b      	lsrs	r3, r3, #17
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	4a11      	ldr	r2, [pc, #68]	; (800584c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
 8005808:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a0d      	ldr	r2, [pc, #52]	; (8005844 <HAL_RCC_GetSysClockFreq+0x98>)
 800580e:	fb02 f203 	mul.w	r2, r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e004      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	613b      	str	r3, [r7, #16]
      break;
 800582a:	e002      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCC_GetSysClockFreq+0x98>)
 800582e:	613b      	str	r3, [r7, #16]
      break;
 8005830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005832:	693b      	ldr	r3, [r7, #16]
}
 8005834:	4618      	mov	r0, r3
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	007a1200 	.word	0x007a1200
 8005848:	08009248 	.word	0x08009248
 800584c:	08009258 	.word	0x08009258
 8005850:	003d0900 	.word	0x003d0900

08005854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b02      	ldr	r3, [pc, #8]	; (8005864 <HAL_RCC_GetHCLKFreq+0x10>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	20000018 	.word	0x20000018

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800586c:	f7ff fff2 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4903      	ldr	r1, [pc, #12]	; (800588c <HAL_RCC_GetPCLK1Freq+0x24>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000
 800588c:	08009240 	.word	0x08009240

08005890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005894:	f7ff ffde 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005898:	4602      	mov	r2, r0
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	0adb      	lsrs	r3, r3, #11
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	4903      	ldr	r1, [pc, #12]	; (80058b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a6:	5ccb      	ldrb	r3, [r1, r3]
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40021000 	.word	0x40021000
 80058b4:	08009240 	.word	0x08009240

080058b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <RCC_Delay+0x34>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <RCC_Delay+0x38>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	0a5b      	lsrs	r3, r3, #9
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058d4:	bf00      	nop
  }
  while (Delay --);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1e5a      	subs	r2, r3, #1
 80058da:	60fa      	str	r2, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f9      	bne.n	80058d4 <RCC_Delay+0x1c>
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	20000018 	.word	0x20000018
 80058f0:	10624dd3 	.word	0x10624dd3

080058f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e041      	b.n	800598a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fb ff06 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f000 fa5c 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e03a      	b.n	8005a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_TIM_Base_Start_IT+0x98>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d009      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d111      	bne.n	8005a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d010      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	e007      	b.n	8005a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800

08005a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f998 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f98b 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f99a 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0204 	mvn.w	r2, #4
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f972 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f965 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f974 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0208 	mvn.w	r2, #8
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f94c 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f93f 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f94e 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0210 	mvn.w	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2208      	movs	r2, #8
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f926 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f919 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f928 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0201 	mvn.w	r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fcc4 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa7f 	bl	80060c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8f8 	bl	8005ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa52 	bl	80060b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIM_ConfigClockSource+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e0b4      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x186>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0xd4>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x172>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b70      	cmp	r3, #112	; 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xa6>
 8005c88:	2b70      	cmp	r3, #112	; 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b60      	cmp	r3, #96	; 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x11a>
 8005c90:	2b60      	cmp	r3, #96	; 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b50      	cmp	r3, #80	; 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xfa>
 8005c98:	2b50      	cmp	r3, #80	; 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x13a>
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f000 f974 	bl	8005fba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f000 f95d 	bl	8005fba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 f8d4 	bl	8005ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	; 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f92b 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 f8f2 	bl	8005f28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	; 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f91b 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 f8b4 	bl	8005ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f90b 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 f902 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
	...

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a2f      	ldr	r2, [pc, #188]	; (8005ec0 <TIM_Base_SetConfig+0xd0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_Base_SetConfig+0x30>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d007      	beq.n	8005e20 <TIM_Base_SetConfig+0x30>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a2c      	ldr	r2, [pc, #176]	; (8005ec4 <TIM_Base_SetConfig+0xd4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_Base_SetConfig+0x30>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <TIM_Base_SetConfig+0xd8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d108      	bne.n	8005e32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <TIM_Base_SetConfig+0xd0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_Base_SetConfig+0x62>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d007      	beq.n	8005e52 <TIM_Base_SetConfig+0x62>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <TIM_Base_SetConfig+0xd4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0x62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1e      	ldr	r2, [pc, #120]	; (8005ec8 <TIM_Base_SetConfig+0xd8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <TIM_Base_SetConfig+0xd0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	031b      	lsls	r3, r3, #12
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	621a      	str	r2, [r3, #32]
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f043 0307 	orr.w	r3, r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b087      	sub	sp, #28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	609a      	str	r2, [r3, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800600c:	2302      	movs	r3, #2
 800600e:	e046      	b.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d009      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10c      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800

080060b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e042      	b.n	8006170 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fb fb38 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2224      	movs	r2, #36	; 0x24
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800611a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f82b 	bl	8006178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061b2:	f023 030c 	bic.w	r3, r3, #12
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	430b      	orrs	r3, r1
 80061be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2c      	ldr	r2, [pc, #176]	; (800628c <UART_SetConfig+0x114>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061e0:	f7ff fb56 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	e002      	b.n	80061ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061e8:	f7ff fb3e 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 80061ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009a      	lsls	r2, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	4a22      	ldr	r2, [pc, #136]	; (8006290 <UART_SetConfig+0x118>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	0119      	lsls	r1, r3, #4
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009a      	lsls	r2, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	fbb2 f2f3 	udiv	r2, r2, r3
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <UART_SetConfig+0x118>)
 8006226:	fba3 0302 	umull	r0, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2064      	movs	r0, #100	; 0x64
 800622e:	fb00 f303 	mul.w	r3, r0, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	3332      	adds	r3, #50	; 0x32
 8006238:	4a15      	ldr	r2, [pc, #84]	; (8006290 <UART_SetConfig+0x118>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006244:	4419      	add	r1, r3
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009a      	lsls	r2, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	fbb2 f2f3 	udiv	r2, r2, r3
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <UART_SetConfig+0x118>)
 800625e:	fba3 0302 	umull	r0, r3, r3, r2
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	2064      	movs	r0, #100	; 0x64
 8006266:	fb00 f303 	mul.w	r3, r0, r3
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	3332      	adds	r3, #50	; 0x32
 8006270:	4a07      	ldr	r2, [pc, #28]	; (8006290 <UART_SetConfig+0x118>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	f003 020f 	and.w	r2, r3, #15
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	440a      	add	r2, r1
 8006282:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40013800 	.word	0x40013800
 8006290:	51eb851f 	.word	0x51eb851f

08006294 <__errno>:
 8006294:	4b01      	ldr	r3, [pc, #4]	; (800629c <__errno+0x8>)
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000024 	.word	0x20000024

080062a0 <__libc_init_array>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	2600      	movs	r6, #0
 80062a4:	4d0c      	ldr	r5, [pc, #48]	; (80062d8 <__libc_init_array+0x38>)
 80062a6:	4c0d      	ldr	r4, [pc, #52]	; (80062dc <__libc_init_array+0x3c>)
 80062a8:	1b64      	subs	r4, r4, r5
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	42a6      	cmp	r6, r4
 80062ae:	d109      	bne.n	80062c4 <__libc_init_array+0x24>
 80062b0:	f002 febc 	bl	800902c <_init>
 80062b4:	2600      	movs	r6, #0
 80062b6:	4d0a      	ldr	r5, [pc, #40]	; (80062e0 <__libc_init_array+0x40>)
 80062b8:	4c0a      	ldr	r4, [pc, #40]	; (80062e4 <__libc_init_array+0x44>)
 80062ba:	1b64      	subs	r4, r4, r5
 80062bc:	10a4      	asrs	r4, r4, #2
 80062be:	42a6      	cmp	r6, r4
 80062c0:	d105      	bne.n	80062ce <__libc_init_array+0x2e>
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c8:	4798      	blx	r3
 80062ca:	3601      	adds	r6, #1
 80062cc:	e7ee      	b.n	80062ac <__libc_init_array+0xc>
 80062ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d2:	4798      	blx	r3
 80062d4:	3601      	adds	r6, #1
 80062d6:	e7f2      	b.n	80062be <__libc_init_array+0x1e>
 80062d8:	0800963c 	.word	0x0800963c
 80062dc:	0800963c 	.word	0x0800963c
 80062e0:	0800963c 	.word	0x0800963c
 80062e4:	08009640 	.word	0x08009640

080062e8 <memset>:
 80062e8:	4603      	mov	r3, r0
 80062ea:	4402      	add	r2, r0
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d100      	bne.n	80062f2 <memset+0xa>
 80062f0:	4770      	bx	lr
 80062f2:	f803 1b01 	strb.w	r1, [r3], #1
 80062f6:	e7f9      	b.n	80062ec <memset+0x4>

080062f8 <__cvt>:
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fe:	461f      	mov	r7, r3
 8006300:	bfbb      	ittet	lt
 8006302:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006306:	461f      	movlt	r7, r3
 8006308:	2300      	movge	r3, #0
 800630a:	232d      	movlt	r3, #45	; 0x2d
 800630c:	b088      	sub	sp, #32
 800630e:	4614      	mov	r4, r2
 8006310:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006312:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006314:	7013      	strb	r3, [r2, #0]
 8006316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006318:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800631c:	f023 0820 	bic.w	r8, r3, #32
 8006320:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006324:	d005      	beq.n	8006332 <__cvt+0x3a>
 8006326:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800632a:	d100      	bne.n	800632e <__cvt+0x36>
 800632c:	3501      	adds	r5, #1
 800632e:	2302      	movs	r3, #2
 8006330:	e000      	b.n	8006334 <__cvt+0x3c>
 8006332:	2303      	movs	r3, #3
 8006334:	aa07      	add	r2, sp, #28
 8006336:	9204      	str	r2, [sp, #16]
 8006338:	aa06      	add	r2, sp, #24
 800633a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800633e:	e9cd 3500 	strd	r3, r5, [sp]
 8006342:	4622      	mov	r2, r4
 8006344:	463b      	mov	r3, r7
 8006346:	f000 fce7 	bl	8006d18 <_dtoa_r>
 800634a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800634e:	4606      	mov	r6, r0
 8006350:	d102      	bne.n	8006358 <__cvt+0x60>
 8006352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006354:	07db      	lsls	r3, r3, #31
 8006356:	d522      	bpl.n	800639e <__cvt+0xa6>
 8006358:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800635c:	eb06 0905 	add.w	r9, r6, r5
 8006360:	d110      	bne.n	8006384 <__cvt+0x8c>
 8006362:	7833      	ldrb	r3, [r6, #0]
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d10a      	bne.n	800637e <__cvt+0x86>
 8006368:	2200      	movs	r2, #0
 800636a:	2300      	movs	r3, #0
 800636c:	4620      	mov	r0, r4
 800636e:	4639      	mov	r1, r7
 8006370:	f7fa fb1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006374:	b918      	cbnz	r0, 800637e <__cvt+0x86>
 8006376:	f1c5 0501 	rsb	r5, r5, #1
 800637a:	f8ca 5000 	str.w	r5, [sl]
 800637e:	f8da 3000 	ldr.w	r3, [sl]
 8006382:	4499      	add	r9, r3
 8006384:	2200      	movs	r2, #0
 8006386:	2300      	movs	r3, #0
 8006388:	4620      	mov	r0, r4
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006390:	b108      	cbz	r0, 8006396 <__cvt+0x9e>
 8006392:	f8cd 901c 	str.w	r9, [sp, #28]
 8006396:	2230      	movs	r2, #48	; 0x30
 8006398:	9b07      	ldr	r3, [sp, #28]
 800639a:	454b      	cmp	r3, r9
 800639c:	d307      	bcc.n	80063ae <__cvt+0xb6>
 800639e:	4630      	mov	r0, r6
 80063a0:	9b07      	ldr	r3, [sp, #28]
 80063a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063a4:	1b9b      	subs	r3, r3, r6
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	b008      	add	sp, #32
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	1c59      	adds	r1, r3, #1
 80063b0:	9107      	str	r1, [sp, #28]
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e7f0      	b.n	8006398 <__cvt+0xa0>

080063b6 <__exponent>:
 80063b6:	4603      	mov	r3, r0
 80063b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ba:	2900      	cmp	r1, #0
 80063bc:	f803 2b02 	strb.w	r2, [r3], #2
 80063c0:	bfb6      	itet	lt
 80063c2:	222d      	movlt	r2, #45	; 0x2d
 80063c4:	222b      	movge	r2, #43	; 0x2b
 80063c6:	4249      	neglt	r1, r1
 80063c8:	2909      	cmp	r1, #9
 80063ca:	7042      	strb	r2, [r0, #1]
 80063cc:	dd2b      	ble.n	8006426 <__exponent+0x70>
 80063ce:	f10d 0407 	add.w	r4, sp, #7
 80063d2:	46a4      	mov	ip, r4
 80063d4:	270a      	movs	r7, #10
 80063d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063da:	460a      	mov	r2, r1
 80063dc:	46a6      	mov	lr, r4
 80063de:	fb07 1516 	mls	r5, r7, r6, r1
 80063e2:	2a63      	cmp	r2, #99	; 0x63
 80063e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80063e8:	4631      	mov	r1, r6
 80063ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80063ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063f2:	dcf0      	bgt.n	80063d6 <__exponent+0x20>
 80063f4:	3130      	adds	r1, #48	; 0x30
 80063f6:	f1ae 0502 	sub.w	r5, lr, #2
 80063fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063fe:	4629      	mov	r1, r5
 8006400:	1c44      	adds	r4, r0, #1
 8006402:	4561      	cmp	r1, ip
 8006404:	d30a      	bcc.n	800641c <__exponent+0x66>
 8006406:	f10d 0209 	add.w	r2, sp, #9
 800640a:	eba2 020e 	sub.w	r2, r2, lr
 800640e:	4565      	cmp	r5, ip
 8006410:	bf88      	it	hi
 8006412:	2200      	movhi	r2, #0
 8006414:	4413      	add	r3, r2
 8006416:	1a18      	subs	r0, r3, r0
 8006418:	b003      	add	sp, #12
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800641c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006420:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006424:	e7ed      	b.n	8006402 <__exponent+0x4c>
 8006426:	2330      	movs	r3, #48	; 0x30
 8006428:	3130      	adds	r1, #48	; 0x30
 800642a:	7083      	strb	r3, [r0, #2]
 800642c:	70c1      	strb	r1, [r0, #3]
 800642e:	1d03      	adds	r3, r0, #4
 8006430:	e7f1      	b.n	8006416 <__exponent+0x60>
	...

08006434 <_printf_float>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	b091      	sub	sp, #68	; 0x44
 800643a:	460c      	mov	r4, r1
 800643c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006440:	4616      	mov	r6, r2
 8006442:	461f      	mov	r7, r3
 8006444:	4605      	mov	r5, r0
 8006446:	f001 fa55 	bl	80078f4 <_localeconv_r>
 800644a:	6803      	ldr	r3, [r0, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	9309      	str	r3, [sp, #36]	; 0x24
 8006450:	f7f9 fe7e 	bl	8000150 <strlen>
 8006454:	2300      	movs	r3, #0
 8006456:	930e      	str	r3, [sp, #56]	; 0x38
 8006458:	f8d8 3000 	ldr.w	r3, [r8]
 800645c:	900a      	str	r0, [sp, #40]	; 0x28
 800645e:	3307      	adds	r3, #7
 8006460:	f023 0307 	bic.w	r3, r3, #7
 8006464:	f103 0208 	add.w	r2, r3, #8
 8006468:	f894 9018 	ldrb.w	r9, [r4, #24]
 800646c:	f8d4 b000 	ldr.w	fp, [r4]
 8006470:	f8c8 2000 	str.w	r2, [r8]
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800647c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006480:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006484:	930b      	str	r3, [sp, #44]	; 0x2c
 8006486:	f04f 32ff 	mov.w	r2, #4294967295
 800648a:	4640      	mov	r0, r8
 800648c:	4b9c      	ldr	r3, [pc, #624]	; (8006700 <_printf_float+0x2cc>)
 800648e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006490:	f7fa fabc 	bl	8000a0c <__aeabi_dcmpun>
 8006494:	bb70      	cbnz	r0, 80064f4 <_printf_float+0xc0>
 8006496:	f04f 32ff 	mov.w	r2, #4294967295
 800649a:	4640      	mov	r0, r8
 800649c:	4b98      	ldr	r3, [pc, #608]	; (8006700 <_printf_float+0x2cc>)
 800649e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064a0:	f7fa fa96 	bl	80009d0 <__aeabi_dcmple>
 80064a4:	bb30      	cbnz	r0, 80064f4 <_printf_float+0xc0>
 80064a6:	2200      	movs	r2, #0
 80064a8:	2300      	movs	r3, #0
 80064aa:	4640      	mov	r0, r8
 80064ac:	4651      	mov	r1, sl
 80064ae:	f7fa fa85 	bl	80009bc <__aeabi_dcmplt>
 80064b2:	b110      	cbz	r0, 80064ba <_printf_float+0x86>
 80064b4:	232d      	movs	r3, #45	; 0x2d
 80064b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ba:	4b92      	ldr	r3, [pc, #584]	; (8006704 <_printf_float+0x2d0>)
 80064bc:	4892      	ldr	r0, [pc, #584]	; (8006708 <_printf_float+0x2d4>)
 80064be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80064c2:	bf94      	ite	ls
 80064c4:	4698      	movls	r8, r3
 80064c6:	4680      	movhi	r8, r0
 80064c8:	2303      	movs	r3, #3
 80064ca:	f04f 0a00 	mov.w	sl, #0
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	f02b 0304 	bic.w	r3, fp, #4
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	4633      	mov	r3, r6
 80064d8:	4621      	mov	r1, r4
 80064da:	4628      	mov	r0, r5
 80064dc:	9700      	str	r7, [sp, #0]
 80064de:	aa0f      	add	r2, sp, #60	; 0x3c
 80064e0:	f000 f9d4 	bl	800688c <_printf_common>
 80064e4:	3001      	adds	r0, #1
 80064e6:	f040 8090 	bne.w	800660a <_printf_float+0x1d6>
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	b011      	add	sp, #68	; 0x44
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	4642      	mov	r2, r8
 80064f6:	4653      	mov	r3, sl
 80064f8:	4640      	mov	r0, r8
 80064fa:	4651      	mov	r1, sl
 80064fc:	f7fa fa86 	bl	8000a0c <__aeabi_dcmpun>
 8006500:	b148      	cbz	r0, 8006516 <_printf_float+0xe2>
 8006502:	f1ba 0f00 	cmp.w	sl, #0
 8006506:	bfb8      	it	lt
 8006508:	232d      	movlt	r3, #45	; 0x2d
 800650a:	4880      	ldr	r0, [pc, #512]	; (800670c <_printf_float+0x2d8>)
 800650c:	bfb8      	it	lt
 800650e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006512:	4b7f      	ldr	r3, [pc, #508]	; (8006710 <_printf_float+0x2dc>)
 8006514:	e7d3      	b.n	80064be <_printf_float+0x8a>
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	d142      	bne.n	80065a6 <_printf_float+0x172>
 8006520:	2306      	movs	r3, #6
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	9206      	str	r2, [sp, #24]
 8006528:	aa0e      	add	r2, sp, #56	; 0x38
 800652a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800652e:	aa0d      	add	r2, sp, #52	; 0x34
 8006530:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006534:	9203      	str	r2, [sp, #12]
 8006536:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800653a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	4642      	mov	r2, r8
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	4628      	mov	r0, r5
 8006548:	4653      	mov	r3, sl
 800654a:	910b      	str	r1, [sp, #44]	; 0x2c
 800654c:	f7ff fed4 	bl	80062f8 <__cvt>
 8006550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006552:	4680      	mov	r8, r0
 8006554:	2947      	cmp	r1, #71	; 0x47
 8006556:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006558:	d108      	bne.n	800656c <_printf_float+0x138>
 800655a:	1cc8      	adds	r0, r1, #3
 800655c:	db02      	blt.n	8006564 <_printf_float+0x130>
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	4299      	cmp	r1, r3
 8006562:	dd40      	ble.n	80065e6 <_printf_float+0x1b2>
 8006564:	f1a9 0902 	sub.w	r9, r9, #2
 8006568:	fa5f f989 	uxtb.w	r9, r9
 800656c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006570:	d81f      	bhi.n	80065b2 <_printf_float+0x17e>
 8006572:	464a      	mov	r2, r9
 8006574:	3901      	subs	r1, #1
 8006576:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800657a:	910d      	str	r1, [sp, #52]	; 0x34
 800657c:	f7ff ff1b 	bl	80063b6 <__exponent>
 8006580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006582:	4682      	mov	sl, r0
 8006584:	1813      	adds	r3, r2, r0
 8006586:	2a01      	cmp	r2, #1
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	dc02      	bgt.n	8006592 <_printf_float+0x15e>
 800658c:	6822      	ldr	r2, [r4, #0]
 800658e:	07d2      	lsls	r2, r2, #31
 8006590:	d501      	bpl.n	8006596 <_printf_float+0x162>
 8006592:	3301      	adds	r3, #1
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800659a:	2b00      	cmp	r3, #0
 800659c:	d09b      	beq.n	80064d6 <_printf_float+0xa2>
 800659e:	232d      	movs	r3, #45	; 0x2d
 80065a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a4:	e797      	b.n	80064d6 <_printf_float+0xa2>
 80065a6:	2947      	cmp	r1, #71	; 0x47
 80065a8:	d1bc      	bne.n	8006524 <_printf_float+0xf0>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1ba      	bne.n	8006524 <_printf_float+0xf0>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e7b7      	b.n	8006522 <_printf_float+0xee>
 80065b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80065b6:	d118      	bne.n	80065ea <_printf_float+0x1b6>
 80065b8:	2900      	cmp	r1, #0
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	dd0b      	ble.n	80065d6 <_printf_float+0x1a2>
 80065be:	6121      	str	r1, [r4, #16]
 80065c0:	b913      	cbnz	r3, 80065c8 <_printf_float+0x194>
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	07d0      	lsls	r0, r2, #31
 80065c6:	d502      	bpl.n	80065ce <_printf_float+0x19a>
 80065c8:	3301      	adds	r3, #1
 80065ca:	440b      	add	r3, r1
 80065cc:	6123      	str	r3, [r4, #16]
 80065ce:	f04f 0a00 	mov.w	sl, #0
 80065d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065d4:	e7df      	b.n	8006596 <_printf_float+0x162>
 80065d6:	b913      	cbnz	r3, 80065de <_printf_float+0x1aa>
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	07d2      	lsls	r2, r2, #31
 80065dc:	d501      	bpl.n	80065e2 <_printf_float+0x1ae>
 80065de:	3302      	adds	r3, #2
 80065e0:	e7f4      	b.n	80065cc <_printf_float+0x198>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e7f2      	b.n	80065cc <_printf_float+0x198>
 80065e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80065ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ec:	4299      	cmp	r1, r3
 80065ee:	db05      	blt.n	80065fc <_printf_float+0x1c8>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	6121      	str	r1, [r4, #16]
 80065f4:	07d8      	lsls	r0, r3, #31
 80065f6:	d5ea      	bpl.n	80065ce <_printf_float+0x19a>
 80065f8:	1c4b      	adds	r3, r1, #1
 80065fa:	e7e7      	b.n	80065cc <_printf_float+0x198>
 80065fc:	2900      	cmp	r1, #0
 80065fe:	bfcc      	ite	gt
 8006600:	2201      	movgt	r2, #1
 8006602:	f1c1 0202 	rsble	r2, r1, #2
 8006606:	4413      	add	r3, r2
 8006608:	e7e0      	b.n	80065cc <_printf_float+0x198>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	055a      	lsls	r2, r3, #21
 800660e:	d407      	bmi.n	8006620 <_printf_float+0x1ec>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	4642      	mov	r2, r8
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	d12b      	bne.n	8006676 <_printf_float+0x242>
 800661e:	e764      	b.n	80064ea <_printf_float+0xb6>
 8006620:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006624:	f240 80dd 	bls.w	80067e2 <_printf_float+0x3ae>
 8006628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	f7fa f9ba 	bl	80009a8 <__aeabi_dcmpeq>
 8006634:	2800      	cmp	r0, #0
 8006636:	d033      	beq.n	80066a0 <_printf_float+0x26c>
 8006638:	2301      	movs	r3, #1
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	4a35      	ldr	r2, [pc, #212]	; (8006714 <_printf_float+0x2e0>)
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f af51 	beq.w	80064ea <_printf_float+0xb6>
 8006648:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800664c:	429a      	cmp	r2, r3
 800664e:	db02      	blt.n	8006656 <_printf_float+0x222>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07d8      	lsls	r0, r3, #31
 8006654:	d50f      	bpl.n	8006676 <_printf_float+0x242>
 8006656:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	f43f af42 	beq.w	80064ea <_printf_float+0xb6>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	f104 091a 	add.w	r9, r4, #26
 800666e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006670:	3b01      	subs	r3, #1
 8006672:	4543      	cmp	r3, r8
 8006674:	dc09      	bgt.n	800668a <_printf_float+0x256>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	079b      	lsls	r3, r3, #30
 800667a:	f100 8102 	bmi.w	8006882 <_printf_float+0x44e>
 800667e:	68e0      	ldr	r0, [r4, #12]
 8006680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006682:	4298      	cmp	r0, r3
 8006684:	bfb8      	it	lt
 8006686:	4618      	movlt	r0, r3
 8006688:	e731      	b.n	80064ee <_printf_float+0xba>
 800668a:	2301      	movs	r3, #1
 800668c:	464a      	mov	r2, r9
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f af28 	beq.w	80064ea <_printf_float+0xb6>
 800669a:	f108 0801 	add.w	r8, r8, #1
 800669e:	e7e6      	b.n	800666e <_printf_float+0x23a>
 80066a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dc38      	bgt.n	8006718 <_printf_float+0x2e4>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <_printf_float+0x2e0>)
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	f43f af1a 	beq.w	80064ea <_printf_float+0xb6>
 80066b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d102      	bne.n	80066c4 <_printf_float+0x290>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	07d9      	lsls	r1, r3, #31
 80066c2:	d5d8      	bpl.n	8006676 <_printf_float+0x242>
 80066c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f af0b 	beq.w	80064ea <_printf_float+0xb6>
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	f104 0a1a 	add.w	sl, r4, #26
 80066dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066de:	425b      	negs	r3, r3
 80066e0:	454b      	cmp	r3, r9
 80066e2:	dc01      	bgt.n	80066e8 <_printf_float+0x2b4>
 80066e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e6:	e794      	b.n	8006612 <_printf_float+0x1de>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4652      	mov	r2, sl
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f aef9 	beq.w	80064ea <_printf_float+0xb6>
 80066f8:	f109 0901 	add.w	r9, r9, #1
 80066fc:	e7ee      	b.n	80066dc <_printf_float+0x2a8>
 80066fe:	bf00      	nop
 8006700:	7fefffff 	.word	0x7fefffff
 8006704:	08009260 	.word	0x08009260
 8006708:	08009264 	.word	0x08009264
 800670c:	0800926c 	.word	0x0800926c
 8006710:	08009268 	.word	0x08009268
 8006714:	08009270 	.word	0x08009270
 8006718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800671a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800671c:	429a      	cmp	r2, r3
 800671e:	bfa8      	it	ge
 8006720:	461a      	movge	r2, r3
 8006722:	2a00      	cmp	r2, #0
 8006724:	4691      	mov	r9, r2
 8006726:	dc37      	bgt.n	8006798 <_printf_float+0x364>
 8006728:	f04f 0b00 	mov.w	fp, #0
 800672c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006730:	f104 021a 	add.w	r2, r4, #26
 8006734:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006738:	ebaa 0309 	sub.w	r3, sl, r9
 800673c:	455b      	cmp	r3, fp
 800673e:	dc33      	bgt.n	80067a8 <_printf_float+0x374>
 8006740:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006744:	429a      	cmp	r2, r3
 8006746:	db3b      	blt.n	80067c0 <_printf_float+0x38c>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	07da      	lsls	r2, r3, #31
 800674c:	d438      	bmi.n	80067c0 <_printf_float+0x38c>
 800674e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006750:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006752:	eba2 030a 	sub.w	r3, r2, sl
 8006756:	eba2 0901 	sub.w	r9, r2, r1
 800675a:	4599      	cmp	r9, r3
 800675c:	bfa8      	it	ge
 800675e:	4699      	movge	r9, r3
 8006760:	f1b9 0f00 	cmp.w	r9, #0
 8006764:	dc34      	bgt.n	80067d0 <_printf_float+0x39c>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800676e:	f104 0a1a 	add.w	sl, r4, #26
 8006772:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	eba3 0309 	sub.w	r3, r3, r9
 800677c:	4543      	cmp	r3, r8
 800677e:	f77f af7a 	ble.w	8006676 <_printf_float+0x242>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f aeac 	beq.w	80064ea <_printf_float+0xb6>
 8006792:	f108 0801 	add.w	r8, r8, #1
 8006796:	e7ec      	b.n	8006772 <_printf_float+0x33e>
 8006798:	4613      	mov	r3, r2
 800679a:	4631      	mov	r1, r6
 800679c:	4642      	mov	r2, r8
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	d1c0      	bne.n	8006728 <_printf_float+0x2f4>
 80067a6:	e6a0      	b.n	80064ea <_printf_float+0xb6>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f ae99 	beq.w	80064ea <_printf_float+0xb6>
 80067b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ba:	f10b 0b01 	add.w	fp, fp, #1
 80067be:	e7b9      	b.n	8006734 <_printf_float+0x300>
 80067c0:	4631      	mov	r1, r6
 80067c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	d1bf      	bne.n	800674e <_printf_float+0x31a>
 80067ce:	e68c      	b.n	80064ea <_printf_float+0xb6>
 80067d0:	464b      	mov	r3, r9
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	eb08 020a 	add.w	r2, r8, sl
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	d1c2      	bne.n	8006766 <_printf_float+0x332>
 80067e0:	e683      	b.n	80064ea <_printf_float+0xb6>
 80067e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	dc01      	bgt.n	80067ec <_printf_float+0x3b8>
 80067e8:	07db      	lsls	r3, r3, #31
 80067ea:	d537      	bpl.n	800685c <_printf_float+0x428>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4642      	mov	r2, r8
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f ae77 	beq.w	80064ea <_printf_float+0xb6>
 80067fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	f43f ae6f 	beq.w	80064ea <_printf_float+0xb6>
 800680c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	f7fa f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8006818:	b9d8      	cbnz	r0, 8006852 <_printf_float+0x41e>
 800681a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800681c:	f108 0201 	add.w	r2, r8, #1
 8006820:	3b01      	subs	r3, #1
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	d10e      	bne.n	800684a <_printf_float+0x416>
 800682c:	e65d      	b.n	80064ea <_printf_float+0xb6>
 800682e:	2301      	movs	r3, #1
 8006830:	464a      	mov	r2, r9
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f ae56 	beq.w	80064ea <_printf_float+0xb6>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006844:	3b01      	subs	r3, #1
 8006846:	4543      	cmp	r3, r8
 8006848:	dcf1      	bgt.n	800682e <_printf_float+0x3fa>
 800684a:	4653      	mov	r3, sl
 800684c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006850:	e6e0      	b.n	8006614 <_printf_float+0x1e0>
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	f104 091a 	add.w	r9, r4, #26
 800685a:	e7f2      	b.n	8006842 <_printf_float+0x40e>
 800685c:	2301      	movs	r3, #1
 800685e:	4642      	mov	r2, r8
 8006860:	e7df      	b.n	8006822 <_printf_float+0x3ee>
 8006862:	2301      	movs	r3, #1
 8006864:	464a      	mov	r2, r9
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f ae3c 	beq.w	80064ea <_printf_float+0xb6>
 8006872:	f108 0801 	add.w	r8, r8, #1
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800687a:	1a5b      	subs	r3, r3, r1
 800687c:	4543      	cmp	r3, r8
 800687e:	dcf0      	bgt.n	8006862 <_printf_float+0x42e>
 8006880:	e6fd      	b.n	800667e <_printf_float+0x24a>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	f104 0919 	add.w	r9, r4, #25
 800688a:	e7f4      	b.n	8006876 <_printf_float+0x442>

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4616      	mov	r6, r2
 8006892:	4699      	mov	r9, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	4607      	mov	r7, r0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfb8      	it	lt
 800689e:	4613      	movlt	r3, r2
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068a6:	460c      	mov	r4, r1
 80068a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ac:	b10a      	cbz	r2, 80068b2 <_printf_common+0x26>
 80068ae:	3301      	adds	r3, #1
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	0699      	lsls	r1, r3, #26
 80068b6:	bf42      	ittt	mi
 80068b8:	6833      	ldrmi	r3, [r6, #0]
 80068ba:	3302      	addmi	r3, #2
 80068bc:	6033      	strmi	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	f015 0506 	ands.w	r5, r5, #6
 80068c4:	d106      	bne.n	80068d4 <_printf_common+0x48>
 80068c6:	f104 0a19 	add.w	sl, r4, #25
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc28      	bgt.n	8006926 <_printf_common+0x9a>
 80068d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068d8:	1e13      	subs	r3, r2, #0
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	bf18      	it	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d42d      	bmi.n	8006940 <_printf_common+0xb4>
 80068e4:	4649      	mov	r1, r9
 80068e6:	4638      	mov	r0, r7
 80068e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ec:	47c0      	blx	r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d020      	beq.n	8006934 <_printf_common+0xa8>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	68e5      	ldr	r5, [r4, #12]
 80068f6:	f003 0306 	and.w	r3, r3, #6
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	bf18      	it	ne
 80068fe:	2500      	movne	r5, #0
 8006900:	6832      	ldr	r2, [r6, #0]
 8006902:	f04f 0600 	mov.w	r6, #0
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	bf08      	it	eq
 800690a:	1aad      	subeq	r5, r5, r2
 800690c:	6922      	ldr	r2, [r4, #16]
 800690e:	bf08      	it	eq
 8006910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006914:	4293      	cmp	r3, r2
 8006916:	bfc4      	itt	gt
 8006918:	1a9b      	subgt	r3, r3, r2
 800691a:	18ed      	addgt	r5, r5, r3
 800691c:	341a      	adds	r4, #26
 800691e:	42b5      	cmp	r5, r6
 8006920:	d11a      	bne.n	8006958 <_printf_common+0xcc>
 8006922:	2000      	movs	r0, #0
 8006924:	e008      	b.n	8006938 <_printf_common+0xac>
 8006926:	2301      	movs	r3, #1
 8006928:	4652      	mov	r2, sl
 800692a:	4649      	mov	r1, r9
 800692c:	4638      	mov	r0, r7
 800692e:	47c0      	blx	r8
 8006930:	3001      	adds	r0, #1
 8006932:	d103      	bne.n	800693c <_printf_common+0xb0>
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693c:	3501      	adds	r5, #1
 800693e:	e7c4      	b.n	80068ca <_printf_common+0x3e>
 8006940:	2030      	movs	r0, #48	; 0x30
 8006942:	18e1      	adds	r1, r4, r3
 8006944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800694e:	4422      	add	r2, r4
 8006950:	3302      	adds	r3, #2
 8006952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006956:	e7c5      	b.n	80068e4 <_printf_common+0x58>
 8006958:	2301      	movs	r3, #1
 800695a:	4622      	mov	r2, r4
 800695c:	4649      	mov	r1, r9
 800695e:	4638      	mov	r0, r7
 8006960:	47c0      	blx	r8
 8006962:	3001      	adds	r0, #1
 8006964:	d0e6      	beq.n	8006934 <_printf_common+0xa8>
 8006966:	3601      	adds	r6, #1
 8006968:	e7d9      	b.n	800691e <_printf_common+0x92>
	...

0800696c <_printf_i>:
 800696c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	460c      	mov	r4, r1
 8006972:	7e27      	ldrb	r7, [r4, #24]
 8006974:	4691      	mov	r9, r2
 8006976:	2f78      	cmp	r7, #120	; 0x78
 8006978:	4680      	mov	r8, r0
 800697a:	469a      	mov	sl, r3
 800697c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800697e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006982:	d807      	bhi.n	8006994 <_printf_i+0x28>
 8006984:	2f62      	cmp	r7, #98	; 0x62
 8006986:	d80a      	bhi.n	800699e <_printf_i+0x32>
 8006988:	2f00      	cmp	r7, #0
 800698a:	f000 80d9 	beq.w	8006b40 <_printf_i+0x1d4>
 800698e:	2f58      	cmp	r7, #88	; 0x58
 8006990:	f000 80a4 	beq.w	8006adc <_printf_i+0x170>
 8006994:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800699c:	e03a      	b.n	8006a14 <_printf_i+0xa8>
 800699e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069a2:	2b15      	cmp	r3, #21
 80069a4:	d8f6      	bhi.n	8006994 <_printf_i+0x28>
 80069a6:	a001      	add	r0, pc, #4	; (adr r0, 80069ac <_printf_i+0x40>)
 80069a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006995 	.word	0x08006995
 80069b8:	08006995 	.word	0x08006995
 80069bc:	08006995 	.word	0x08006995
 80069c0:	08006995 	.word	0x08006995
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006995 	.word	0x08006995
 80069cc:	08006995 	.word	0x08006995
 80069d0:	08006995 	.word	0x08006995
 80069d4:	08006995 	.word	0x08006995
 80069d8:	08006b27 	.word	0x08006b27
 80069dc:	08006a49 	.word	0x08006a49
 80069e0:	08006b09 	.word	0x08006b09
 80069e4:	08006995 	.word	0x08006995
 80069e8:	08006995 	.word	0x08006995
 80069ec:	08006b49 	.word	0x08006b49
 80069f0:	08006995 	.word	0x08006995
 80069f4:	08006a49 	.word	0x08006a49
 80069f8:	08006995 	.word	0x08006995
 80069fc:	08006995 	.word	0x08006995
 8006a00:	08006b11 	.word	0x08006b11
 8006a04:	680b      	ldr	r3, [r1, #0]
 8006a06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	600a      	str	r2, [r1, #0]
 8006a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0a4      	b.n	8006b62 <_printf_i+0x1f6>
 8006a18:	6825      	ldr	r5, [r4, #0]
 8006a1a:	6808      	ldr	r0, [r1, #0]
 8006a1c:	062e      	lsls	r6, r5, #24
 8006a1e:	f100 0304 	add.w	r3, r0, #4
 8006a22:	d50a      	bpl.n	8006a3a <_printf_i+0xce>
 8006a24:	6805      	ldr	r5, [r0, #0]
 8006a26:	600b      	str	r3, [r1, #0]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	da03      	bge.n	8006a34 <_printf_i+0xc8>
 8006a2c:	232d      	movs	r3, #45	; 0x2d
 8006a2e:	426d      	negs	r5, r5
 8006a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a34:	230a      	movs	r3, #10
 8006a36:	485e      	ldr	r0, [pc, #376]	; (8006bb0 <_printf_i+0x244>)
 8006a38:	e019      	b.n	8006a6e <_printf_i+0x102>
 8006a3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a3e:	6805      	ldr	r5, [r0, #0]
 8006a40:	600b      	str	r3, [r1, #0]
 8006a42:	bf18      	it	ne
 8006a44:	b22d      	sxthne	r5, r5
 8006a46:	e7ef      	b.n	8006a28 <_printf_i+0xbc>
 8006a48:	680b      	ldr	r3, [r1, #0]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	1d18      	adds	r0, r3, #4
 8006a4e:	6008      	str	r0, [r1, #0]
 8006a50:	0628      	lsls	r0, r5, #24
 8006a52:	d501      	bpl.n	8006a58 <_printf_i+0xec>
 8006a54:	681d      	ldr	r5, [r3, #0]
 8006a56:	e002      	b.n	8006a5e <_printf_i+0xf2>
 8006a58:	0669      	lsls	r1, r5, #25
 8006a5a:	d5fb      	bpl.n	8006a54 <_printf_i+0xe8>
 8006a5c:	881d      	ldrh	r5, [r3, #0]
 8006a5e:	2f6f      	cmp	r7, #111	; 0x6f
 8006a60:	bf0c      	ite	eq
 8006a62:	2308      	moveq	r3, #8
 8006a64:	230a      	movne	r3, #10
 8006a66:	4852      	ldr	r0, [pc, #328]	; (8006bb0 <_printf_i+0x244>)
 8006a68:	2100      	movs	r1, #0
 8006a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a6e:	6866      	ldr	r6, [r4, #4]
 8006a70:	2e00      	cmp	r6, #0
 8006a72:	bfa8      	it	ge
 8006a74:	6821      	ldrge	r1, [r4, #0]
 8006a76:	60a6      	str	r6, [r4, #8]
 8006a78:	bfa4      	itt	ge
 8006a7a:	f021 0104 	bicge.w	r1, r1, #4
 8006a7e:	6021      	strge	r1, [r4, #0]
 8006a80:	b90d      	cbnz	r5, 8006a86 <_printf_i+0x11a>
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d04d      	beq.n	8006b22 <_printf_i+0x1b6>
 8006a86:	4616      	mov	r6, r2
 8006a88:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a8c:	fb03 5711 	mls	r7, r3, r1, r5
 8006a90:	5dc7      	ldrb	r7, [r0, r7]
 8006a92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a96:	462f      	mov	r7, r5
 8006a98:	42bb      	cmp	r3, r7
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	d9f4      	bls.n	8006a88 <_printf_i+0x11c>
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d10b      	bne.n	8006aba <_printf_i+0x14e>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	07df      	lsls	r7, r3, #31
 8006aa6:	d508      	bpl.n	8006aba <_printf_i+0x14e>
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	6861      	ldr	r1, [r4, #4]
 8006aac:	4299      	cmp	r1, r3
 8006aae:	bfde      	ittt	le
 8006ab0:	2330      	movle	r3, #48	; 0x30
 8006ab2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ab6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aba:	1b92      	subs	r2, r2, r6
 8006abc:	6122      	str	r2, [r4, #16]
 8006abe:	464b      	mov	r3, r9
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f8cd a000 	str.w	sl, [sp]
 8006ac8:	aa03      	add	r2, sp, #12
 8006aca:	f7ff fedf 	bl	800688c <_printf_common>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d14c      	bne.n	8006b6c <_printf_i+0x200>
 8006ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad6:	b004      	add	sp, #16
 8006ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006adc:	4834      	ldr	r0, [pc, #208]	; (8006bb0 <_printf_i+0x244>)
 8006ade:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ae2:	680e      	ldr	r6, [r1, #0]
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006aea:	061f      	lsls	r7, r3, #24
 8006aec:	600e      	str	r6, [r1, #0]
 8006aee:	d514      	bpl.n	8006b1a <_printf_i+0x1ae>
 8006af0:	07d9      	lsls	r1, r3, #31
 8006af2:	bf44      	itt	mi
 8006af4:	f043 0320 	orrmi.w	r3, r3, #32
 8006af8:	6023      	strmi	r3, [r4, #0]
 8006afa:	b91d      	cbnz	r5, 8006b04 <_printf_i+0x198>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	2310      	movs	r3, #16
 8006b06:	e7af      	b.n	8006a68 <_printf_i+0xfc>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	f043 0320 	orr.w	r3, r3, #32
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	2378      	movs	r3, #120	; 0x78
 8006b12:	4828      	ldr	r0, [pc, #160]	; (8006bb4 <_printf_i+0x248>)
 8006b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b18:	e7e3      	b.n	8006ae2 <_printf_i+0x176>
 8006b1a:	065e      	lsls	r6, r3, #25
 8006b1c:	bf48      	it	mi
 8006b1e:	b2ad      	uxthmi	r5, r5
 8006b20:	e7e6      	b.n	8006af0 <_printf_i+0x184>
 8006b22:	4616      	mov	r6, r2
 8006b24:	e7bb      	b.n	8006a9e <_printf_i+0x132>
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	6826      	ldr	r6, [r4, #0]
 8006b2a:	1d1d      	adds	r5, r3, #4
 8006b2c:	6960      	ldr	r0, [r4, #20]
 8006b2e:	600d      	str	r5, [r1, #0]
 8006b30:	0635      	lsls	r5, r6, #24
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	d501      	bpl.n	8006b3a <_printf_i+0x1ce>
 8006b36:	6018      	str	r0, [r3, #0]
 8006b38:	e002      	b.n	8006b40 <_printf_i+0x1d4>
 8006b3a:	0671      	lsls	r1, r6, #25
 8006b3c:	d5fb      	bpl.n	8006b36 <_printf_i+0x1ca>
 8006b3e:	8018      	strh	r0, [r3, #0]
 8006b40:	2300      	movs	r3, #0
 8006b42:	4616      	mov	r6, r2
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	e7ba      	b.n	8006abe <_printf_i+0x152>
 8006b48:	680b      	ldr	r3, [r1, #0]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	600a      	str	r2, [r1, #0]
 8006b4e:	681e      	ldr	r6, [r3, #0]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4630      	mov	r0, r6
 8006b54:	6862      	ldr	r2, [r4, #4]
 8006b56:	f000 fed9 	bl	800790c <memchr>
 8006b5a:	b108      	cbz	r0, 8006b60 <_printf_i+0x1f4>
 8006b5c:	1b80      	subs	r0, r0, r6
 8006b5e:	6060      	str	r0, [r4, #4]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	2300      	movs	r3, #0
 8006b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6a:	e7a8      	b.n	8006abe <_printf_i+0x152>
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	47d0      	blx	sl
 8006b76:	3001      	adds	r0, #1
 8006b78:	d0ab      	beq.n	8006ad2 <_printf_i+0x166>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	079b      	lsls	r3, r3, #30
 8006b7e:	d413      	bmi.n	8006ba8 <_printf_i+0x23c>
 8006b80:	68e0      	ldr	r0, [r4, #12]
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	4298      	cmp	r0, r3
 8006b86:	bfb8      	it	lt
 8006b88:	4618      	movlt	r0, r3
 8006b8a:	e7a4      	b.n	8006ad6 <_printf_i+0x16a>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4632      	mov	r2, r6
 8006b90:	4649      	mov	r1, r9
 8006b92:	4640      	mov	r0, r8
 8006b94:	47d0      	blx	sl
 8006b96:	3001      	adds	r0, #1
 8006b98:	d09b      	beq.n	8006ad2 <_printf_i+0x166>
 8006b9a:	3501      	adds	r5, #1
 8006b9c:	68e3      	ldr	r3, [r4, #12]
 8006b9e:	9903      	ldr	r1, [sp, #12]
 8006ba0:	1a5b      	subs	r3, r3, r1
 8006ba2:	42ab      	cmp	r3, r5
 8006ba4:	dcf2      	bgt.n	8006b8c <_printf_i+0x220>
 8006ba6:	e7eb      	b.n	8006b80 <_printf_i+0x214>
 8006ba8:	2500      	movs	r5, #0
 8006baa:	f104 0619 	add.w	r6, r4, #25
 8006bae:	e7f5      	b.n	8006b9c <_printf_i+0x230>
 8006bb0:	08009272 	.word	0x08009272
 8006bb4:	08009283 	.word	0x08009283

08006bb8 <siprintf>:
 8006bb8:	b40e      	push	{r1, r2, r3}
 8006bba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bbe:	b500      	push	{lr}
 8006bc0:	b09c      	sub	sp, #112	; 0x70
 8006bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8006bc4:	9002      	str	r0, [sp, #8]
 8006bc6:	9006      	str	r0, [sp, #24]
 8006bc8:	9107      	str	r1, [sp, #28]
 8006bca:	9104      	str	r1, [sp, #16]
 8006bcc:	4808      	ldr	r0, [pc, #32]	; (8006bf0 <siprintf+0x38>)
 8006bce:	4909      	ldr	r1, [pc, #36]	; (8006bf4 <siprintf+0x3c>)
 8006bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd4:	9105      	str	r1, [sp, #20]
 8006bd6:	6800      	ldr	r0, [r0, #0]
 8006bd8:	a902      	add	r1, sp, #8
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	f001 fb44 	bl	8008268 <_svfiprintf_r>
 8006be0:	2200      	movs	r2, #0
 8006be2:	9b02      	ldr	r3, [sp, #8]
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	b01c      	add	sp, #112	; 0x70
 8006be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bec:	b003      	add	sp, #12
 8006bee:	4770      	bx	lr
 8006bf0:	20000024 	.word	0x20000024
 8006bf4:	ffff0208 	.word	0xffff0208

08006bf8 <quorem>:
 8006bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	6903      	ldr	r3, [r0, #16]
 8006bfe:	690c      	ldr	r4, [r1, #16]
 8006c00:	4607      	mov	r7, r0
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	f2c0 8083 	blt.w	8006d0e <quorem+0x116>
 8006c08:	3c01      	subs	r4, #1
 8006c0a:	f100 0514 	add.w	r5, r0, #20
 8006c0e:	f101 0814 	add.w	r8, r1, #20
 8006c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c20:	3301      	adds	r3, #1
 8006c22:	429a      	cmp	r2, r3
 8006c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c30:	d332      	bcc.n	8006c98 <quorem+0xa0>
 8006c32:	f04f 0e00 	mov.w	lr, #0
 8006c36:	4640      	mov	r0, r8
 8006c38:	46ac      	mov	ip, r5
 8006c3a:	46f2      	mov	sl, lr
 8006c3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c40:	b293      	uxth	r3, r2
 8006c42:	fb06 e303 	mla	r3, r6, r3, lr
 8006c46:	0c12      	lsrs	r2, r2, #16
 8006c48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c4c:	fb06 e202 	mla	r2, r6, r2, lr
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	ebaa 0303 	sub.w	r3, sl, r3
 8006c56:	f8dc a000 	ldr.w	sl, [ip]
 8006c5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c5e:	fa1f fa8a 	uxth.w	sl, sl
 8006c62:	4453      	add	r3, sl
 8006c64:	fa1f fa82 	uxth.w	sl, r2
 8006c68:	f8dc 2000 	ldr.w	r2, [ip]
 8006c6c:	4581      	cmp	r9, r0
 8006c6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c80:	f84c 3b04 	str.w	r3, [ip], #4
 8006c84:	d2da      	bcs.n	8006c3c <quorem+0x44>
 8006c86:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c8a:	b92b      	cbnz	r3, 8006c98 <quorem+0xa0>
 8006c8c:	9b01      	ldr	r3, [sp, #4]
 8006c8e:	3b04      	subs	r3, #4
 8006c90:	429d      	cmp	r5, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	d32f      	bcc.n	8006cf6 <quorem+0xfe>
 8006c96:	613c      	str	r4, [r7, #16]
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f001 f8cd 	bl	8007e38 <__mcmp>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	db25      	blt.n	8006cee <quorem+0xf6>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f04f 0c00 	mov.w	ip, #0
 8006ca8:	3601      	adds	r6, #1
 8006caa:	f858 1b04 	ldr.w	r1, [r8], #4
 8006cae:	f8d0 e000 	ldr.w	lr, [r0]
 8006cb2:	b28b      	uxth	r3, r1
 8006cb4:	ebac 0303 	sub.w	r3, ip, r3
 8006cb8:	fa1f f28e 	uxth.w	r2, lr
 8006cbc:	4413      	add	r3, r2
 8006cbe:	0c0a      	lsrs	r2, r1, #16
 8006cc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cce:	45c1      	cmp	r9, r8
 8006cd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cd4:	f840 3b04 	str.w	r3, [r0], #4
 8006cd8:	d2e7      	bcs.n	8006caa <quorem+0xb2>
 8006cda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ce2:	b922      	cbnz	r2, 8006cee <quorem+0xf6>
 8006ce4:	3b04      	subs	r3, #4
 8006ce6:	429d      	cmp	r5, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	d30a      	bcc.n	8006d02 <quorem+0x10a>
 8006cec:	613c      	str	r4, [r7, #16]
 8006cee:	4630      	mov	r0, r6
 8006cf0:	b003      	add	sp, #12
 8006cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	d1cb      	bne.n	8006c96 <quorem+0x9e>
 8006cfe:	3c01      	subs	r4, #1
 8006d00:	e7c6      	b.n	8006c90 <quorem+0x98>
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	3b04      	subs	r3, #4
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	d1f0      	bne.n	8006cec <quorem+0xf4>
 8006d0a:	3c01      	subs	r4, #1
 8006d0c:	e7eb      	b.n	8006ce6 <quorem+0xee>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e7ee      	b.n	8006cf0 <quorem+0xf8>
 8006d12:	0000      	movs	r0, r0
 8006d14:	0000      	movs	r0, r0
	...

08006d18 <_dtoa_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	461f      	mov	r7, r3
 8006d20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d22:	b099      	sub	sp, #100	; 0x64
 8006d24:	4605      	mov	r5, r0
 8006d26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d2e:	b974      	cbnz	r4, 8006d4e <_dtoa_r+0x36>
 8006d30:	2010      	movs	r0, #16
 8006d32:	f000 fde3 	bl	80078fc <malloc>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6268      	str	r0, [r5, #36]	; 0x24
 8006d3a:	b920      	cbnz	r0, 8006d46 <_dtoa_r+0x2e>
 8006d3c:	21ea      	movs	r1, #234	; 0xea
 8006d3e:	4bae      	ldr	r3, [pc, #696]	; (8006ff8 <_dtoa_r+0x2e0>)
 8006d40:	48ae      	ldr	r0, [pc, #696]	; (8006ffc <_dtoa_r+0x2e4>)
 8006d42:	f001 fba1 	bl	8008488 <__assert_func>
 8006d46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d4a:	6004      	str	r4, [r0, #0]
 8006d4c:	60c4      	str	r4, [r0, #12]
 8006d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	b151      	cbz	r1, 8006d6a <_dtoa_r+0x52>
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	2301      	movs	r3, #1
 8006d58:	4093      	lsls	r3, r2
 8006d5a:	604a      	str	r2, [r1, #4]
 8006d5c:	608b      	str	r3, [r1, #8]
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 fe30 	bl	80079c4 <_Bfree>
 8006d64:	2200      	movs	r2, #0
 8006d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	1e3b      	subs	r3, r7, #0
 8006d6c:	bfaf      	iteee	ge
 8006d6e:	2300      	movge	r3, #0
 8006d70:	2201      	movlt	r2, #1
 8006d72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	9305      	strlt	r3, [sp, #20]
 8006d78:	bfa8      	it	ge
 8006d7a:	f8c8 3000 	strge.w	r3, [r8]
 8006d7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006d82:	4b9f      	ldr	r3, [pc, #636]	; (8007000 <_dtoa_r+0x2e8>)
 8006d84:	bfb8      	it	lt
 8006d86:	f8c8 2000 	strlt.w	r2, [r8]
 8006d8a:	ea33 0309 	bics.w	r3, r3, r9
 8006d8e:	d119      	bne.n	8006dc4 <_dtoa_r+0xac>
 8006d90:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d9c:	4333      	orrs	r3, r6
 8006d9e:	f000 8580 	beq.w	80078a2 <_dtoa_r+0xb8a>
 8006da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006da4:	b953      	cbnz	r3, 8006dbc <_dtoa_r+0xa4>
 8006da6:	4b97      	ldr	r3, [pc, #604]	; (8007004 <_dtoa_r+0x2ec>)
 8006da8:	e022      	b.n	8006df0 <_dtoa_r+0xd8>
 8006daa:	4b97      	ldr	r3, [pc, #604]	; (8007008 <_dtoa_r+0x2f0>)
 8006dac:	9308      	str	r3, [sp, #32]
 8006dae:	3308      	adds	r3, #8
 8006db0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	9808      	ldr	r0, [sp, #32]
 8006db6:	b019      	add	sp, #100	; 0x64
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	4b91      	ldr	r3, [pc, #580]	; (8007004 <_dtoa_r+0x2ec>)
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	3303      	adds	r3, #3
 8006dc2:	e7f5      	b.n	8006db0 <_dtoa_r+0x98>
 8006dc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006dc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f7f9 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd8:	4680      	mov	r8, r0
 8006dda:	b158      	cbz	r0, 8006df4 <_dtoa_r+0xdc>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8559 	beq.w	800789c <_dtoa_r+0xb84>
 8006dea:	4888      	ldr	r0, [pc, #544]	; (800700c <_dtoa_r+0x2f4>)
 8006dec:	6018      	str	r0, [r3, #0]
 8006dee:	1e43      	subs	r3, r0, #1
 8006df0:	9308      	str	r3, [sp, #32]
 8006df2:	e7df      	b.n	8006db4 <_dtoa_r+0x9c>
 8006df4:	ab16      	add	r3, sp, #88	; 0x58
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	ab17      	add	r3, sp, #92	; 0x5c
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e02:	f001 f8c5 	bl	8007f90 <__d2b>
 8006e06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e0a:	4682      	mov	sl, r0
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	d07e      	beq.n	8006f0e <_dtoa_r+0x1f6>
 8006e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006e22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006e26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b78      	ldr	r3, [pc, #480]	; (8007010 <_dtoa_r+0x2f8>)
 8006e2e:	f7f9 f99b 	bl	8000168 <__aeabi_dsub>
 8006e32:	a36b      	add	r3, pc, #428	; (adr r3, 8006fe0 <_dtoa_r+0x2c8>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fb4e 	bl	80004d8 <__aeabi_dmul>
 8006e3c:	a36a      	add	r3, pc, #424	; (adr r3, 8006fe8 <_dtoa_r+0x2d0>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 f993 	bl	800016c <__adddf3>
 8006e46:	4606      	mov	r6, r0
 8006e48:	4620      	mov	r0, r4
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	f7f9 fada 	bl	8000404 <__aeabi_i2d>
 8006e50:	a367      	add	r3, pc, #412	; (adr r3, 8006ff0 <_dtoa_r+0x2d8>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fb3f 	bl	80004d8 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 f983 	bl	800016c <__adddf3>
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	f7f9 fde5 	bl	8000a38 <__aeabi_d2iz>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4681      	mov	r9, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	f7f9 fda0 	bl	80009bc <__aeabi_dcmplt>
 8006e7c:	b148      	cbz	r0, 8006e92 <_dtoa_r+0x17a>
 8006e7e:	4648      	mov	r0, r9
 8006e80:	f7f9 fac0 	bl	8000404 <__aeabi_i2d>
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	f7f9 fd8e 	bl	80009a8 <__aeabi_dcmpeq>
 8006e8c:	b908      	cbnz	r0, 8006e92 <_dtoa_r+0x17a>
 8006e8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e92:	f1b9 0f16 	cmp.w	r9, #22
 8006e96:	d857      	bhi.n	8006f48 <_dtoa_r+0x230>
 8006e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e9c:	4b5d      	ldr	r3, [pc, #372]	; (8007014 <_dtoa_r+0x2fc>)
 8006e9e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 fd89 	bl	80009bc <__aeabi_dcmplt>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d04e      	beq.n	8006f4c <_dtoa_r+0x234>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eb8:	1b1c      	subs	r4, r3, r4
 8006eba:	1e63      	subs	r3, r4, #1
 8006ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ebe:	bf49      	itett	mi
 8006ec0:	f1c4 0301 	rsbmi	r3, r4, #1
 8006ec4:	2300      	movpl	r3, #0
 8006ec6:	9306      	strmi	r3, [sp, #24]
 8006ec8:	2300      	movmi	r3, #0
 8006eca:	bf54      	ite	pl
 8006ecc:	9306      	strpl	r3, [sp, #24]
 8006ece:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	db3c      	blt.n	8006f50 <_dtoa_r+0x238>
 8006ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006edc:	444b      	add	r3, r9
 8006ede:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ee6:	2b09      	cmp	r3, #9
 8006ee8:	d86c      	bhi.n	8006fc4 <_dtoa_r+0x2ac>
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	bfc4      	itt	gt
 8006eee:	3b04      	subgt	r3, #4
 8006ef0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef4:	bfc8      	it	gt
 8006ef6:	2400      	movgt	r4, #0
 8006ef8:	f1a3 0302 	sub.w	r3, r3, #2
 8006efc:	bfd8      	it	le
 8006efe:	2401      	movle	r4, #1
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	f200 808b 	bhi.w	800701c <_dtoa_r+0x304>
 8006f06:	e8df f003 	tbb	[pc, r3]
 8006f0a:	4f2d      	.short	0x4f2d
 8006f0c:	5b4d      	.short	0x5b4d
 8006f0e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006f12:	441c      	add	r4, r3
 8006f14:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	bfc3      	ittte	gt
 8006f1c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f20:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006f24:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f28:	f1c3 0320 	rsble	r3, r3, #32
 8006f2c:	bfc6      	itte	gt
 8006f2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f32:	4318      	orrgt	r0, r3
 8006f34:	fa06 f003 	lslle.w	r0, r6, r3
 8006f38:	f7f9 fa54 	bl	80003e4 <__aeabi_ui2d>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006f42:	3c01      	subs	r4, #1
 8006f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f46:	e770      	b.n	8006e2a <_dtoa_r+0x112>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e7b3      	b.n	8006eb4 <_dtoa_r+0x19c>
 8006f4c:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f4e:	e7b2      	b.n	8006eb6 <_dtoa_r+0x19e>
 8006f50:	9b06      	ldr	r3, [sp, #24]
 8006f52:	eba3 0309 	sub.w	r3, r3, r9
 8006f56:	9306      	str	r3, [sp, #24]
 8006f58:	f1c9 0300 	rsb	r3, r9, #0
 8006f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f5e:	2300      	movs	r3, #0
 8006f60:	930e      	str	r3, [sp, #56]	; 0x38
 8006f62:	e7bf      	b.n	8006ee4 <_dtoa_r+0x1cc>
 8006f64:	2300      	movs	r3, #0
 8006f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dc59      	bgt.n	8007022 <_dtoa_r+0x30a>
 8006f6e:	f04f 0b01 	mov.w	fp, #1
 8006f72:	465b      	mov	r3, fp
 8006f74:	f8cd b008 	str.w	fp, [sp, #8]
 8006f78:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006f80:	6042      	str	r2, [r0, #4]
 8006f82:	2204      	movs	r2, #4
 8006f84:	f102 0614 	add.w	r6, r2, #20
 8006f88:	429e      	cmp	r6, r3
 8006f8a:	6841      	ldr	r1, [r0, #4]
 8006f8c:	d94f      	bls.n	800702e <_dtoa_r+0x316>
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 fcd8 	bl	8007944 <_Balloc>
 8006f94:	9008      	str	r0, [sp, #32]
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d14d      	bne.n	8007036 <_dtoa_r+0x31e>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <_dtoa_r+0x300>)
 8006fa2:	e6cd      	b.n	8006d40 <_dtoa_r+0x28>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e7de      	b.n	8006f66 <_dtoa_r+0x24e>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fae:	eb09 0b03 	add.w	fp, r9, r3
 8006fb2:	f10b 0301 	add.w	r3, fp, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	9302      	str	r3, [sp, #8]
 8006fba:	bfb8      	it	lt
 8006fbc:	2301      	movlt	r3, #1
 8006fbe:	e7dd      	b.n	8006f7c <_dtoa_r+0x264>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e7f2      	b.n	8006faa <_dtoa_r+0x292>
 8006fc4:	2401      	movs	r4, #1
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006fca:	9322      	str	r3, [sp, #136]	; 0x88
 8006fcc:	f04f 3bff 	mov.w	fp, #4294967295
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2312      	movs	r3, #18
 8006fd4:	f8cd b008 	str.w	fp, [sp, #8]
 8006fd8:	9223      	str	r2, [sp, #140]	; 0x8c
 8006fda:	e7cf      	b.n	8006f7c <_dtoa_r+0x264>
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	636f4361 	.word	0x636f4361
 8006fe4:	3fd287a7 	.word	0x3fd287a7
 8006fe8:	8b60c8b3 	.word	0x8b60c8b3
 8006fec:	3fc68a28 	.word	0x3fc68a28
 8006ff0:	509f79fb 	.word	0x509f79fb
 8006ff4:	3fd34413 	.word	0x3fd34413
 8006ff8:	080092a1 	.word	0x080092a1
 8006ffc:	080092b8 	.word	0x080092b8
 8007000:	7ff00000 	.word	0x7ff00000
 8007004:	0800929d 	.word	0x0800929d
 8007008:	08009294 	.word	0x08009294
 800700c:	08009271 	.word	0x08009271
 8007010:	3ff80000 	.word	0x3ff80000
 8007014:	080093b0 	.word	0x080093b0
 8007018:	08009317 	.word	0x08009317
 800701c:	2301      	movs	r3, #1
 800701e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007020:	e7d4      	b.n	8006fcc <_dtoa_r+0x2b4>
 8007022:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007026:	465b      	mov	r3, fp
 8007028:	f8cd b008 	str.w	fp, [sp, #8]
 800702c:	e7a6      	b.n	8006f7c <_dtoa_r+0x264>
 800702e:	3101      	adds	r1, #1
 8007030:	6041      	str	r1, [r0, #4]
 8007032:	0052      	lsls	r2, r2, #1
 8007034:	e7a6      	b.n	8006f84 <_dtoa_r+0x26c>
 8007036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007038:	9a08      	ldr	r2, [sp, #32]
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	9b02      	ldr	r3, [sp, #8]
 800703e:	2b0e      	cmp	r3, #14
 8007040:	f200 80a8 	bhi.w	8007194 <_dtoa_r+0x47c>
 8007044:	2c00      	cmp	r4, #0
 8007046:	f000 80a5 	beq.w	8007194 <_dtoa_r+0x47c>
 800704a:	f1b9 0f00 	cmp.w	r9, #0
 800704e:	dd34      	ble.n	80070ba <_dtoa_r+0x3a2>
 8007050:	4a9a      	ldr	r2, [pc, #616]	; (80072bc <_dtoa_r+0x5a4>)
 8007052:	f009 030f 	and.w	r3, r9, #15
 8007056:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800705a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800705e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007062:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007066:	ea4f 1429 	mov.w	r4, r9, asr #4
 800706a:	d016      	beq.n	800709a <_dtoa_r+0x382>
 800706c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007070:	4b93      	ldr	r3, [pc, #588]	; (80072c0 <_dtoa_r+0x5a8>)
 8007072:	2703      	movs	r7, #3
 8007074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007078:	f7f9 fb58 	bl	800072c <__aeabi_ddiv>
 800707c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007080:	f004 040f 	and.w	r4, r4, #15
 8007084:	4e8e      	ldr	r6, [pc, #568]	; (80072c0 <_dtoa_r+0x5a8>)
 8007086:	b954      	cbnz	r4, 800709e <_dtoa_r+0x386>
 8007088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800708c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007090:	f7f9 fb4c 	bl	800072c <__aeabi_ddiv>
 8007094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007098:	e029      	b.n	80070ee <_dtoa_r+0x3d6>
 800709a:	2702      	movs	r7, #2
 800709c:	e7f2      	b.n	8007084 <_dtoa_r+0x36c>
 800709e:	07e1      	lsls	r1, r4, #31
 80070a0:	d508      	bpl.n	80070b4 <_dtoa_r+0x39c>
 80070a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070aa:	f7f9 fa15 	bl	80004d8 <__aeabi_dmul>
 80070ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070b2:	3701      	adds	r7, #1
 80070b4:	1064      	asrs	r4, r4, #1
 80070b6:	3608      	adds	r6, #8
 80070b8:	e7e5      	b.n	8007086 <_dtoa_r+0x36e>
 80070ba:	f000 80a5 	beq.w	8007208 <_dtoa_r+0x4f0>
 80070be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070c2:	f1c9 0400 	rsb	r4, r9, #0
 80070c6:	4b7d      	ldr	r3, [pc, #500]	; (80072bc <_dtoa_r+0x5a4>)
 80070c8:	f004 020f 	and.w	r2, r4, #15
 80070cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 fa00 	bl	80004d8 <__aeabi_dmul>
 80070d8:	2702      	movs	r7, #2
 80070da:	2300      	movs	r3, #0
 80070dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070e0:	4e77      	ldr	r6, [pc, #476]	; (80072c0 <_dtoa_r+0x5a8>)
 80070e2:	1124      	asrs	r4, r4, #4
 80070e4:	2c00      	cmp	r4, #0
 80070e6:	f040 8084 	bne.w	80071f2 <_dtoa_r+0x4da>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1d2      	bne.n	8007094 <_dtoa_r+0x37c>
 80070ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 808b 	beq.w	800720c <_dtoa_r+0x4f4>
 80070f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007102:	2200      	movs	r2, #0
 8007104:	4b6f      	ldr	r3, [pc, #444]	; (80072c4 <_dtoa_r+0x5ac>)
 8007106:	f7f9 fc59 	bl	80009bc <__aeabi_dcmplt>
 800710a:	2800      	cmp	r0, #0
 800710c:	d07e      	beq.n	800720c <_dtoa_r+0x4f4>
 800710e:	9b02      	ldr	r3, [sp, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d07b      	beq.n	800720c <_dtoa_r+0x4f4>
 8007114:	f1bb 0f00 	cmp.w	fp, #0
 8007118:	dd38      	ble.n	800718c <_dtoa_r+0x474>
 800711a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800711e:	2200      	movs	r2, #0
 8007120:	4b69      	ldr	r3, [pc, #420]	; (80072c8 <_dtoa_r+0x5b0>)
 8007122:	f7f9 f9d9 	bl	80004d8 <__aeabi_dmul>
 8007126:	465c      	mov	r4, fp
 8007128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800712c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007130:	3701      	adds	r7, #1
 8007132:	4638      	mov	r0, r7
 8007134:	f7f9 f966 	bl	8000404 <__aeabi_i2d>
 8007138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713c:	f7f9 f9cc 	bl	80004d8 <__aeabi_dmul>
 8007140:	2200      	movs	r2, #0
 8007142:	4b62      	ldr	r3, [pc, #392]	; (80072cc <_dtoa_r+0x5b4>)
 8007144:	f7f9 f812 	bl	800016c <__adddf3>
 8007148:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800714c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007150:	9611      	str	r6, [sp, #68]	; 0x44
 8007152:	2c00      	cmp	r4, #0
 8007154:	d15d      	bne.n	8007212 <_dtoa_r+0x4fa>
 8007156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800715a:	2200      	movs	r2, #0
 800715c:	4b5c      	ldr	r3, [pc, #368]	; (80072d0 <_dtoa_r+0x5b8>)
 800715e:	f7f9 f803 	bl	8000168 <__aeabi_dsub>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800716a:	4633      	mov	r3, r6
 800716c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800716e:	f7f9 fc43 	bl	80009f8 <__aeabi_dcmpgt>
 8007172:	2800      	cmp	r0, #0
 8007174:	f040 829e 	bne.w	80076b4 <_dtoa_r+0x99c>
 8007178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800717c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800717e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007182:	f7f9 fc1b 	bl	80009bc <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	f040 8292 	bne.w	80076b0 <_dtoa_r+0x998>
 800718c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007190:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007196:	2b00      	cmp	r3, #0
 8007198:	f2c0 8153 	blt.w	8007442 <_dtoa_r+0x72a>
 800719c:	f1b9 0f0e 	cmp.w	r9, #14
 80071a0:	f300 814f 	bgt.w	8007442 <_dtoa_r+0x72a>
 80071a4:	4b45      	ldr	r3, [pc, #276]	; (80072bc <_dtoa_r+0x5a4>)
 80071a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80071aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80071b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f280 80db 	bge.w	8007370 <_dtoa_r+0x658>
 80071ba:	9b02      	ldr	r3, [sp, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f300 80d7 	bgt.w	8007370 <_dtoa_r+0x658>
 80071c2:	f040 8274 	bne.w	80076ae <_dtoa_r+0x996>
 80071c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ca:	2200      	movs	r2, #0
 80071cc:	4b40      	ldr	r3, [pc, #256]	; (80072d0 <_dtoa_r+0x5b8>)
 80071ce:	f7f9 f983 	bl	80004d8 <__aeabi_dmul>
 80071d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d6:	f7f9 fc05 	bl	80009e4 <__aeabi_dcmpge>
 80071da:	9c02      	ldr	r4, [sp, #8]
 80071dc:	4626      	mov	r6, r4
 80071de:	2800      	cmp	r0, #0
 80071e0:	f040 824a 	bne.w	8007678 <_dtoa_r+0x960>
 80071e4:	2331      	movs	r3, #49	; 0x31
 80071e6:	9f08      	ldr	r7, [sp, #32]
 80071e8:	f109 0901 	add.w	r9, r9, #1
 80071ec:	f807 3b01 	strb.w	r3, [r7], #1
 80071f0:	e246      	b.n	8007680 <_dtoa_r+0x968>
 80071f2:	07e2      	lsls	r2, r4, #31
 80071f4:	d505      	bpl.n	8007202 <_dtoa_r+0x4ea>
 80071f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	2301      	movs	r3, #1
 8007200:	3701      	adds	r7, #1
 8007202:	1064      	asrs	r4, r4, #1
 8007204:	3608      	adds	r6, #8
 8007206:	e76d      	b.n	80070e4 <_dtoa_r+0x3cc>
 8007208:	2702      	movs	r7, #2
 800720a:	e770      	b.n	80070ee <_dtoa_r+0x3d6>
 800720c:	46c8      	mov	r8, r9
 800720e:	9c02      	ldr	r4, [sp, #8]
 8007210:	e78f      	b.n	8007132 <_dtoa_r+0x41a>
 8007212:	9908      	ldr	r1, [sp, #32]
 8007214:	4b29      	ldr	r3, [pc, #164]	; (80072bc <_dtoa_r+0x5a4>)
 8007216:	4421      	add	r1, r4
 8007218:	9112      	str	r1, [sp, #72]	; 0x48
 800721a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800721c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007220:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007224:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007228:	2900      	cmp	r1, #0
 800722a:	d055      	beq.n	80072d8 <_dtoa_r+0x5c0>
 800722c:	2000      	movs	r0, #0
 800722e:	4929      	ldr	r1, [pc, #164]	; (80072d4 <_dtoa_r+0x5bc>)
 8007230:	f7f9 fa7c 	bl	800072c <__aeabi_ddiv>
 8007234:	463b      	mov	r3, r7
 8007236:	4632      	mov	r2, r6
 8007238:	f7f8 ff96 	bl	8000168 <__aeabi_dsub>
 800723c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007240:	9f08      	ldr	r7, [sp, #32]
 8007242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007246:	f7f9 fbf7 	bl	8000a38 <__aeabi_d2iz>
 800724a:	4604      	mov	r4, r0
 800724c:	f7f9 f8da 	bl	8000404 <__aeabi_i2d>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007258:	f7f8 ff86 	bl	8000168 <__aeabi_dsub>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	3430      	adds	r4, #48	; 0x30
 8007262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800726a:	f807 4b01 	strb.w	r4, [r7], #1
 800726e:	f7f9 fba5 	bl	80009bc <__aeabi_dcmplt>
 8007272:	2800      	cmp	r0, #0
 8007274:	d174      	bne.n	8007360 <_dtoa_r+0x648>
 8007276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800727a:	2000      	movs	r0, #0
 800727c:	4911      	ldr	r1, [pc, #68]	; (80072c4 <_dtoa_r+0x5ac>)
 800727e:	f7f8 ff73 	bl	8000168 <__aeabi_dsub>
 8007282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007286:	f7f9 fb99 	bl	80009bc <__aeabi_dcmplt>
 800728a:	2800      	cmp	r0, #0
 800728c:	f040 80b6 	bne.w	80073fc <_dtoa_r+0x6e4>
 8007290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007292:	429f      	cmp	r7, r3
 8007294:	f43f af7a 	beq.w	800718c <_dtoa_r+0x474>
 8007298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800729c:	2200      	movs	r2, #0
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <_dtoa_r+0x5b0>)
 80072a0:	f7f9 f91a 	bl	80004d8 <__aeabi_dmul>
 80072a4:	2200      	movs	r2, #0
 80072a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072ae:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <_dtoa_r+0x5b0>)
 80072b0:	f7f9 f912 	bl	80004d8 <__aeabi_dmul>
 80072b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072b8:	e7c3      	b.n	8007242 <_dtoa_r+0x52a>
 80072ba:	bf00      	nop
 80072bc:	080093b0 	.word	0x080093b0
 80072c0:	08009388 	.word	0x08009388
 80072c4:	3ff00000 	.word	0x3ff00000
 80072c8:	40240000 	.word	0x40240000
 80072cc:	401c0000 	.word	0x401c0000
 80072d0:	40140000 	.word	0x40140000
 80072d4:	3fe00000 	.word	0x3fe00000
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 f8fc 	bl	80004d8 <__aeabi_dmul>
 80072e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072e6:	9c08      	ldr	r4, [sp, #32]
 80072e8:	9314      	str	r3, [sp, #80]	; 0x50
 80072ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072ee:	f7f9 fba3 	bl	8000a38 <__aeabi_d2iz>
 80072f2:	9015      	str	r0, [sp, #84]	; 0x54
 80072f4:	f7f9 f886 	bl	8000404 <__aeabi_i2d>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007300:	f7f8 ff32 	bl	8000168 <__aeabi_dsub>
 8007304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007306:	4606      	mov	r6, r0
 8007308:	3330      	adds	r3, #48	; 0x30
 800730a:	f804 3b01 	strb.w	r3, [r4], #1
 800730e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007310:	460f      	mov	r7, r1
 8007312:	429c      	cmp	r4, r3
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	d124      	bne.n	8007364 <_dtoa_r+0x64c>
 800731a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800731e:	4bb3      	ldr	r3, [pc, #716]	; (80075ec <_dtoa_r+0x8d4>)
 8007320:	f7f8 ff24 	bl	800016c <__adddf3>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 fb64 	bl	80009f8 <__aeabi_dcmpgt>
 8007330:	2800      	cmp	r0, #0
 8007332:	d162      	bne.n	80073fa <_dtoa_r+0x6e2>
 8007334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007338:	2000      	movs	r0, #0
 800733a:	49ac      	ldr	r1, [pc, #688]	; (80075ec <_dtoa_r+0x8d4>)
 800733c:	f7f8 ff14 	bl	8000168 <__aeabi_dsub>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4630      	mov	r0, r6
 8007346:	4639      	mov	r1, r7
 8007348:	f7f9 fb38 	bl	80009bc <__aeabi_dcmplt>
 800734c:	2800      	cmp	r0, #0
 800734e:	f43f af1d 	beq.w	800718c <_dtoa_r+0x474>
 8007352:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007354:	1e7b      	subs	r3, r7, #1
 8007356:	9314      	str	r3, [sp, #80]	; 0x50
 8007358:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d0f8      	beq.n	8007352 <_dtoa_r+0x63a>
 8007360:	46c1      	mov	r9, r8
 8007362:	e03a      	b.n	80073da <_dtoa_r+0x6c2>
 8007364:	4ba2      	ldr	r3, [pc, #648]	; (80075f0 <_dtoa_r+0x8d8>)
 8007366:	f7f9 f8b7 	bl	80004d8 <__aeabi_dmul>
 800736a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800736e:	e7bc      	b.n	80072ea <_dtoa_r+0x5d2>
 8007370:	9f08      	ldr	r7, [sp, #32]
 8007372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800737a:	f7f9 f9d7 	bl	800072c <__aeabi_ddiv>
 800737e:	f7f9 fb5b 	bl	8000a38 <__aeabi_d2iz>
 8007382:	4604      	mov	r4, r0
 8007384:	f7f9 f83e 	bl	8000404 <__aeabi_i2d>
 8007388:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800738c:	f7f9 f8a4 	bl	80004d8 <__aeabi_dmul>
 8007390:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007394:	460b      	mov	r3, r1
 8007396:	4602      	mov	r2, r0
 8007398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739c:	f7f8 fee4 	bl	8000168 <__aeabi_dsub>
 80073a0:	f807 6b01 	strb.w	r6, [r7], #1
 80073a4:	9e08      	ldr	r6, [sp, #32]
 80073a6:	9b02      	ldr	r3, [sp, #8]
 80073a8:	1bbe      	subs	r6, r7, r6
 80073aa:	42b3      	cmp	r3, r6
 80073ac:	d13a      	bne.n	8007424 <_dtoa_r+0x70c>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	f7f8 fedb 	bl	800016c <__adddf3>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073c2:	f7f9 fb19 	bl	80009f8 <__aeabi_dcmpgt>
 80073c6:	bb58      	cbnz	r0, 8007420 <_dtoa_r+0x708>
 80073c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d0:	f7f9 faea 	bl	80009a8 <__aeabi_dcmpeq>
 80073d4:	b108      	cbz	r0, 80073da <_dtoa_r+0x6c2>
 80073d6:	07e1      	lsls	r1, r4, #31
 80073d8:	d422      	bmi.n	8007420 <_dtoa_r+0x708>
 80073da:	4628      	mov	r0, r5
 80073dc:	4651      	mov	r1, sl
 80073de:	f000 faf1 	bl	80079c4 <_Bfree>
 80073e2:	2300      	movs	r3, #0
 80073e4:	703b      	strb	r3, [r7, #0]
 80073e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80073e8:	f109 0001 	add.w	r0, r9, #1
 80073ec:	6018      	str	r0, [r3, #0]
 80073ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f43f acdf 	beq.w	8006db4 <_dtoa_r+0x9c>
 80073f6:	601f      	str	r7, [r3, #0]
 80073f8:	e4dc      	b.n	8006db4 <_dtoa_r+0x9c>
 80073fa:	4627      	mov	r7, r4
 80073fc:	463b      	mov	r3, r7
 80073fe:	461f      	mov	r7, r3
 8007400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007404:	2a39      	cmp	r2, #57	; 0x39
 8007406:	d107      	bne.n	8007418 <_dtoa_r+0x700>
 8007408:	9a08      	ldr	r2, [sp, #32]
 800740a:	429a      	cmp	r2, r3
 800740c:	d1f7      	bne.n	80073fe <_dtoa_r+0x6e6>
 800740e:	2230      	movs	r2, #48	; 0x30
 8007410:	9908      	ldr	r1, [sp, #32]
 8007412:	f108 0801 	add.w	r8, r8, #1
 8007416:	700a      	strb	r2, [r1, #0]
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	3201      	adds	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e79f      	b.n	8007360 <_dtoa_r+0x648>
 8007420:	46c8      	mov	r8, r9
 8007422:	e7eb      	b.n	80073fc <_dtoa_r+0x6e4>
 8007424:	2200      	movs	r2, #0
 8007426:	4b72      	ldr	r3, [pc, #456]	; (80075f0 <_dtoa_r+0x8d8>)
 8007428:	f7f9 f856 	bl	80004d8 <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	f7f9 fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800743c:	2800      	cmp	r0, #0
 800743e:	d098      	beq.n	8007372 <_dtoa_r+0x65a>
 8007440:	e7cb      	b.n	80073da <_dtoa_r+0x6c2>
 8007442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007444:	2a00      	cmp	r2, #0
 8007446:	f000 80cd 	beq.w	80075e4 <_dtoa_r+0x8cc>
 800744a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800744c:	2a01      	cmp	r2, #1
 800744e:	f300 80af 	bgt.w	80075b0 <_dtoa_r+0x898>
 8007452:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007454:	2a00      	cmp	r2, #0
 8007456:	f000 80a7 	beq.w	80075a8 <_dtoa_r+0x890>
 800745a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800745e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007460:	9f06      	ldr	r7, [sp, #24]
 8007462:	9a06      	ldr	r2, [sp, #24]
 8007464:	2101      	movs	r1, #1
 8007466:	441a      	add	r2, r3
 8007468:	9206      	str	r2, [sp, #24]
 800746a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746c:	4628      	mov	r0, r5
 800746e:	441a      	add	r2, r3
 8007470:	9209      	str	r2, [sp, #36]	; 0x24
 8007472:	f000 fb61 	bl	8007b38 <__i2b>
 8007476:	4606      	mov	r6, r0
 8007478:	2f00      	cmp	r7, #0
 800747a:	dd0c      	ble.n	8007496 <_dtoa_r+0x77e>
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	dd09      	ble.n	8007496 <_dtoa_r+0x77e>
 8007482:	42bb      	cmp	r3, r7
 8007484:	bfa8      	it	ge
 8007486:	463b      	movge	r3, r7
 8007488:	9a06      	ldr	r2, [sp, #24]
 800748a:	1aff      	subs	r7, r7, r3
 800748c:	1ad2      	subs	r2, r2, r3
 800748e:	9206      	str	r2, [sp, #24]
 8007490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	b1f3      	cbz	r3, 80074d8 <_dtoa_r+0x7c0>
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80a9 	beq.w	80075f4 <_dtoa_r+0x8dc>
 80074a2:	2c00      	cmp	r4, #0
 80074a4:	dd10      	ble.n	80074c8 <_dtoa_r+0x7b0>
 80074a6:	4631      	mov	r1, r6
 80074a8:	4622      	mov	r2, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 fbfe 	bl	8007cac <__pow5mult>
 80074b0:	4652      	mov	r2, sl
 80074b2:	4601      	mov	r1, r0
 80074b4:	4606      	mov	r6, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fb54 	bl	8007b64 <__multiply>
 80074bc:	4680      	mov	r8, r0
 80074be:	4651      	mov	r1, sl
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 fa7f 	bl	80079c4 <_Bfree>
 80074c6:	46c2      	mov	sl, r8
 80074c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ca:	1b1a      	subs	r2, r3, r4
 80074cc:	d004      	beq.n	80074d8 <_dtoa_r+0x7c0>
 80074ce:	4651      	mov	r1, sl
 80074d0:	4628      	mov	r0, r5
 80074d2:	f000 fbeb 	bl	8007cac <__pow5mult>
 80074d6:	4682      	mov	sl, r0
 80074d8:	2101      	movs	r1, #1
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 fb2c 	bl	8007b38 <__i2b>
 80074e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074e2:	4604      	mov	r4, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f340 8087 	ble.w	80075f8 <_dtoa_r+0x8e0>
 80074ea:	461a      	mov	r2, r3
 80074ec:	4601      	mov	r1, r0
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fbdc 	bl	8007cac <__pow5mult>
 80074f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f6:	4604      	mov	r4, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f340 8080 	ble.w	80075fe <_dtoa_r+0x8e6>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007508:	6918      	ldr	r0, [r3, #16]
 800750a:	f000 fac7 	bl	8007a9c <__hi0bits>
 800750e:	f1c0 0020 	rsb	r0, r0, #32
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	4418      	add	r0, r3
 8007516:	f010 001f 	ands.w	r0, r0, #31
 800751a:	f000 8092 	beq.w	8007642 <_dtoa_r+0x92a>
 800751e:	f1c0 0320 	rsb	r3, r0, #32
 8007522:	2b04      	cmp	r3, #4
 8007524:	f340 808a 	ble.w	800763c <_dtoa_r+0x924>
 8007528:	f1c0 001c 	rsb	r0, r0, #28
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	4407      	add	r7, r0
 8007530:	4403      	add	r3, r0
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	4403      	add	r3, r0
 8007538:	9309      	str	r3, [sp, #36]	; 0x24
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	dd05      	ble.n	800754c <_dtoa_r+0x834>
 8007540:	4651      	mov	r1, sl
 8007542:	461a      	mov	r2, r3
 8007544:	4628      	mov	r0, r5
 8007546:	f000 fc0b 	bl	8007d60 <__lshift>
 800754a:	4682      	mov	sl, r0
 800754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	dd05      	ble.n	800755e <_dtoa_r+0x846>
 8007552:	4621      	mov	r1, r4
 8007554:	461a      	mov	r2, r3
 8007556:	4628      	mov	r0, r5
 8007558:	f000 fc02 	bl	8007d60 <__lshift>
 800755c:	4604      	mov	r4, r0
 800755e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d070      	beq.n	8007646 <_dtoa_r+0x92e>
 8007564:	4621      	mov	r1, r4
 8007566:	4650      	mov	r0, sl
 8007568:	f000 fc66 	bl	8007e38 <__mcmp>
 800756c:	2800      	cmp	r0, #0
 800756e:	da6a      	bge.n	8007646 <_dtoa_r+0x92e>
 8007570:	2300      	movs	r3, #0
 8007572:	4651      	mov	r1, sl
 8007574:	220a      	movs	r2, #10
 8007576:	4628      	mov	r0, r5
 8007578:	f000 fa46 	bl	8007a08 <__multadd>
 800757c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757e:	4682      	mov	sl, r0
 8007580:	f109 39ff 	add.w	r9, r9, #4294967295
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8193 	beq.w	80078b0 <_dtoa_r+0xb98>
 800758a:	4631      	mov	r1, r6
 800758c:	2300      	movs	r3, #0
 800758e:	220a      	movs	r2, #10
 8007590:	4628      	mov	r0, r5
 8007592:	f000 fa39 	bl	8007a08 <__multadd>
 8007596:	f1bb 0f00 	cmp.w	fp, #0
 800759a:	4606      	mov	r6, r0
 800759c:	f300 8093 	bgt.w	80076c6 <_dtoa_r+0x9ae>
 80075a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	dc57      	bgt.n	8007656 <_dtoa_r+0x93e>
 80075a6:	e08e      	b.n	80076c6 <_dtoa_r+0x9ae>
 80075a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075ae:	e756      	b.n	800745e <_dtoa_r+0x746>
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	1e5c      	subs	r4, r3, #1
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	bfb7      	itett	lt
 80075ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80075bc:	1b1c      	subge	r4, r3, r4
 80075be:	1ae2      	sublt	r2, r4, r3
 80075c0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80075c2:	bfbe      	ittt	lt
 80075c4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80075c6:	189b      	addlt	r3, r3, r2
 80075c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80075ca:	9b02      	ldr	r3, [sp, #8]
 80075cc:	bfb8      	it	lt
 80075ce:	2400      	movlt	r4, #0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfbb      	ittet	lt
 80075d4:	9b06      	ldrlt	r3, [sp, #24]
 80075d6:	9a02      	ldrlt	r2, [sp, #8]
 80075d8:	9f06      	ldrge	r7, [sp, #24]
 80075da:	1a9f      	sublt	r7, r3, r2
 80075dc:	bfac      	ite	ge
 80075de:	9b02      	ldrge	r3, [sp, #8]
 80075e0:	2300      	movlt	r3, #0
 80075e2:	e73e      	b.n	8007462 <_dtoa_r+0x74a>
 80075e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075e6:	9f06      	ldr	r7, [sp, #24]
 80075e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80075ea:	e745      	b.n	8007478 <_dtoa_r+0x760>
 80075ec:	3fe00000 	.word	0x3fe00000
 80075f0:	40240000 	.word	0x40240000
 80075f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f6:	e76a      	b.n	80074ce <_dtoa_r+0x7b6>
 80075f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	dc19      	bgt.n	8007632 <_dtoa_r+0x91a>
 80075fe:	9b04      	ldr	r3, [sp, #16]
 8007600:	b9bb      	cbnz	r3, 8007632 <_dtoa_r+0x91a>
 8007602:	9b05      	ldr	r3, [sp, #20]
 8007604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007608:	b99b      	cbnz	r3, 8007632 <_dtoa_r+0x91a>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	051b      	lsls	r3, r3, #20
 8007614:	b183      	cbz	r3, 8007638 <_dtoa_r+0x920>
 8007616:	f04f 0801 	mov.w	r8, #1
 800761a:	9b06      	ldr	r3, [sp, #24]
 800761c:	3301      	adds	r3, #1
 800761e:	9306      	str	r3, [sp, #24]
 8007620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007622:	3301      	adds	r3, #1
 8007624:	9309      	str	r3, [sp, #36]	; 0x24
 8007626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	f47f af6a 	bne.w	8007502 <_dtoa_r+0x7ea>
 800762e:	2001      	movs	r0, #1
 8007630:	e76f      	b.n	8007512 <_dtoa_r+0x7fa>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	e7f6      	b.n	8007626 <_dtoa_r+0x90e>
 8007638:	4698      	mov	r8, r3
 800763a:	e7f4      	b.n	8007626 <_dtoa_r+0x90e>
 800763c:	f43f af7d 	beq.w	800753a <_dtoa_r+0x822>
 8007640:	4618      	mov	r0, r3
 8007642:	301c      	adds	r0, #28
 8007644:	e772      	b.n	800752c <_dtoa_r+0x814>
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	dc36      	bgt.n	80076ba <_dtoa_r+0x9a2>
 800764c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800764e:	2b02      	cmp	r3, #2
 8007650:	dd33      	ble.n	80076ba <_dtoa_r+0x9a2>
 8007652:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007656:	f1bb 0f00 	cmp.w	fp, #0
 800765a:	d10d      	bne.n	8007678 <_dtoa_r+0x960>
 800765c:	4621      	mov	r1, r4
 800765e:	465b      	mov	r3, fp
 8007660:	2205      	movs	r2, #5
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f9d0 	bl	8007a08 <__multadd>
 8007668:	4601      	mov	r1, r0
 800766a:	4604      	mov	r4, r0
 800766c:	4650      	mov	r0, sl
 800766e:	f000 fbe3 	bl	8007e38 <__mcmp>
 8007672:	2800      	cmp	r0, #0
 8007674:	f73f adb6 	bgt.w	80071e4 <_dtoa_r+0x4cc>
 8007678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800767a:	9f08      	ldr	r7, [sp, #32]
 800767c:	ea6f 0903 	mvn.w	r9, r3
 8007680:	f04f 0800 	mov.w	r8, #0
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 f99c 	bl	80079c4 <_Bfree>
 800768c:	2e00      	cmp	r6, #0
 800768e:	f43f aea4 	beq.w	80073da <_dtoa_r+0x6c2>
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d005      	beq.n	80076a4 <_dtoa_r+0x98c>
 8007698:	45b0      	cmp	r8, r6
 800769a:	d003      	beq.n	80076a4 <_dtoa_r+0x98c>
 800769c:	4641      	mov	r1, r8
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f990 	bl	80079c4 <_Bfree>
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f98c 	bl	80079c4 <_Bfree>
 80076ac:	e695      	b.n	80073da <_dtoa_r+0x6c2>
 80076ae:	2400      	movs	r4, #0
 80076b0:	4626      	mov	r6, r4
 80076b2:	e7e1      	b.n	8007678 <_dtoa_r+0x960>
 80076b4:	46c1      	mov	r9, r8
 80076b6:	4626      	mov	r6, r4
 80076b8:	e594      	b.n	80071e4 <_dtoa_r+0x4cc>
 80076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80fc 	beq.w	80078be <_dtoa_r+0xba6>
 80076c6:	2f00      	cmp	r7, #0
 80076c8:	dd05      	ble.n	80076d6 <_dtoa_r+0x9be>
 80076ca:	4631      	mov	r1, r6
 80076cc:	463a      	mov	r2, r7
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 fb46 	bl	8007d60 <__lshift>
 80076d4:	4606      	mov	r6, r0
 80076d6:	f1b8 0f00 	cmp.w	r8, #0
 80076da:	d05c      	beq.n	8007796 <_dtoa_r+0xa7e>
 80076dc:	4628      	mov	r0, r5
 80076de:	6871      	ldr	r1, [r6, #4]
 80076e0:	f000 f930 	bl	8007944 <_Balloc>
 80076e4:	4607      	mov	r7, r0
 80076e6:	b928      	cbnz	r0, 80076f4 <_dtoa_r+0x9dc>
 80076e8:	4602      	mov	r2, r0
 80076ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076ee:	4b7e      	ldr	r3, [pc, #504]	; (80078e8 <_dtoa_r+0xbd0>)
 80076f0:	f7ff bb26 	b.w	8006d40 <_dtoa_r+0x28>
 80076f4:	6932      	ldr	r2, [r6, #16]
 80076f6:	f106 010c 	add.w	r1, r6, #12
 80076fa:	3202      	adds	r2, #2
 80076fc:	0092      	lsls	r2, r2, #2
 80076fe:	300c      	adds	r0, #12
 8007700:	f000 f912 	bl	8007928 <memcpy>
 8007704:	2201      	movs	r2, #1
 8007706:	4639      	mov	r1, r7
 8007708:	4628      	mov	r0, r5
 800770a:	f000 fb29 	bl	8007d60 <__lshift>
 800770e:	46b0      	mov	r8, r6
 8007710:	4606      	mov	r6, r0
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	3301      	adds	r3, #1
 8007716:	9302      	str	r3, [sp, #8]
 8007718:	9b08      	ldr	r3, [sp, #32]
 800771a:	445b      	add	r3, fp
 800771c:	930a      	str	r3, [sp, #40]	; 0x28
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	4621      	mov	r1, r4
 800772a:	4650      	mov	r0, sl
 800772c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007730:	f7ff fa62 	bl	8006bf8 <quorem>
 8007734:	4603      	mov	r3, r0
 8007736:	4641      	mov	r1, r8
 8007738:	3330      	adds	r3, #48	; 0x30
 800773a:	9004      	str	r0, [sp, #16]
 800773c:	4650      	mov	r0, sl
 800773e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007740:	f000 fb7a 	bl	8007e38 <__mcmp>
 8007744:	4632      	mov	r2, r6
 8007746:	9006      	str	r0, [sp, #24]
 8007748:	4621      	mov	r1, r4
 800774a:	4628      	mov	r0, r5
 800774c:	f000 fb90 	bl	8007e70 <__mdiff>
 8007750:	68c2      	ldr	r2, [r0, #12]
 8007752:	4607      	mov	r7, r0
 8007754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007756:	bb02      	cbnz	r2, 800779a <_dtoa_r+0xa82>
 8007758:	4601      	mov	r1, r0
 800775a:	4650      	mov	r0, sl
 800775c:	f000 fb6c 	bl	8007e38 <__mcmp>
 8007760:	4602      	mov	r2, r0
 8007762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007764:	4639      	mov	r1, r7
 8007766:	4628      	mov	r0, r5
 8007768:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800776c:	f000 f92a 	bl	80079c4 <_Bfree>
 8007770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007774:	9f02      	ldr	r7, [sp, #8]
 8007776:	ea43 0102 	orr.w	r1, r3, r2
 800777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777c:	430b      	orrs	r3, r1
 800777e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007780:	d10d      	bne.n	800779e <_dtoa_r+0xa86>
 8007782:	2b39      	cmp	r3, #57	; 0x39
 8007784:	d027      	beq.n	80077d6 <_dtoa_r+0xabe>
 8007786:	9a06      	ldr	r2, [sp, #24]
 8007788:	2a00      	cmp	r2, #0
 800778a:	dd01      	ble.n	8007790 <_dtoa_r+0xa78>
 800778c:	9b04      	ldr	r3, [sp, #16]
 800778e:	3331      	adds	r3, #49	; 0x31
 8007790:	f88b 3000 	strb.w	r3, [fp]
 8007794:	e776      	b.n	8007684 <_dtoa_r+0x96c>
 8007796:	4630      	mov	r0, r6
 8007798:	e7b9      	b.n	800770e <_dtoa_r+0x9f6>
 800779a:	2201      	movs	r2, #1
 800779c:	e7e2      	b.n	8007764 <_dtoa_r+0xa4c>
 800779e:	9906      	ldr	r1, [sp, #24]
 80077a0:	2900      	cmp	r1, #0
 80077a2:	db04      	blt.n	80077ae <_dtoa_r+0xa96>
 80077a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80077a6:	4301      	orrs	r1, r0
 80077a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077aa:	4301      	orrs	r1, r0
 80077ac:	d120      	bne.n	80077f0 <_dtoa_r+0xad8>
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	ddee      	ble.n	8007790 <_dtoa_r+0xa78>
 80077b2:	4651      	mov	r1, sl
 80077b4:	2201      	movs	r2, #1
 80077b6:	4628      	mov	r0, r5
 80077b8:	9302      	str	r3, [sp, #8]
 80077ba:	f000 fad1 	bl	8007d60 <__lshift>
 80077be:	4621      	mov	r1, r4
 80077c0:	4682      	mov	sl, r0
 80077c2:	f000 fb39 	bl	8007e38 <__mcmp>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	9b02      	ldr	r3, [sp, #8]
 80077ca:	dc02      	bgt.n	80077d2 <_dtoa_r+0xaba>
 80077cc:	d1e0      	bne.n	8007790 <_dtoa_r+0xa78>
 80077ce:	07da      	lsls	r2, r3, #31
 80077d0:	d5de      	bpl.n	8007790 <_dtoa_r+0xa78>
 80077d2:	2b39      	cmp	r3, #57	; 0x39
 80077d4:	d1da      	bne.n	800778c <_dtoa_r+0xa74>
 80077d6:	2339      	movs	r3, #57	; 0x39
 80077d8:	f88b 3000 	strb.w	r3, [fp]
 80077dc:	463b      	mov	r3, r7
 80077de:	461f      	mov	r7, r3
 80077e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	2a39      	cmp	r2, #57	; 0x39
 80077e8:	d050      	beq.n	800788c <_dtoa_r+0xb74>
 80077ea:	3201      	adds	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e749      	b.n	8007684 <_dtoa_r+0x96c>
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	dd03      	ble.n	80077fc <_dtoa_r+0xae4>
 80077f4:	2b39      	cmp	r3, #57	; 0x39
 80077f6:	d0ee      	beq.n	80077d6 <_dtoa_r+0xabe>
 80077f8:	3301      	adds	r3, #1
 80077fa:	e7c9      	b.n	8007790 <_dtoa_r+0xa78>
 80077fc:	9a02      	ldr	r2, [sp, #8]
 80077fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007800:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007804:	428a      	cmp	r2, r1
 8007806:	d02a      	beq.n	800785e <_dtoa_r+0xb46>
 8007808:	4651      	mov	r1, sl
 800780a:	2300      	movs	r3, #0
 800780c:	220a      	movs	r2, #10
 800780e:	4628      	mov	r0, r5
 8007810:	f000 f8fa 	bl	8007a08 <__multadd>
 8007814:	45b0      	cmp	r8, r6
 8007816:	4682      	mov	sl, r0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	f04f 020a 	mov.w	r2, #10
 8007820:	4641      	mov	r1, r8
 8007822:	4628      	mov	r0, r5
 8007824:	d107      	bne.n	8007836 <_dtoa_r+0xb1e>
 8007826:	f000 f8ef 	bl	8007a08 <__multadd>
 800782a:	4680      	mov	r8, r0
 800782c:	4606      	mov	r6, r0
 800782e:	9b02      	ldr	r3, [sp, #8]
 8007830:	3301      	adds	r3, #1
 8007832:	9302      	str	r3, [sp, #8]
 8007834:	e777      	b.n	8007726 <_dtoa_r+0xa0e>
 8007836:	f000 f8e7 	bl	8007a08 <__multadd>
 800783a:	4631      	mov	r1, r6
 800783c:	4680      	mov	r8, r0
 800783e:	2300      	movs	r3, #0
 8007840:	220a      	movs	r2, #10
 8007842:	4628      	mov	r0, r5
 8007844:	f000 f8e0 	bl	8007a08 <__multadd>
 8007848:	4606      	mov	r6, r0
 800784a:	e7f0      	b.n	800782e <_dtoa_r+0xb16>
 800784c:	f1bb 0f00 	cmp.w	fp, #0
 8007850:	bfcc      	ite	gt
 8007852:	465f      	movgt	r7, fp
 8007854:	2701      	movle	r7, #1
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	9a08      	ldr	r2, [sp, #32]
 800785c:	4417      	add	r7, r2
 800785e:	4651      	mov	r1, sl
 8007860:	2201      	movs	r2, #1
 8007862:	4628      	mov	r0, r5
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	f000 fa7b 	bl	8007d60 <__lshift>
 800786a:	4621      	mov	r1, r4
 800786c:	4682      	mov	sl, r0
 800786e:	f000 fae3 	bl	8007e38 <__mcmp>
 8007872:	2800      	cmp	r0, #0
 8007874:	dcb2      	bgt.n	80077dc <_dtoa_r+0xac4>
 8007876:	d102      	bne.n	800787e <_dtoa_r+0xb66>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	07db      	lsls	r3, r3, #31
 800787c:	d4ae      	bmi.n	80077dc <_dtoa_r+0xac4>
 800787e:	463b      	mov	r3, r7
 8007880:	461f      	mov	r7, r3
 8007882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007886:	2a30      	cmp	r2, #48	; 0x30
 8007888:	d0fa      	beq.n	8007880 <_dtoa_r+0xb68>
 800788a:	e6fb      	b.n	8007684 <_dtoa_r+0x96c>
 800788c:	9a08      	ldr	r2, [sp, #32]
 800788e:	429a      	cmp	r2, r3
 8007890:	d1a5      	bne.n	80077de <_dtoa_r+0xac6>
 8007892:	2331      	movs	r3, #49	; 0x31
 8007894:	f109 0901 	add.w	r9, r9, #1
 8007898:	7013      	strb	r3, [r2, #0]
 800789a:	e6f3      	b.n	8007684 <_dtoa_r+0x96c>
 800789c:	4b13      	ldr	r3, [pc, #76]	; (80078ec <_dtoa_r+0xbd4>)
 800789e:	f7ff baa7 	b.w	8006df0 <_dtoa_r+0xd8>
 80078a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f47f aa80 	bne.w	8006daa <_dtoa_r+0x92>
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <_dtoa_r+0xbd8>)
 80078ac:	f7ff baa0 	b.w	8006df0 <_dtoa_r+0xd8>
 80078b0:	f1bb 0f00 	cmp.w	fp, #0
 80078b4:	dc03      	bgt.n	80078be <_dtoa_r+0xba6>
 80078b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	f73f aecc 	bgt.w	8007656 <_dtoa_r+0x93e>
 80078be:	9f08      	ldr	r7, [sp, #32]
 80078c0:	4621      	mov	r1, r4
 80078c2:	4650      	mov	r0, sl
 80078c4:	f7ff f998 	bl	8006bf8 <quorem>
 80078c8:	9a08      	ldr	r2, [sp, #32]
 80078ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80078ce:	f807 3b01 	strb.w	r3, [r7], #1
 80078d2:	1aba      	subs	r2, r7, r2
 80078d4:	4593      	cmp	fp, r2
 80078d6:	ddb9      	ble.n	800784c <_dtoa_r+0xb34>
 80078d8:	4651      	mov	r1, sl
 80078da:	2300      	movs	r3, #0
 80078dc:	220a      	movs	r2, #10
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f892 	bl	8007a08 <__multadd>
 80078e4:	4682      	mov	sl, r0
 80078e6:	e7eb      	b.n	80078c0 <_dtoa_r+0xba8>
 80078e8:	08009317 	.word	0x08009317
 80078ec:	08009270 	.word	0x08009270
 80078f0:	08009294 	.word	0x08009294

080078f4 <_localeconv_r>:
 80078f4:	4800      	ldr	r0, [pc, #0]	; (80078f8 <_localeconv_r+0x4>)
 80078f6:	4770      	bx	lr
 80078f8:	20000178 	.word	0x20000178

080078fc <malloc>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <malloc+0xc>)
 80078fe:	4601      	mov	r1, r0
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f000 bbfb 	b.w	80080fc <_malloc_r>
 8007906:	bf00      	nop
 8007908:	20000024 	.word	0x20000024

0800790c <memchr>:
 800790c:	4603      	mov	r3, r0
 800790e:	b510      	push	{r4, lr}
 8007910:	b2c9      	uxtb	r1, r1
 8007912:	4402      	add	r2, r0
 8007914:	4293      	cmp	r3, r2
 8007916:	4618      	mov	r0, r3
 8007918:	d101      	bne.n	800791e <memchr+0x12>
 800791a:	2000      	movs	r0, #0
 800791c:	e003      	b.n	8007926 <memchr+0x1a>
 800791e:	7804      	ldrb	r4, [r0, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	428c      	cmp	r4, r1
 8007924:	d1f6      	bne.n	8007914 <memchr+0x8>
 8007926:	bd10      	pop	{r4, pc}

08007928 <memcpy>:
 8007928:	440a      	add	r2, r1
 800792a:	4291      	cmp	r1, r2
 800792c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007930:	d100      	bne.n	8007934 <memcpy+0xc>
 8007932:	4770      	bx	lr
 8007934:	b510      	push	{r4, lr}
 8007936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793a:	4291      	cmp	r1, r2
 800793c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007940:	d1f9      	bne.n	8007936 <memcpy+0xe>
 8007942:	bd10      	pop	{r4, pc}

08007944 <_Balloc>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007948:	4604      	mov	r4, r0
 800794a:	460d      	mov	r5, r1
 800794c:	b976      	cbnz	r6, 800796c <_Balloc+0x28>
 800794e:	2010      	movs	r0, #16
 8007950:	f7ff ffd4 	bl	80078fc <malloc>
 8007954:	4602      	mov	r2, r0
 8007956:	6260      	str	r0, [r4, #36]	; 0x24
 8007958:	b920      	cbnz	r0, 8007964 <_Balloc+0x20>
 800795a:	2166      	movs	r1, #102	; 0x66
 800795c:	4b17      	ldr	r3, [pc, #92]	; (80079bc <_Balloc+0x78>)
 800795e:	4818      	ldr	r0, [pc, #96]	; (80079c0 <_Balloc+0x7c>)
 8007960:	f000 fd92 	bl	8008488 <__assert_func>
 8007964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007968:	6006      	str	r6, [r0, #0]
 800796a:	60c6      	str	r6, [r0, #12]
 800796c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800796e:	68f3      	ldr	r3, [r6, #12]
 8007970:	b183      	cbz	r3, 8007994 <_Balloc+0x50>
 8007972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800797a:	b9b8      	cbnz	r0, 80079ac <_Balloc+0x68>
 800797c:	2101      	movs	r1, #1
 800797e:	fa01 f605 	lsl.w	r6, r1, r5
 8007982:	1d72      	adds	r2, r6, #5
 8007984:	4620      	mov	r0, r4
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	f000 fb5e 	bl	8008048 <_calloc_r>
 800798c:	b160      	cbz	r0, 80079a8 <_Balloc+0x64>
 800798e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007992:	e00e      	b.n	80079b2 <_Balloc+0x6e>
 8007994:	2221      	movs	r2, #33	; 0x21
 8007996:	2104      	movs	r1, #4
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fb55 	bl	8008048 <_calloc_r>
 800799e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a0:	60f0      	str	r0, [r6, #12]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e4      	bne.n	8007972 <_Balloc+0x2e>
 80079a8:	2000      	movs	r0, #0
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	6802      	ldr	r2, [r0, #0]
 80079ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079b2:	2300      	movs	r3, #0
 80079b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079b8:	e7f7      	b.n	80079aa <_Balloc+0x66>
 80079ba:	bf00      	nop
 80079bc:	080092a1 	.word	0x080092a1
 80079c0:	08009328 	.word	0x08009328

080079c4 <_Bfree>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079c8:	4605      	mov	r5, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	b976      	cbnz	r6, 80079ec <_Bfree+0x28>
 80079ce:	2010      	movs	r0, #16
 80079d0:	f7ff ff94 	bl	80078fc <malloc>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6268      	str	r0, [r5, #36]	; 0x24
 80079d8:	b920      	cbnz	r0, 80079e4 <_Bfree+0x20>
 80079da:	218a      	movs	r1, #138	; 0x8a
 80079dc:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <_Bfree+0x3c>)
 80079de:	4809      	ldr	r0, [pc, #36]	; (8007a04 <_Bfree+0x40>)
 80079e0:	f000 fd52 	bl	8008488 <__assert_func>
 80079e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079e8:	6006      	str	r6, [r0, #0]
 80079ea:	60c6      	str	r6, [r0, #12]
 80079ec:	b13c      	cbz	r4, 80079fe <_Bfree+0x3a>
 80079ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079f0:	6862      	ldr	r2, [r4, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079f8:	6021      	str	r1, [r4, #0]
 80079fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	080092a1 	.word	0x080092a1
 8007a04:	08009328 	.word	0x08009328

08007a08 <__multadd>:
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2300      	movs	r3, #0
 8007a12:	690e      	ldr	r6, [r1, #16]
 8007a14:	4607      	mov	r7, r0
 8007a16:	f101 0014 	add.w	r0, r1, #20
 8007a1a:	6805      	ldr	r5, [r0, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2a9      	uxth	r1, r5
 8007a20:	fb02 8101 	mla	r1, r2, r1, r8
 8007a24:	0c2d      	lsrs	r5, r5, #16
 8007a26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a2a:	fb02 c505 	mla	r5, r2, r5, ip
 8007a2e:	b289      	uxth	r1, r1
 8007a30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a34:	429e      	cmp	r6, r3
 8007a36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a3a:	f840 1b04 	str.w	r1, [r0], #4
 8007a3e:	dcec      	bgt.n	8007a1a <__multadd+0x12>
 8007a40:	f1b8 0f00 	cmp.w	r8, #0
 8007a44:	d022      	beq.n	8007a8c <__multadd+0x84>
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	42b3      	cmp	r3, r6
 8007a4a:	dc19      	bgt.n	8007a80 <__multadd+0x78>
 8007a4c:	6861      	ldr	r1, [r4, #4]
 8007a4e:	4638      	mov	r0, r7
 8007a50:	3101      	adds	r1, #1
 8007a52:	f7ff ff77 	bl	8007944 <_Balloc>
 8007a56:	4605      	mov	r5, r0
 8007a58:	b928      	cbnz	r0, 8007a66 <__multadd+0x5e>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	21b5      	movs	r1, #181	; 0xb5
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <__multadd+0x8c>)
 8007a60:	480d      	ldr	r0, [pc, #52]	; (8007a98 <__multadd+0x90>)
 8007a62:	f000 fd11 	bl	8008488 <__assert_func>
 8007a66:	6922      	ldr	r2, [r4, #16]
 8007a68:	f104 010c 	add.w	r1, r4, #12
 8007a6c:	3202      	adds	r2, #2
 8007a6e:	0092      	lsls	r2, r2, #2
 8007a70:	300c      	adds	r0, #12
 8007a72:	f7ff ff59 	bl	8007928 <memcpy>
 8007a76:	4621      	mov	r1, r4
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ffa3 	bl	80079c4 <_Bfree>
 8007a7e:	462c      	mov	r4, r5
 8007a80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a84:	3601      	adds	r6, #1
 8007a86:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a8a:	6126      	str	r6, [r4, #16]
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a92:	bf00      	nop
 8007a94:	08009317 	.word	0x08009317
 8007a98:	08009328 	.word	0x08009328

08007a9c <__hi0bits>:
 8007a9c:	0c02      	lsrs	r2, r0, #16
 8007a9e:	0412      	lsls	r2, r2, #16
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	b9ca      	cbnz	r2, 8007ad8 <__hi0bits+0x3c>
 8007aa4:	0403      	lsls	r3, r0, #16
 8007aa6:	2010      	movs	r0, #16
 8007aa8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007aac:	bf04      	itt	eq
 8007aae:	021b      	lsleq	r3, r3, #8
 8007ab0:	3008      	addeq	r0, #8
 8007ab2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ab6:	bf04      	itt	eq
 8007ab8:	011b      	lsleq	r3, r3, #4
 8007aba:	3004      	addeq	r0, #4
 8007abc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ac0:	bf04      	itt	eq
 8007ac2:	009b      	lsleq	r3, r3, #2
 8007ac4:	3002      	addeq	r0, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	db05      	blt.n	8007ad6 <__hi0bits+0x3a>
 8007aca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ace:	f100 0001 	add.w	r0, r0, #1
 8007ad2:	bf08      	it	eq
 8007ad4:	2020      	moveq	r0, #32
 8007ad6:	4770      	bx	lr
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e7e5      	b.n	8007aa8 <__hi0bits+0xc>

08007adc <__lo0bits>:
 8007adc:	6803      	ldr	r3, [r0, #0]
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f013 0007 	ands.w	r0, r3, #7
 8007ae4:	d00b      	beq.n	8007afe <__lo0bits+0x22>
 8007ae6:	07d9      	lsls	r1, r3, #31
 8007ae8:	d422      	bmi.n	8007b30 <__lo0bits+0x54>
 8007aea:	0798      	lsls	r0, r3, #30
 8007aec:	bf49      	itett	mi
 8007aee:	085b      	lsrmi	r3, r3, #1
 8007af0:	089b      	lsrpl	r3, r3, #2
 8007af2:	2001      	movmi	r0, #1
 8007af4:	6013      	strmi	r3, [r2, #0]
 8007af6:	bf5c      	itt	pl
 8007af8:	2002      	movpl	r0, #2
 8007afa:	6013      	strpl	r3, [r2, #0]
 8007afc:	4770      	bx	lr
 8007afe:	b299      	uxth	r1, r3
 8007b00:	b909      	cbnz	r1, 8007b06 <__lo0bits+0x2a>
 8007b02:	2010      	movs	r0, #16
 8007b04:	0c1b      	lsrs	r3, r3, #16
 8007b06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b0a:	bf04      	itt	eq
 8007b0c:	0a1b      	lsreq	r3, r3, #8
 8007b0e:	3008      	addeq	r0, #8
 8007b10:	0719      	lsls	r1, r3, #28
 8007b12:	bf04      	itt	eq
 8007b14:	091b      	lsreq	r3, r3, #4
 8007b16:	3004      	addeq	r0, #4
 8007b18:	0799      	lsls	r1, r3, #30
 8007b1a:	bf04      	itt	eq
 8007b1c:	089b      	lsreq	r3, r3, #2
 8007b1e:	3002      	addeq	r0, #2
 8007b20:	07d9      	lsls	r1, r3, #31
 8007b22:	d403      	bmi.n	8007b2c <__lo0bits+0x50>
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	f100 0001 	add.w	r0, r0, #1
 8007b2a:	d003      	beq.n	8007b34 <__lo0bits+0x58>
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4770      	bx	lr
 8007b30:	2000      	movs	r0, #0
 8007b32:	4770      	bx	lr
 8007b34:	2020      	movs	r0, #32
 8007b36:	4770      	bx	lr

08007b38 <__i2b>:
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	f7ff ff01 	bl	8007944 <_Balloc>
 8007b42:	4602      	mov	r2, r0
 8007b44:	b928      	cbnz	r0, 8007b52 <__i2b+0x1a>
 8007b46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <__i2b+0x24>)
 8007b4c:	4804      	ldr	r0, [pc, #16]	; (8007b60 <__i2b+0x28>)
 8007b4e:	f000 fc9b 	bl	8008488 <__assert_func>
 8007b52:	2301      	movs	r3, #1
 8007b54:	6144      	str	r4, [r0, #20]
 8007b56:	6103      	str	r3, [r0, #16]
 8007b58:	bd10      	pop	{r4, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08009317 	.word	0x08009317
 8007b60:	08009328 	.word	0x08009328

08007b64 <__multiply>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	4614      	mov	r4, r2
 8007b6a:	690a      	ldr	r2, [r1, #16]
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	460d      	mov	r5, r1
 8007b70:	429a      	cmp	r2, r3
 8007b72:	bfbe      	ittt	lt
 8007b74:	460b      	movlt	r3, r1
 8007b76:	4625      	movlt	r5, r4
 8007b78:	461c      	movlt	r4, r3
 8007b7a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b82:	68ab      	ldr	r3, [r5, #8]
 8007b84:	6869      	ldr	r1, [r5, #4]
 8007b86:	eb0a 0709 	add.w	r7, sl, r9
 8007b8a:	42bb      	cmp	r3, r7
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	bfb8      	it	lt
 8007b90:	3101      	addlt	r1, #1
 8007b92:	f7ff fed7 	bl	8007944 <_Balloc>
 8007b96:	b930      	cbnz	r0, 8007ba6 <__multiply+0x42>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	f240 115d 	movw	r1, #349	; 0x15d
 8007b9e:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <__multiply+0x140>)
 8007ba0:	4841      	ldr	r0, [pc, #260]	; (8007ca8 <__multiply+0x144>)
 8007ba2:	f000 fc71 	bl	8008488 <__assert_func>
 8007ba6:	f100 0614 	add.w	r6, r0, #20
 8007baa:	4633      	mov	r3, r6
 8007bac:	2200      	movs	r2, #0
 8007bae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007bb2:	4543      	cmp	r3, r8
 8007bb4:	d31e      	bcc.n	8007bf4 <__multiply+0x90>
 8007bb6:	f105 0c14 	add.w	ip, r5, #20
 8007bba:	f104 0314 	add.w	r3, r4, #20
 8007bbe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007bc2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007bc6:	9202      	str	r2, [sp, #8]
 8007bc8:	ebac 0205 	sub.w	r2, ip, r5
 8007bcc:	3a15      	subs	r2, #21
 8007bce:	f022 0203 	bic.w	r2, r2, #3
 8007bd2:	3204      	adds	r2, #4
 8007bd4:	f105 0115 	add.w	r1, r5, #21
 8007bd8:	458c      	cmp	ip, r1
 8007bda:	bf38      	it	cc
 8007bdc:	2204      	movcc	r2, #4
 8007bde:	9201      	str	r2, [sp, #4]
 8007be0:	9a02      	ldr	r2, [sp, #8]
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d808      	bhi.n	8007bfa <__multiply+0x96>
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	dc55      	bgt.n	8007c98 <__multiply+0x134>
 8007bec:	6107      	str	r7, [r0, #16]
 8007bee:	b005      	add	sp, #20
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf4:	f843 2b04 	str.w	r2, [r3], #4
 8007bf8:	e7db      	b.n	8007bb2 <__multiply+0x4e>
 8007bfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bfe:	f1ba 0f00 	cmp.w	sl, #0
 8007c02:	d020      	beq.n	8007c46 <__multiply+0xe2>
 8007c04:	46b1      	mov	r9, r6
 8007c06:	2200      	movs	r2, #0
 8007c08:	f105 0e14 	add.w	lr, r5, #20
 8007c0c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c10:	f8d9 b000 	ldr.w	fp, [r9]
 8007c14:	b2a1      	uxth	r1, r4
 8007c16:	fa1f fb8b 	uxth.w	fp, fp
 8007c1a:	fb0a b101 	mla	r1, sl, r1, fp
 8007c1e:	4411      	add	r1, r2
 8007c20:	f8d9 2000 	ldr.w	r2, [r9]
 8007c24:	0c24      	lsrs	r4, r4, #16
 8007c26:	0c12      	lsrs	r2, r2, #16
 8007c28:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c2c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c30:	b289      	uxth	r1, r1
 8007c32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c36:	45f4      	cmp	ip, lr
 8007c38:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c3c:	f849 1b04 	str.w	r1, [r9], #4
 8007c40:	d8e4      	bhi.n	8007c0c <__multiply+0xa8>
 8007c42:	9901      	ldr	r1, [sp, #4]
 8007c44:	5072      	str	r2, [r6, r1]
 8007c46:	9a03      	ldr	r2, [sp, #12]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c4e:	f1b9 0f00 	cmp.w	r9, #0
 8007c52:	d01f      	beq.n	8007c94 <__multiply+0x130>
 8007c54:	46b6      	mov	lr, r6
 8007c56:	f04f 0a00 	mov.w	sl, #0
 8007c5a:	6834      	ldr	r4, [r6, #0]
 8007c5c:	f105 0114 	add.w	r1, r5, #20
 8007c60:	880a      	ldrh	r2, [r1, #0]
 8007c62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c66:	b2a4      	uxth	r4, r4
 8007c68:	fb09 b202 	mla	r2, r9, r2, fp
 8007c6c:	4492      	add	sl, r2
 8007c6e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c72:	f84e 4b04 	str.w	r4, [lr], #4
 8007c76:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c7a:	f8be 2000 	ldrh.w	r2, [lr]
 8007c7e:	0c24      	lsrs	r4, r4, #16
 8007c80:	fb09 2404 	mla	r4, r9, r4, r2
 8007c84:	458c      	cmp	ip, r1
 8007c86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c8e:	d8e7      	bhi.n	8007c60 <__multiply+0xfc>
 8007c90:	9a01      	ldr	r2, [sp, #4]
 8007c92:	50b4      	str	r4, [r6, r2]
 8007c94:	3604      	adds	r6, #4
 8007c96:	e7a3      	b.n	8007be0 <__multiply+0x7c>
 8007c98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1a5      	bne.n	8007bec <__multiply+0x88>
 8007ca0:	3f01      	subs	r7, #1
 8007ca2:	e7a1      	b.n	8007be8 <__multiply+0x84>
 8007ca4:	08009317 	.word	0x08009317
 8007ca8:	08009328 	.word	0x08009328

08007cac <__pow5mult>:
 8007cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	4615      	mov	r5, r2
 8007cb2:	f012 0203 	ands.w	r2, r2, #3
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	460f      	mov	r7, r1
 8007cba:	d007      	beq.n	8007ccc <__pow5mult+0x20>
 8007cbc:	4c25      	ldr	r4, [pc, #148]	; (8007d54 <__pow5mult+0xa8>)
 8007cbe:	3a01      	subs	r2, #1
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cc6:	f7ff fe9f 	bl	8007a08 <__multadd>
 8007cca:	4607      	mov	r7, r0
 8007ccc:	10ad      	asrs	r5, r5, #2
 8007cce:	d03d      	beq.n	8007d4c <__pow5mult+0xa0>
 8007cd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cd2:	b97c      	cbnz	r4, 8007cf4 <__pow5mult+0x48>
 8007cd4:	2010      	movs	r0, #16
 8007cd6:	f7ff fe11 	bl	80078fc <malloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6270      	str	r0, [r6, #36]	; 0x24
 8007cde:	b928      	cbnz	r0, 8007cec <__pow5mult+0x40>
 8007ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <__pow5mult+0xac>)
 8007ce6:	481d      	ldr	r0, [pc, #116]	; (8007d5c <__pow5mult+0xb0>)
 8007ce8:	f000 fbce 	bl	8008488 <__assert_func>
 8007cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cf0:	6004      	str	r4, [r0, #0]
 8007cf2:	60c4      	str	r4, [r0, #12]
 8007cf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cfc:	b94c      	cbnz	r4, 8007d12 <__pow5mult+0x66>
 8007cfe:	f240 2171 	movw	r1, #625	; 0x271
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ff18 	bl	8007b38 <__i2b>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d10:	6003      	str	r3, [r0, #0]
 8007d12:	f04f 0900 	mov.w	r9, #0
 8007d16:	07eb      	lsls	r3, r5, #31
 8007d18:	d50a      	bpl.n	8007d30 <__pow5mult+0x84>
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f7ff ff20 	bl	8007b64 <__multiply>
 8007d24:	4680      	mov	r8, r0
 8007d26:	4639      	mov	r1, r7
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff fe4b 	bl	80079c4 <_Bfree>
 8007d2e:	4647      	mov	r7, r8
 8007d30:	106d      	asrs	r5, r5, #1
 8007d32:	d00b      	beq.n	8007d4c <__pow5mult+0xa0>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	b938      	cbnz	r0, 8007d48 <__pow5mult+0x9c>
 8007d38:	4622      	mov	r2, r4
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff ff11 	bl	8007b64 <__multiply>
 8007d42:	6020      	str	r0, [r4, #0]
 8007d44:	f8c0 9000 	str.w	r9, [r0]
 8007d48:	4604      	mov	r4, r0
 8007d4a:	e7e4      	b.n	8007d16 <__pow5mult+0x6a>
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d52:	bf00      	nop
 8007d54:	08009478 	.word	0x08009478
 8007d58:	080092a1 	.word	0x080092a1
 8007d5c:	08009328 	.word	0x08009328

08007d60 <__lshift>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	460c      	mov	r4, r1
 8007d66:	4607      	mov	r7, r0
 8007d68:	4691      	mov	r9, r2
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6849      	ldr	r1, [r1, #4]
 8007d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d78:	f108 0601 	add.w	r6, r8, #1
 8007d7c:	42b3      	cmp	r3, r6
 8007d7e:	db0b      	blt.n	8007d98 <__lshift+0x38>
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff fddf 	bl	8007944 <_Balloc>
 8007d86:	4605      	mov	r5, r0
 8007d88:	b948      	cbnz	r0, 8007d9e <__lshift+0x3e>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <__lshift+0xd0>)
 8007d92:	4828      	ldr	r0, [pc, #160]	; (8007e34 <__lshift+0xd4>)
 8007d94:	f000 fb78 	bl	8008488 <__assert_func>
 8007d98:	3101      	adds	r1, #1
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	e7ee      	b.n	8007d7c <__lshift+0x1c>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f100 0114 	add.w	r1, r0, #20
 8007da4:	f100 0210 	add.w	r2, r0, #16
 8007da8:	4618      	mov	r0, r3
 8007daa:	4553      	cmp	r3, sl
 8007dac:	db33      	blt.n	8007e16 <__lshift+0xb6>
 8007dae:	6920      	ldr	r0, [r4, #16]
 8007db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007db4:	f104 0314 	add.w	r3, r4, #20
 8007db8:	f019 091f 	ands.w	r9, r9, #31
 8007dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dc4:	d02b      	beq.n	8007e1e <__lshift+0xbe>
 8007dc6:	468a      	mov	sl, r1
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f1c9 0e20 	rsb	lr, r9, #32
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	fa00 f009 	lsl.w	r0, r0, r9
 8007dd4:	4302      	orrs	r2, r0
 8007dd6:	f84a 2b04 	str.w	r2, [sl], #4
 8007dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dde:	459c      	cmp	ip, r3
 8007de0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007de4:	d8f3      	bhi.n	8007dce <__lshift+0x6e>
 8007de6:	ebac 0304 	sub.w	r3, ip, r4
 8007dea:	3b15      	subs	r3, #21
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	3304      	adds	r3, #4
 8007df2:	f104 0015 	add.w	r0, r4, #21
 8007df6:	4584      	cmp	ip, r0
 8007df8:	bf38      	it	cc
 8007dfa:	2304      	movcc	r3, #4
 8007dfc:	50ca      	str	r2, [r1, r3]
 8007dfe:	b10a      	cbz	r2, 8007e04 <__lshift+0xa4>
 8007e00:	f108 0602 	add.w	r6, r8, #2
 8007e04:	3e01      	subs	r6, #1
 8007e06:	4638      	mov	r0, r7
 8007e08:	4621      	mov	r1, r4
 8007e0a:	612e      	str	r6, [r5, #16]
 8007e0c:	f7ff fdda 	bl	80079c4 <_Bfree>
 8007e10:	4628      	mov	r0, r5
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	e7c5      	b.n	8007daa <__lshift+0x4a>
 8007e1e:	3904      	subs	r1, #4
 8007e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e24:	459c      	cmp	ip, r3
 8007e26:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e2a:	d8f9      	bhi.n	8007e20 <__lshift+0xc0>
 8007e2c:	e7ea      	b.n	8007e04 <__lshift+0xa4>
 8007e2e:	bf00      	nop
 8007e30:	08009317 	.word	0x08009317
 8007e34:	08009328 	.word	0x08009328

08007e38 <__mcmp>:
 8007e38:	4603      	mov	r3, r0
 8007e3a:	690a      	ldr	r2, [r1, #16]
 8007e3c:	6900      	ldr	r0, [r0, #16]
 8007e3e:	b530      	push	{r4, r5, lr}
 8007e40:	1a80      	subs	r0, r0, r2
 8007e42:	d10d      	bne.n	8007e60 <__mcmp+0x28>
 8007e44:	3314      	adds	r3, #20
 8007e46:	3114      	adds	r1, #20
 8007e48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e58:	4295      	cmp	r5, r2
 8007e5a:	d002      	beq.n	8007e62 <__mcmp+0x2a>
 8007e5c:	d304      	bcc.n	8007e68 <__mcmp+0x30>
 8007e5e:	2001      	movs	r0, #1
 8007e60:	bd30      	pop	{r4, r5, pc}
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	d3f4      	bcc.n	8007e50 <__mcmp+0x18>
 8007e66:	e7fb      	b.n	8007e60 <__mcmp+0x28>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e7f8      	b.n	8007e60 <__mcmp+0x28>
	...

08007e70 <__mdiff>:
 8007e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	460c      	mov	r4, r1
 8007e76:	4606      	mov	r6, r0
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4692      	mov	sl, r2
 8007e7e:	f7ff ffdb 	bl	8007e38 <__mcmp>
 8007e82:	1e05      	subs	r5, r0, #0
 8007e84:	d111      	bne.n	8007eaa <__mdiff+0x3a>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff fd5b 	bl	8007944 <_Balloc>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	b928      	cbnz	r0, 8007e9e <__mdiff+0x2e>
 8007e92:	f240 2132 	movw	r1, #562	; 0x232
 8007e96:	4b3c      	ldr	r3, [pc, #240]	; (8007f88 <__mdiff+0x118>)
 8007e98:	483c      	ldr	r0, [pc, #240]	; (8007f8c <__mdiff+0x11c>)
 8007e9a:	f000 faf5 	bl	8008488 <__assert_func>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eaa:	bfa4      	itt	ge
 8007eac:	4653      	movge	r3, sl
 8007eae:	46a2      	movge	sl, r4
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007eb6:	bfa6      	itte	ge
 8007eb8:	461c      	movge	r4, r3
 8007eba:	2500      	movge	r5, #0
 8007ebc:	2501      	movlt	r5, #1
 8007ebe:	f7ff fd41 	bl	8007944 <_Balloc>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	b918      	cbnz	r0, 8007ece <__mdiff+0x5e>
 8007ec6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007eca:	4b2f      	ldr	r3, [pc, #188]	; (8007f88 <__mdiff+0x118>)
 8007ecc:	e7e4      	b.n	8007e98 <__mdiff+0x28>
 8007ece:	f100 0814 	add.w	r8, r0, #20
 8007ed2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007ed6:	60c5      	str	r5, [r0, #12]
 8007ed8:	f04f 0c00 	mov.w	ip, #0
 8007edc:	f10a 0514 	add.w	r5, sl, #20
 8007ee0:	f10a 0010 	add.w	r0, sl, #16
 8007ee4:	46c2      	mov	sl, r8
 8007ee6:	6926      	ldr	r6, [r4, #16]
 8007ee8:	f104 0914 	add.w	r9, r4, #20
 8007eec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ef4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007ef8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007efc:	fa1f f18b 	uxth.w	r1, fp
 8007f00:	4461      	add	r1, ip
 8007f02:	fa1f fc83 	uxth.w	ip, r3
 8007f06:	0c1b      	lsrs	r3, r3, #16
 8007f08:	eba1 010c 	sub.w	r1, r1, ip
 8007f0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f14:	b289      	uxth	r1, r1
 8007f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007f1a:	454e      	cmp	r6, r9
 8007f1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007f20:	f84a 3b04 	str.w	r3, [sl], #4
 8007f24:	d8e6      	bhi.n	8007ef4 <__mdiff+0x84>
 8007f26:	1b33      	subs	r3, r6, r4
 8007f28:	3b15      	subs	r3, #21
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	3415      	adds	r4, #21
 8007f30:	3304      	adds	r3, #4
 8007f32:	42a6      	cmp	r6, r4
 8007f34:	bf38      	it	cc
 8007f36:	2304      	movcc	r3, #4
 8007f38:	441d      	add	r5, r3
 8007f3a:	4443      	add	r3, r8
 8007f3c:	461e      	mov	r6, r3
 8007f3e:	462c      	mov	r4, r5
 8007f40:	4574      	cmp	r4, lr
 8007f42:	d30e      	bcc.n	8007f62 <__mdiff+0xf2>
 8007f44:	f10e 0103 	add.w	r1, lr, #3
 8007f48:	1b49      	subs	r1, r1, r5
 8007f4a:	f021 0103 	bic.w	r1, r1, #3
 8007f4e:	3d03      	subs	r5, #3
 8007f50:	45ae      	cmp	lr, r5
 8007f52:	bf38      	it	cc
 8007f54:	2100      	movcc	r1, #0
 8007f56:	4419      	add	r1, r3
 8007f58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007f5c:	b18b      	cbz	r3, 8007f82 <__mdiff+0x112>
 8007f5e:	6117      	str	r7, [r2, #16]
 8007f60:	e7a0      	b.n	8007ea4 <__mdiff+0x34>
 8007f62:	f854 8b04 	ldr.w	r8, [r4], #4
 8007f66:	fa1f f188 	uxth.w	r1, r8
 8007f6a:	4461      	add	r1, ip
 8007f6c:	1408      	asrs	r0, r1, #16
 8007f6e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007f72:	b289      	uxth	r1, r1
 8007f74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f7c:	f846 1b04 	str.w	r1, [r6], #4
 8007f80:	e7de      	b.n	8007f40 <__mdiff+0xd0>
 8007f82:	3f01      	subs	r7, #1
 8007f84:	e7e8      	b.n	8007f58 <__mdiff+0xe8>
 8007f86:	bf00      	nop
 8007f88:	08009317 	.word	0x08009317
 8007f8c:	08009328 	.word	0x08009328

08007f90 <__d2b>:
 8007f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f94:	2101      	movs	r1, #1
 8007f96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f9a:	4690      	mov	r8, r2
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	f7ff fcd1 	bl	8007944 <_Balloc>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	b930      	cbnz	r0, 8007fb4 <__d2b+0x24>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8007fac:	4b24      	ldr	r3, [pc, #144]	; (8008040 <__d2b+0xb0>)
 8007fae:	4825      	ldr	r0, [pc, #148]	; (8008044 <__d2b+0xb4>)
 8007fb0:	f000 fa6a 	bl	8008488 <__assert_func>
 8007fb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007fb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007fbc:	bb2d      	cbnz	r5, 800800a <__d2b+0x7a>
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8007fc4:	d026      	beq.n	8008014 <__d2b+0x84>
 8007fc6:	4668      	mov	r0, sp
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	f7ff fd87 	bl	8007adc <__lo0bits>
 8007fce:	9900      	ldr	r1, [sp, #0]
 8007fd0:	b1f0      	cbz	r0, 8008010 <__d2b+0x80>
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	f1c0 0320 	rsb	r3, r0, #32
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	40c2      	lsrs	r2, r0
 8007fe0:	6163      	str	r3, [r4, #20]
 8007fe2:	9201      	str	r2, [sp, #4]
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2102      	movne	r1, #2
 8007fec:	2101      	moveq	r1, #1
 8007fee:	61a3      	str	r3, [r4, #24]
 8007ff0:	6121      	str	r1, [r4, #16]
 8007ff2:	b1c5      	cbz	r5, 8008026 <__d2b+0x96>
 8007ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ff8:	4405      	add	r5, r0
 8007ffa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ffe:	603d      	str	r5, [r7, #0]
 8008000:	6030      	str	r0, [r6, #0]
 8008002:	4620      	mov	r0, r4
 8008004:	b002      	add	sp, #8
 8008006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800800e:	e7d6      	b.n	8007fbe <__d2b+0x2e>
 8008010:	6161      	str	r1, [r4, #20]
 8008012:	e7e7      	b.n	8007fe4 <__d2b+0x54>
 8008014:	a801      	add	r0, sp, #4
 8008016:	f7ff fd61 	bl	8007adc <__lo0bits>
 800801a:	2101      	movs	r1, #1
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	6121      	str	r1, [r4, #16]
 8008020:	6163      	str	r3, [r4, #20]
 8008022:	3020      	adds	r0, #32
 8008024:	e7e5      	b.n	8007ff2 <__d2b+0x62>
 8008026:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800802a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800802e:	6038      	str	r0, [r7, #0]
 8008030:	6918      	ldr	r0, [r3, #16]
 8008032:	f7ff fd33 	bl	8007a9c <__hi0bits>
 8008036:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800803a:	6031      	str	r1, [r6, #0]
 800803c:	e7e1      	b.n	8008002 <__d2b+0x72>
 800803e:	bf00      	nop
 8008040:	08009317 	.word	0x08009317
 8008044:	08009328 	.word	0x08009328

08008048 <_calloc_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	fb02 f501 	mul.w	r5, r2, r1
 800804e:	4629      	mov	r1, r5
 8008050:	f000 f854 	bl	80080fc <_malloc_r>
 8008054:	4604      	mov	r4, r0
 8008056:	b118      	cbz	r0, 8008060 <_calloc_r+0x18>
 8008058:	462a      	mov	r2, r5
 800805a:	2100      	movs	r1, #0
 800805c:	f7fe f944 	bl	80062e8 <memset>
 8008060:	4620      	mov	r0, r4
 8008062:	bd38      	pop	{r3, r4, r5, pc}

08008064 <_free_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4605      	mov	r5, r0
 8008068:	2900      	cmp	r1, #0
 800806a:	d043      	beq.n	80080f4 <_free_r+0x90>
 800806c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008070:	1f0c      	subs	r4, r1, #4
 8008072:	2b00      	cmp	r3, #0
 8008074:	bfb8      	it	lt
 8008076:	18e4      	addlt	r4, r4, r3
 8008078:	f000 fa62 	bl	8008540 <__malloc_lock>
 800807c:	4a1e      	ldr	r2, [pc, #120]	; (80080f8 <_free_r+0x94>)
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	4610      	mov	r0, r2
 8008082:	b933      	cbnz	r3, 8008092 <_free_r+0x2e>
 8008084:	6063      	str	r3, [r4, #4]
 8008086:	6014      	str	r4, [r2, #0]
 8008088:	4628      	mov	r0, r5
 800808a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800808e:	f000 ba5d 	b.w	800854c <__malloc_unlock>
 8008092:	42a3      	cmp	r3, r4
 8008094:	d90a      	bls.n	80080ac <_free_r+0x48>
 8008096:	6821      	ldr	r1, [r4, #0]
 8008098:	1862      	adds	r2, r4, r1
 800809a:	4293      	cmp	r3, r2
 800809c:	bf01      	itttt	eq
 800809e:	681a      	ldreq	r2, [r3, #0]
 80080a0:	685b      	ldreq	r3, [r3, #4]
 80080a2:	1852      	addeq	r2, r2, r1
 80080a4:	6022      	streq	r2, [r4, #0]
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6004      	str	r4, [r0, #0]
 80080aa:	e7ed      	b.n	8008088 <_free_r+0x24>
 80080ac:	461a      	mov	r2, r3
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	b10b      	cbz	r3, 80080b6 <_free_r+0x52>
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	d9fa      	bls.n	80080ac <_free_r+0x48>
 80080b6:	6811      	ldr	r1, [r2, #0]
 80080b8:	1850      	adds	r0, r2, r1
 80080ba:	42a0      	cmp	r0, r4
 80080bc:	d10b      	bne.n	80080d6 <_free_r+0x72>
 80080be:	6820      	ldr	r0, [r4, #0]
 80080c0:	4401      	add	r1, r0
 80080c2:	1850      	adds	r0, r2, r1
 80080c4:	4283      	cmp	r3, r0
 80080c6:	6011      	str	r1, [r2, #0]
 80080c8:	d1de      	bne.n	8008088 <_free_r+0x24>
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4401      	add	r1, r0
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	6053      	str	r3, [r2, #4]
 80080d4:	e7d8      	b.n	8008088 <_free_r+0x24>
 80080d6:	d902      	bls.n	80080de <_free_r+0x7a>
 80080d8:	230c      	movs	r3, #12
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	e7d4      	b.n	8008088 <_free_r+0x24>
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	1821      	adds	r1, r4, r0
 80080e2:	428b      	cmp	r3, r1
 80080e4:	bf01      	itttt	eq
 80080e6:	6819      	ldreq	r1, [r3, #0]
 80080e8:	685b      	ldreq	r3, [r3, #4]
 80080ea:	1809      	addeq	r1, r1, r0
 80080ec:	6021      	streq	r1, [r4, #0]
 80080ee:	6063      	str	r3, [r4, #4]
 80080f0:	6054      	str	r4, [r2, #4]
 80080f2:	e7c9      	b.n	8008088 <_free_r+0x24>
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	20000248 	.word	0x20000248

080080fc <_malloc_r>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	1ccd      	adds	r5, r1, #3
 8008100:	f025 0503 	bic.w	r5, r5, #3
 8008104:	3508      	adds	r5, #8
 8008106:	2d0c      	cmp	r5, #12
 8008108:	bf38      	it	cc
 800810a:	250c      	movcc	r5, #12
 800810c:	2d00      	cmp	r5, #0
 800810e:	4606      	mov	r6, r0
 8008110:	db01      	blt.n	8008116 <_malloc_r+0x1a>
 8008112:	42a9      	cmp	r1, r5
 8008114:	d903      	bls.n	800811e <_malloc_r+0x22>
 8008116:	230c      	movs	r3, #12
 8008118:	6033      	str	r3, [r6, #0]
 800811a:	2000      	movs	r0, #0
 800811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811e:	f000 fa0f 	bl	8008540 <__malloc_lock>
 8008122:	4921      	ldr	r1, [pc, #132]	; (80081a8 <_malloc_r+0xac>)
 8008124:	680a      	ldr	r2, [r1, #0]
 8008126:	4614      	mov	r4, r2
 8008128:	b99c      	cbnz	r4, 8008152 <_malloc_r+0x56>
 800812a:	4f20      	ldr	r7, [pc, #128]	; (80081ac <_malloc_r+0xb0>)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	b923      	cbnz	r3, 800813a <_malloc_r+0x3e>
 8008130:	4621      	mov	r1, r4
 8008132:	4630      	mov	r0, r6
 8008134:	f000 f998 	bl	8008468 <_sbrk_r>
 8008138:	6038      	str	r0, [r7, #0]
 800813a:	4629      	mov	r1, r5
 800813c:	4630      	mov	r0, r6
 800813e:	f000 f993 	bl	8008468 <_sbrk_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d123      	bne.n	800818e <_malloc_r+0x92>
 8008146:	230c      	movs	r3, #12
 8008148:	4630      	mov	r0, r6
 800814a:	6033      	str	r3, [r6, #0]
 800814c:	f000 f9fe 	bl	800854c <__malloc_unlock>
 8008150:	e7e3      	b.n	800811a <_malloc_r+0x1e>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	1b5b      	subs	r3, r3, r5
 8008156:	d417      	bmi.n	8008188 <_malloc_r+0x8c>
 8008158:	2b0b      	cmp	r3, #11
 800815a:	d903      	bls.n	8008164 <_malloc_r+0x68>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	441c      	add	r4, r3
 8008160:	6025      	str	r5, [r4, #0]
 8008162:	e004      	b.n	800816e <_malloc_r+0x72>
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	42a2      	cmp	r2, r4
 8008168:	bf0c      	ite	eq
 800816a:	600b      	streq	r3, [r1, #0]
 800816c:	6053      	strne	r3, [r2, #4]
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f9ec 	bl	800854c <__malloc_unlock>
 8008174:	f104 000b 	add.w	r0, r4, #11
 8008178:	1d23      	adds	r3, r4, #4
 800817a:	f020 0007 	bic.w	r0, r0, #7
 800817e:	1ac2      	subs	r2, r0, r3
 8008180:	d0cc      	beq.n	800811c <_malloc_r+0x20>
 8008182:	1a1b      	subs	r3, r3, r0
 8008184:	50a3      	str	r3, [r4, r2]
 8008186:	e7c9      	b.n	800811c <_malloc_r+0x20>
 8008188:	4622      	mov	r2, r4
 800818a:	6864      	ldr	r4, [r4, #4]
 800818c:	e7cc      	b.n	8008128 <_malloc_r+0x2c>
 800818e:	1cc4      	adds	r4, r0, #3
 8008190:	f024 0403 	bic.w	r4, r4, #3
 8008194:	42a0      	cmp	r0, r4
 8008196:	d0e3      	beq.n	8008160 <_malloc_r+0x64>
 8008198:	1a21      	subs	r1, r4, r0
 800819a:	4630      	mov	r0, r6
 800819c:	f000 f964 	bl	8008468 <_sbrk_r>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d1dd      	bne.n	8008160 <_malloc_r+0x64>
 80081a4:	e7cf      	b.n	8008146 <_malloc_r+0x4a>
 80081a6:	bf00      	nop
 80081a8:	20000248 	.word	0x20000248
 80081ac:	2000024c 	.word	0x2000024c

080081b0 <__ssputs_r>:
 80081b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	688e      	ldr	r6, [r1, #8]
 80081b6:	4682      	mov	sl, r0
 80081b8:	429e      	cmp	r6, r3
 80081ba:	460c      	mov	r4, r1
 80081bc:	4690      	mov	r8, r2
 80081be:	461f      	mov	r7, r3
 80081c0:	d838      	bhi.n	8008234 <__ssputs_r+0x84>
 80081c2:	898a      	ldrh	r2, [r1, #12]
 80081c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081c8:	d032      	beq.n	8008230 <__ssputs_r+0x80>
 80081ca:	6825      	ldr	r5, [r4, #0]
 80081cc:	6909      	ldr	r1, [r1, #16]
 80081ce:	3301      	adds	r3, #1
 80081d0:	eba5 0901 	sub.w	r9, r5, r1
 80081d4:	6965      	ldr	r5, [r4, #20]
 80081d6:	444b      	add	r3, r9
 80081d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081e0:	106d      	asrs	r5, r5, #1
 80081e2:	429d      	cmp	r5, r3
 80081e4:	bf38      	it	cc
 80081e6:	461d      	movcc	r5, r3
 80081e8:	0553      	lsls	r3, r2, #21
 80081ea:	d531      	bpl.n	8008250 <__ssputs_r+0xa0>
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7ff ff85 	bl	80080fc <_malloc_r>
 80081f2:	4606      	mov	r6, r0
 80081f4:	b950      	cbnz	r0, 800820c <__ssputs_r+0x5c>
 80081f6:	230c      	movs	r3, #12
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	f8ca 3000 	str.w	r3, [sl]
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820c:	464a      	mov	r2, r9
 800820e:	6921      	ldr	r1, [r4, #16]
 8008210:	f7ff fb8a 	bl	8007928 <memcpy>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800821a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	6126      	str	r6, [r4, #16]
 8008222:	444e      	add	r6, r9
 8008224:	6026      	str	r6, [r4, #0]
 8008226:	463e      	mov	r6, r7
 8008228:	6165      	str	r5, [r4, #20]
 800822a:	eba5 0509 	sub.w	r5, r5, r9
 800822e:	60a5      	str	r5, [r4, #8]
 8008230:	42be      	cmp	r6, r7
 8008232:	d900      	bls.n	8008236 <__ssputs_r+0x86>
 8008234:	463e      	mov	r6, r7
 8008236:	4632      	mov	r2, r6
 8008238:	4641      	mov	r1, r8
 800823a:	6820      	ldr	r0, [r4, #0]
 800823c:	f000 f966 	bl	800850c <memmove>
 8008240:	68a3      	ldr	r3, [r4, #8]
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	1b9b      	subs	r3, r3, r6
 8008246:	4432      	add	r2, r6
 8008248:	2000      	movs	r0, #0
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	e7db      	b.n	8008208 <__ssputs_r+0x58>
 8008250:	462a      	mov	r2, r5
 8008252:	f000 f981 	bl	8008558 <_realloc_r>
 8008256:	4606      	mov	r6, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	d1e1      	bne.n	8008220 <__ssputs_r+0x70>
 800825c:	4650      	mov	r0, sl
 800825e:	6921      	ldr	r1, [r4, #16]
 8008260:	f7ff ff00 	bl	8008064 <_free_r>
 8008264:	e7c7      	b.n	80081f6 <__ssputs_r+0x46>
	...

08008268 <_svfiprintf_r>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	4698      	mov	r8, r3
 800826e:	898b      	ldrh	r3, [r1, #12]
 8008270:	4607      	mov	r7, r0
 8008272:	061b      	lsls	r3, r3, #24
 8008274:	460d      	mov	r5, r1
 8008276:	4614      	mov	r4, r2
 8008278:	b09d      	sub	sp, #116	; 0x74
 800827a:	d50e      	bpl.n	800829a <_svfiprintf_r+0x32>
 800827c:	690b      	ldr	r3, [r1, #16]
 800827e:	b963      	cbnz	r3, 800829a <_svfiprintf_r+0x32>
 8008280:	2140      	movs	r1, #64	; 0x40
 8008282:	f7ff ff3b 	bl	80080fc <_malloc_r>
 8008286:	6028      	str	r0, [r5, #0]
 8008288:	6128      	str	r0, [r5, #16]
 800828a:	b920      	cbnz	r0, 8008296 <_svfiprintf_r+0x2e>
 800828c:	230c      	movs	r3, #12
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	e0d1      	b.n	800843a <_svfiprintf_r+0x1d2>
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	616b      	str	r3, [r5, #20]
 800829a:	2300      	movs	r3, #0
 800829c:	9309      	str	r3, [sp, #36]	; 0x24
 800829e:	2320      	movs	r3, #32
 80082a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082a4:	2330      	movs	r3, #48	; 0x30
 80082a6:	f04f 0901 	mov.w	r9, #1
 80082aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80082ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008454 <_svfiprintf_r+0x1ec>
 80082b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082b6:	4623      	mov	r3, r4
 80082b8:	469a      	mov	sl, r3
 80082ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082be:	b10a      	cbz	r2, 80082c4 <_svfiprintf_r+0x5c>
 80082c0:	2a25      	cmp	r2, #37	; 0x25
 80082c2:	d1f9      	bne.n	80082b8 <_svfiprintf_r+0x50>
 80082c4:	ebba 0b04 	subs.w	fp, sl, r4
 80082c8:	d00b      	beq.n	80082e2 <_svfiprintf_r+0x7a>
 80082ca:	465b      	mov	r3, fp
 80082cc:	4622      	mov	r2, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7ff ff6d 	bl	80081b0 <__ssputs_r>
 80082d6:	3001      	adds	r0, #1
 80082d8:	f000 80aa 	beq.w	8008430 <_svfiprintf_r+0x1c8>
 80082dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082de:	445a      	add	r2, fp
 80082e0:	9209      	str	r2, [sp, #36]	; 0x24
 80082e2:	f89a 3000 	ldrb.w	r3, [sl]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80a2 	beq.w	8008430 <_svfiprintf_r+0x1c8>
 80082ec:	2300      	movs	r3, #0
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295
 80082f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f6:	f10a 0a01 	add.w	sl, sl, #1
 80082fa:	9304      	str	r3, [sp, #16]
 80082fc:	9307      	str	r3, [sp, #28]
 80082fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008302:	931a      	str	r3, [sp, #104]	; 0x68
 8008304:	4654      	mov	r4, sl
 8008306:	2205      	movs	r2, #5
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	4851      	ldr	r0, [pc, #324]	; (8008454 <_svfiprintf_r+0x1ec>)
 800830e:	f7ff fafd 	bl	800790c <memchr>
 8008312:	9a04      	ldr	r2, [sp, #16]
 8008314:	b9d8      	cbnz	r0, 800834e <_svfiprintf_r+0xe6>
 8008316:	06d0      	lsls	r0, r2, #27
 8008318:	bf44      	itt	mi
 800831a:	2320      	movmi	r3, #32
 800831c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008320:	0711      	lsls	r1, r2, #28
 8008322:	bf44      	itt	mi
 8008324:	232b      	movmi	r3, #43	; 0x2b
 8008326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800832a:	f89a 3000 	ldrb.w	r3, [sl]
 800832e:	2b2a      	cmp	r3, #42	; 0x2a
 8008330:	d015      	beq.n	800835e <_svfiprintf_r+0xf6>
 8008332:	4654      	mov	r4, sl
 8008334:	2000      	movs	r0, #0
 8008336:	f04f 0c0a 	mov.w	ip, #10
 800833a:	9a07      	ldr	r2, [sp, #28]
 800833c:	4621      	mov	r1, r4
 800833e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008342:	3b30      	subs	r3, #48	; 0x30
 8008344:	2b09      	cmp	r3, #9
 8008346:	d94e      	bls.n	80083e6 <_svfiprintf_r+0x17e>
 8008348:	b1b0      	cbz	r0, 8008378 <_svfiprintf_r+0x110>
 800834a:	9207      	str	r2, [sp, #28]
 800834c:	e014      	b.n	8008378 <_svfiprintf_r+0x110>
 800834e:	eba0 0308 	sub.w	r3, r0, r8
 8008352:	fa09 f303 	lsl.w	r3, r9, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	46a2      	mov	sl, r4
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	e7d2      	b.n	8008304 <_svfiprintf_r+0x9c>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	1d19      	adds	r1, r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	9103      	str	r1, [sp, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfbb      	ittet	lt
 800836a:	425b      	neglt	r3, r3
 800836c:	f042 0202 	orrlt.w	r2, r2, #2
 8008370:	9307      	strge	r3, [sp, #28]
 8008372:	9307      	strlt	r3, [sp, #28]
 8008374:	bfb8      	it	lt
 8008376:	9204      	strlt	r2, [sp, #16]
 8008378:	7823      	ldrb	r3, [r4, #0]
 800837a:	2b2e      	cmp	r3, #46	; 0x2e
 800837c:	d10c      	bne.n	8008398 <_svfiprintf_r+0x130>
 800837e:	7863      	ldrb	r3, [r4, #1]
 8008380:	2b2a      	cmp	r3, #42	; 0x2a
 8008382:	d135      	bne.n	80083f0 <_svfiprintf_r+0x188>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	3402      	adds	r4, #2
 8008388:	1d1a      	adds	r2, r3, #4
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	9203      	str	r2, [sp, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfb8      	it	lt
 8008392:	f04f 33ff 	movlt.w	r3, #4294967295
 8008396:	9305      	str	r3, [sp, #20]
 8008398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008464 <_svfiprintf_r+0x1fc>
 800839c:	2203      	movs	r2, #3
 800839e:	4650      	mov	r0, sl
 80083a0:	7821      	ldrb	r1, [r4, #0]
 80083a2:	f7ff fab3 	bl	800790c <memchr>
 80083a6:	b140      	cbz	r0, 80083ba <_svfiprintf_r+0x152>
 80083a8:	2340      	movs	r3, #64	; 0x40
 80083aa:	eba0 000a 	sub.w	r0, r0, sl
 80083ae:	fa03 f000 	lsl.w	r0, r3, r0
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	3401      	adds	r4, #1
 80083b6:	4303      	orrs	r3, r0
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083be:	2206      	movs	r2, #6
 80083c0:	4825      	ldr	r0, [pc, #148]	; (8008458 <_svfiprintf_r+0x1f0>)
 80083c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083c6:	f7ff faa1 	bl	800790c <memchr>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d038      	beq.n	8008440 <_svfiprintf_r+0x1d8>
 80083ce:	4b23      	ldr	r3, [pc, #140]	; (800845c <_svfiprintf_r+0x1f4>)
 80083d0:	bb1b      	cbnz	r3, 800841a <_svfiprintf_r+0x1b2>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	3307      	adds	r3, #7
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	3308      	adds	r3, #8
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	4433      	add	r3, r6
 80083e2:	9309      	str	r3, [sp, #36]	; 0x24
 80083e4:	e767      	b.n	80082b6 <_svfiprintf_r+0x4e>
 80083e6:	460c      	mov	r4, r1
 80083e8:	2001      	movs	r0, #1
 80083ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ee:	e7a5      	b.n	800833c <_svfiprintf_r+0xd4>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4619      	mov	r1, r3
 80083f8:	3401      	adds	r4, #1
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	4620      	mov	r0, r4
 80083fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008402:	3a30      	subs	r2, #48	; 0x30
 8008404:	2a09      	cmp	r2, #9
 8008406:	d903      	bls.n	8008410 <_svfiprintf_r+0x1a8>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0c5      	beq.n	8008398 <_svfiprintf_r+0x130>
 800840c:	9105      	str	r1, [sp, #20]
 800840e:	e7c3      	b.n	8008398 <_svfiprintf_r+0x130>
 8008410:	4604      	mov	r4, r0
 8008412:	2301      	movs	r3, #1
 8008414:	fb0c 2101 	mla	r1, ip, r1, r2
 8008418:	e7f0      	b.n	80083fc <_svfiprintf_r+0x194>
 800841a:	ab03      	add	r3, sp, #12
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	462a      	mov	r2, r5
 8008420:	4638      	mov	r0, r7
 8008422:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <_svfiprintf_r+0x1f8>)
 8008424:	a904      	add	r1, sp, #16
 8008426:	f7fe f805 	bl	8006434 <_printf_float>
 800842a:	1c42      	adds	r2, r0, #1
 800842c:	4606      	mov	r6, r0
 800842e:	d1d6      	bne.n	80083de <_svfiprintf_r+0x176>
 8008430:	89ab      	ldrh	r3, [r5, #12]
 8008432:	065b      	lsls	r3, r3, #25
 8008434:	f53f af2c 	bmi.w	8008290 <_svfiprintf_r+0x28>
 8008438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800843a:	b01d      	add	sp, #116	; 0x74
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	462a      	mov	r2, r5
 8008446:	4638      	mov	r0, r7
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <_svfiprintf_r+0x1f8>)
 800844a:	a904      	add	r1, sp, #16
 800844c:	f7fe fa8e 	bl	800696c <_printf_i>
 8008450:	e7eb      	b.n	800842a <_svfiprintf_r+0x1c2>
 8008452:	bf00      	nop
 8008454:	08009484 	.word	0x08009484
 8008458:	0800948e 	.word	0x0800948e
 800845c:	08006435 	.word	0x08006435
 8008460:	080081b1 	.word	0x080081b1
 8008464:	0800948a 	.word	0x0800948a

08008468 <_sbrk_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	2300      	movs	r3, #0
 800846c:	4d05      	ldr	r5, [pc, #20]	; (8008484 <_sbrk_r+0x1c>)
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7f9 fa8c 	bl	8001990 <_sbrk>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_sbrk_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_sbrk_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000368 	.word	0x20000368

08008488 <__assert_func>:
 8008488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800848a:	4614      	mov	r4, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <__assert_func+0x2c>)
 8008490:	4605      	mov	r5, r0
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68d8      	ldr	r0, [r3, #12]
 8008496:	b14c      	cbz	r4, 80084ac <__assert_func+0x24>
 8008498:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <__assert_func+0x30>)
 800849a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800849e:	9100      	str	r1, [sp, #0]
 80084a0:	462b      	mov	r3, r5
 80084a2:	4906      	ldr	r1, [pc, #24]	; (80084bc <__assert_func+0x34>)
 80084a4:	f000 f80e 	bl	80084c4 <fiprintf>
 80084a8:	f000 faa2 	bl	80089f0 <abort>
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <__assert_func+0x38>)
 80084ae:	461c      	mov	r4, r3
 80084b0:	e7f3      	b.n	800849a <__assert_func+0x12>
 80084b2:	bf00      	nop
 80084b4:	20000024 	.word	0x20000024
 80084b8:	08009495 	.word	0x08009495
 80084bc:	080094a2 	.word	0x080094a2
 80084c0:	080094d0 	.word	0x080094d0

080084c4 <fiprintf>:
 80084c4:	b40e      	push	{r1, r2, r3}
 80084c6:	b503      	push	{r0, r1, lr}
 80084c8:	4601      	mov	r1, r0
 80084ca:	ab03      	add	r3, sp, #12
 80084cc:	4805      	ldr	r0, [pc, #20]	; (80084e4 <fiprintf+0x20>)
 80084ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d2:	6800      	ldr	r0, [r0, #0]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	f000 f88d 	bl	80085f4 <_vfiprintf_r>
 80084da:	b002      	add	sp, #8
 80084dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e0:	b003      	add	sp, #12
 80084e2:	4770      	bx	lr
 80084e4:	20000024 	.word	0x20000024

080084e8 <__ascii_mbtowc>:
 80084e8:	b082      	sub	sp, #8
 80084ea:	b901      	cbnz	r1, 80084ee <__ascii_mbtowc+0x6>
 80084ec:	a901      	add	r1, sp, #4
 80084ee:	b142      	cbz	r2, 8008502 <__ascii_mbtowc+0x1a>
 80084f0:	b14b      	cbz	r3, 8008506 <__ascii_mbtowc+0x1e>
 80084f2:	7813      	ldrb	r3, [r2, #0]
 80084f4:	600b      	str	r3, [r1, #0]
 80084f6:	7812      	ldrb	r2, [r2, #0]
 80084f8:	1e10      	subs	r0, r2, #0
 80084fa:	bf18      	it	ne
 80084fc:	2001      	movne	r0, #1
 80084fe:	b002      	add	sp, #8
 8008500:	4770      	bx	lr
 8008502:	4610      	mov	r0, r2
 8008504:	e7fb      	b.n	80084fe <__ascii_mbtowc+0x16>
 8008506:	f06f 0001 	mvn.w	r0, #1
 800850a:	e7f8      	b.n	80084fe <__ascii_mbtowc+0x16>

0800850c <memmove>:
 800850c:	4288      	cmp	r0, r1
 800850e:	b510      	push	{r4, lr}
 8008510:	eb01 0402 	add.w	r4, r1, r2
 8008514:	d902      	bls.n	800851c <memmove+0x10>
 8008516:	4284      	cmp	r4, r0
 8008518:	4623      	mov	r3, r4
 800851a:	d807      	bhi.n	800852c <memmove+0x20>
 800851c:	1e43      	subs	r3, r0, #1
 800851e:	42a1      	cmp	r1, r4
 8008520:	d008      	beq.n	8008534 <memmove+0x28>
 8008522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800852a:	e7f8      	b.n	800851e <memmove+0x12>
 800852c:	4601      	mov	r1, r0
 800852e:	4402      	add	r2, r0
 8008530:	428a      	cmp	r2, r1
 8008532:	d100      	bne.n	8008536 <memmove+0x2a>
 8008534:	bd10      	pop	{r4, pc}
 8008536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800853a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800853e:	e7f7      	b.n	8008530 <memmove+0x24>

08008540 <__malloc_lock>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__malloc_lock+0x8>)
 8008542:	f000 bc15 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008546:	bf00      	nop
 8008548:	20000370 	.word	0x20000370

0800854c <__malloc_unlock>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__malloc_unlock+0x8>)
 800854e:	f000 bc10 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008552:	bf00      	nop
 8008554:	20000370 	.word	0x20000370

08008558 <_realloc_r>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	4607      	mov	r7, r0
 800855c:	4614      	mov	r4, r2
 800855e:	460e      	mov	r6, r1
 8008560:	b921      	cbnz	r1, 800856c <_realloc_r+0x14>
 8008562:	4611      	mov	r1, r2
 8008564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008568:	f7ff bdc8 	b.w	80080fc <_malloc_r>
 800856c:	b922      	cbnz	r2, 8008578 <_realloc_r+0x20>
 800856e:	f7ff fd79 	bl	8008064 <_free_r>
 8008572:	4625      	mov	r5, r4
 8008574:	4628      	mov	r0, r5
 8008576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008578:	f000 fc60 	bl	8008e3c <_malloc_usable_size_r>
 800857c:	42a0      	cmp	r0, r4
 800857e:	d20f      	bcs.n	80085a0 <_realloc_r+0x48>
 8008580:	4621      	mov	r1, r4
 8008582:	4638      	mov	r0, r7
 8008584:	f7ff fdba 	bl	80080fc <_malloc_r>
 8008588:	4605      	mov	r5, r0
 800858a:	2800      	cmp	r0, #0
 800858c:	d0f2      	beq.n	8008574 <_realloc_r+0x1c>
 800858e:	4631      	mov	r1, r6
 8008590:	4622      	mov	r2, r4
 8008592:	f7ff f9c9 	bl	8007928 <memcpy>
 8008596:	4631      	mov	r1, r6
 8008598:	4638      	mov	r0, r7
 800859a:	f7ff fd63 	bl	8008064 <_free_r>
 800859e:	e7e9      	b.n	8008574 <_realloc_r+0x1c>
 80085a0:	4635      	mov	r5, r6
 80085a2:	e7e7      	b.n	8008574 <_realloc_r+0x1c>

080085a4 <__sfputc_r>:
 80085a4:	6893      	ldr	r3, [r2, #8]
 80085a6:	b410      	push	{r4}
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	6093      	str	r3, [r2, #8]
 80085ae:	da07      	bge.n	80085c0 <__sfputc_r+0x1c>
 80085b0:	6994      	ldr	r4, [r2, #24]
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	db01      	blt.n	80085ba <__sfputc_r+0x16>
 80085b6:	290a      	cmp	r1, #10
 80085b8:	d102      	bne.n	80085c0 <__sfputc_r+0x1c>
 80085ba:	bc10      	pop	{r4}
 80085bc:	f000 b94a 	b.w	8008854 <__swbuf_r>
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	1c58      	adds	r0, r3, #1
 80085c4:	6010      	str	r0, [r2, #0]
 80085c6:	7019      	strb	r1, [r3, #0]
 80085c8:	4608      	mov	r0, r1
 80085ca:	bc10      	pop	{r4}
 80085cc:	4770      	bx	lr

080085ce <__sfputs_r>:
 80085ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d0:	4606      	mov	r6, r0
 80085d2:	460f      	mov	r7, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	18d5      	adds	r5, r2, r3
 80085d8:	42ac      	cmp	r4, r5
 80085da:	d101      	bne.n	80085e0 <__sfputs_r+0x12>
 80085dc:	2000      	movs	r0, #0
 80085de:	e007      	b.n	80085f0 <__sfputs_r+0x22>
 80085e0:	463a      	mov	r2, r7
 80085e2:	4630      	mov	r0, r6
 80085e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e8:	f7ff ffdc 	bl	80085a4 <__sfputc_r>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d1f3      	bne.n	80085d8 <__sfputs_r+0xa>
 80085f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085f4 <_vfiprintf_r>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	460d      	mov	r5, r1
 80085fa:	4614      	mov	r4, r2
 80085fc:	4698      	mov	r8, r3
 80085fe:	4606      	mov	r6, r0
 8008600:	b09d      	sub	sp, #116	; 0x74
 8008602:	b118      	cbz	r0, 800860c <_vfiprintf_r+0x18>
 8008604:	6983      	ldr	r3, [r0, #24]
 8008606:	b90b      	cbnz	r3, 800860c <_vfiprintf_r+0x18>
 8008608:	f000 fb14 	bl	8008c34 <__sinit>
 800860c:	4b89      	ldr	r3, [pc, #548]	; (8008834 <_vfiprintf_r+0x240>)
 800860e:	429d      	cmp	r5, r3
 8008610:	d11b      	bne.n	800864a <_vfiprintf_r+0x56>
 8008612:	6875      	ldr	r5, [r6, #4]
 8008614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	d405      	bmi.n	8008626 <_vfiprintf_r+0x32>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d402      	bmi.n	8008626 <_vfiprintf_r+0x32>
 8008620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008622:	f000 fba5 	bl	8008d70 <__retarget_lock_acquire_recursive>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	071b      	lsls	r3, r3, #28
 800862a:	d501      	bpl.n	8008630 <_vfiprintf_r+0x3c>
 800862c:	692b      	ldr	r3, [r5, #16]
 800862e:	b9eb      	cbnz	r3, 800866c <_vfiprintf_r+0x78>
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f96e 	bl	8008914 <__swsetup_r>
 8008638:	b1c0      	cbz	r0, 800866c <_vfiprintf_r+0x78>
 800863a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800863c:	07dc      	lsls	r4, r3, #31
 800863e:	d50e      	bpl.n	800865e <_vfiprintf_r+0x6a>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	b01d      	add	sp, #116	; 0x74
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	4b7b      	ldr	r3, [pc, #492]	; (8008838 <_vfiprintf_r+0x244>)
 800864c:	429d      	cmp	r5, r3
 800864e:	d101      	bne.n	8008654 <_vfiprintf_r+0x60>
 8008650:	68b5      	ldr	r5, [r6, #8]
 8008652:	e7df      	b.n	8008614 <_vfiprintf_r+0x20>
 8008654:	4b79      	ldr	r3, [pc, #484]	; (800883c <_vfiprintf_r+0x248>)
 8008656:	429d      	cmp	r5, r3
 8008658:	bf08      	it	eq
 800865a:	68f5      	ldreq	r5, [r6, #12]
 800865c:	e7da      	b.n	8008614 <_vfiprintf_r+0x20>
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	0598      	lsls	r0, r3, #22
 8008662:	d4ed      	bmi.n	8008640 <_vfiprintf_r+0x4c>
 8008664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008666:	f000 fb84 	bl	8008d72 <__retarget_lock_release_recursive>
 800866a:	e7e9      	b.n	8008640 <_vfiprintf_r+0x4c>
 800866c:	2300      	movs	r3, #0
 800866e:	9309      	str	r3, [sp, #36]	; 0x24
 8008670:	2320      	movs	r3, #32
 8008672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008676:	2330      	movs	r3, #48	; 0x30
 8008678:	f04f 0901 	mov.w	r9, #1
 800867c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008680:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008840 <_vfiprintf_r+0x24c>
 8008684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008688:	4623      	mov	r3, r4
 800868a:	469a      	mov	sl, r3
 800868c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008690:	b10a      	cbz	r2, 8008696 <_vfiprintf_r+0xa2>
 8008692:	2a25      	cmp	r2, #37	; 0x25
 8008694:	d1f9      	bne.n	800868a <_vfiprintf_r+0x96>
 8008696:	ebba 0b04 	subs.w	fp, sl, r4
 800869a:	d00b      	beq.n	80086b4 <_vfiprintf_r+0xc0>
 800869c:	465b      	mov	r3, fp
 800869e:	4622      	mov	r2, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ff93 	bl	80085ce <__sfputs_r>
 80086a8:	3001      	adds	r0, #1
 80086aa:	f000 80aa 	beq.w	8008802 <_vfiprintf_r+0x20e>
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	445a      	add	r2, fp
 80086b2:	9209      	str	r2, [sp, #36]	; 0x24
 80086b4:	f89a 3000 	ldrb.w	r3, [sl]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80a2 	beq.w	8008802 <_vfiprintf_r+0x20e>
 80086be:	2300      	movs	r3, #0
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c8:	f10a 0a01 	add.w	sl, sl, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086d4:	931a      	str	r3, [sp, #104]	; 0x68
 80086d6:	4654      	mov	r4, sl
 80086d8:	2205      	movs	r2, #5
 80086da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086de:	4858      	ldr	r0, [pc, #352]	; (8008840 <_vfiprintf_r+0x24c>)
 80086e0:	f7ff f914 	bl	800790c <memchr>
 80086e4:	9a04      	ldr	r2, [sp, #16]
 80086e6:	b9d8      	cbnz	r0, 8008720 <_vfiprintf_r+0x12c>
 80086e8:	06d1      	lsls	r1, r2, #27
 80086ea:	bf44      	itt	mi
 80086ec:	2320      	movmi	r3, #32
 80086ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f2:	0713      	lsls	r3, r2, #28
 80086f4:	bf44      	itt	mi
 80086f6:	232b      	movmi	r3, #43	; 0x2b
 80086f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008700:	2b2a      	cmp	r3, #42	; 0x2a
 8008702:	d015      	beq.n	8008730 <_vfiprintf_r+0x13c>
 8008704:	4654      	mov	r4, sl
 8008706:	2000      	movs	r0, #0
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	9a07      	ldr	r2, [sp, #28]
 800870e:	4621      	mov	r1, r4
 8008710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008714:	3b30      	subs	r3, #48	; 0x30
 8008716:	2b09      	cmp	r3, #9
 8008718:	d94e      	bls.n	80087b8 <_vfiprintf_r+0x1c4>
 800871a:	b1b0      	cbz	r0, 800874a <_vfiprintf_r+0x156>
 800871c:	9207      	str	r2, [sp, #28]
 800871e:	e014      	b.n	800874a <_vfiprintf_r+0x156>
 8008720:	eba0 0308 	sub.w	r3, r0, r8
 8008724:	fa09 f303 	lsl.w	r3, r9, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	46a2      	mov	sl, r4
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	e7d2      	b.n	80086d6 <_vfiprintf_r+0xe2>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d19      	adds	r1, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9103      	str	r1, [sp, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfbb      	ittet	lt
 800873c:	425b      	neglt	r3, r3
 800873e:	f042 0202 	orrlt.w	r2, r2, #2
 8008742:	9307      	strge	r3, [sp, #28]
 8008744:	9307      	strlt	r3, [sp, #28]
 8008746:	bfb8      	it	lt
 8008748:	9204      	strlt	r2, [sp, #16]
 800874a:	7823      	ldrb	r3, [r4, #0]
 800874c:	2b2e      	cmp	r3, #46	; 0x2e
 800874e:	d10c      	bne.n	800876a <_vfiprintf_r+0x176>
 8008750:	7863      	ldrb	r3, [r4, #1]
 8008752:	2b2a      	cmp	r3, #42	; 0x2a
 8008754:	d135      	bne.n	80087c2 <_vfiprintf_r+0x1ce>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	3402      	adds	r4, #2
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	9203      	str	r2, [sp, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	bfb8      	it	lt
 8008764:	f04f 33ff 	movlt.w	r3, #4294967295
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008850 <_vfiprintf_r+0x25c>
 800876e:	2203      	movs	r2, #3
 8008770:	4650      	mov	r0, sl
 8008772:	7821      	ldrb	r1, [r4, #0]
 8008774:	f7ff f8ca 	bl	800790c <memchr>
 8008778:	b140      	cbz	r0, 800878c <_vfiprintf_r+0x198>
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	eba0 000a 	sub.w	r0, r0, sl
 8008780:	fa03 f000 	lsl.w	r0, r3, r0
 8008784:	9b04      	ldr	r3, [sp, #16]
 8008786:	3401      	adds	r4, #1
 8008788:	4303      	orrs	r3, r0
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008790:	2206      	movs	r2, #6
 8008792:	482c      	ldr	r0, [pc, #176]	; (8008844 <_vfiprintf_r+0x250>)
 8008794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008798:	f7ff f8b8 	bl	800790c <memchr>
 800879c:	2800      	cmp	r0, #0
 800879e:	d03f      	beq.n	8008820 <_vfiprintf_r+0x22c>
 80087a0:	4b29      	ldr	r3, [pc, #164]	; (8008848 <_vfiprintf_r+0x254>)
 80087a2:	bb1b      	cbnz	r3, 80087ec <_vfiprintf_r+0x1f8>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	3307      	adds	r3, #7
 80087a8:	f023 0307 	bic.w	r3, r3, #7
 80087ac:	3308      	adds	r3, #8
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	443b      	add	r3, r7
 80087b4:	9309      	str	r3, [sp, #36]	; 0x24
 80087b6:	e767      	b.n	8008688 <_vfiprintf_r+0x94>
 80087b8:	460c      	mov	r4, r1
 80087ba:	2001      	movs	r0, #1
 80087bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c0:	e7a5      	b.n	800870e <_vfiprintf_r+0x11a>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f04f 0c0a 	mov.w	ip, #10
 80087c8:	4619      	mov	r1, r3
 80087ca:	3401      	adds	r4, #1
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	4620      	mov	r0, r4
 80087d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d4:	3a30      	subs	r2, #48	; 0x30
 80087d6:	2a09      	cmp	r2, #9
 80087d8:	d903      	bls.n	80087e2 <_vfiprintf_r+0x1ee>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0c5      	beq.n	800876a <_vfiprintf_r+0x176>
 80087de:	9105      	str	r1, [sp, #20]
 80087e0:	e7c3      	b.n	800876a <_vfiprintf_r+0x176>
 80087e2:	4604      	mov	r4, r0
 80087e4:	2301      	movs	r3, #1
 80087e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ea:	e7f0      	b.n	80087ce <_vfiprintf_r+0x1da>
 80087ec:	ab03      	add	r3, sp, #12
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	462a      	mov	r2, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	4b15      	ldr	r3, [pc, #84]	; (800884c <_vfiprintf_r+0x258>)
 80087f6:	a904      	add	r1, sp, #16
 80087f8:	f7fd fe1c 	bl	8006434 <_printf_float>
 80087fc:	4607      	mov	r7, r0
 80087fe:	1c78      	adds	r0, r7, #1
 8008800:	d1d6      	bne.n	80087b0 <_vfiprintf_r+0x1bc>
 8008802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008804:	07d9      	lsls	r1, r3, #31
 8008806:	d405      	bmi.n	8008814 <_vfiprintf_r+0x220>
 8008808:	89ab      	ldrh	r3, [r5, #12]
 800880a:	059a      	lsls	r2, r3, #22
 800880c:	d402      	bmi.n	8008814 <_vfiprintf_r+0x220>
 800880e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008810:	f000 faaf 	bl	8008d72 <__retarget_lock_release_recursive>
 8008814:	89ab      	ldrh	r3, [r5, #12]
 8008816:	065b      	lsls	r3, r3, #25
 8008818:	f53f af12 	bmi.w	8008640 <_vfiprintf_r+0x4c>
 800881c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800881e:	e711      	b.n	8008644 <_vfiprintf_r+0x50>
 8008820:	ab03      	add	r3, sp, #12
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	462a      	mov	r2, r5
 8008826:	4630      	mov	r0, r6
 8008828:	4b08      	ldr	r3, [pc, #32]	; (800884c <_vfiprintf_r+0x258>)
 800882a:	a904      	add	r1, sp, #16
 800882c:	f7fe f89e 	bl	800696c <_printf_i>
 8008830:	e7e4      	b.n	80087fc <_vfiprintf_r+0x208>
 8008832:	bf00      	nop
 8008834:	080095fc 	.word	0x080095fc
 8008838:	0800961c 	.word	0x0800961c
 800883c:	080095dc 	.word	0x080095dc
 8008840:	08009484 	.word	0x08009484
 8008844:	0800948e 	.word	0x0800948e
 8008848:	08006435 	.word	0x08006435
 800884c:	080085cf 	.word	0x080085cf
 8008850:	0800948a 	.word	0x0800948a

08008854 <__swbuf_r>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	460e      	mov	r6, r1
 8008858:	4614      	mov	r4, r2
 800885a:	4605      	mov	r5, r0
 800885c:	b118      	cbz	r0, 8008866 <__swbuf_r+0x12>
 800885e:	6983      	ldr	r3, [r0, #24]
 8008860:	b90b      	cbnz	r3, 8008866 <__swbuf_r+0x12>
 8008862:	f000 f9e7 	bl	8008c34 <__sinit>
 8008866:	4b21      	ldr	r3, [pc, #132]	; (80088ec <__swbuf_r+0x98>)
 8008868:	429c      	cmp	r4, r3
 800886a:	d12b      	bne.n	80088c4 <__swbuf_r+0x70>
 800886c:	686c      	ldr	r4, [r5, #4]
 800886e:	69a3      	ldr	r3, [r4, #24]
 8008870:	60a3      	str	r3, [r4, #8]
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	071a      	lsls	r2, r3, #28
 8008876:	d52f      	bpl.n	80088d8 <__swbuf_r+0x84>
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	b36b      	cbz	r3, 80088d8 <__swbuf_r+0x84>
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	6820      	ldr	r0, [r4, #0]
 8008880:	b2f6      	uxtb	r6, r6
 8008882:	1ac0      	subs	r0, r0, r3
 8008884:	6963      	ldr	r3, [r4, #20]
 8008886:	4637      	mov	r7, r6
 8008888:	4283      	cmp	r3, r0
 800888a:	dc04      	bgt.n	8008896 <__swbuf_r+0x42>
 800888c:	4621      	mov	r1, r4
 800888e:	4628      	mov	r0, r5
 8008890:	f000 f93c 	bl	8008b0c <_fflush_r>
 8008894:	bb30      	cbnz	r0, 80088e4 <__swbuf_r+0x90>
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	3001      	adds	r0, #1
 800889a:	3b01      	subs	r3, #1
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	701e      	strb	r6, [r3, #0]
 80088a6:	6963      	ldr	r3, [r4, #20]
 80088a8:	4283      	cmp	r3, r0
 80088aa:	d004      	beq.n	80088b6 <__swbuf_r+0x62>
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	07db      	lsls	r3, r3, #31
 80088b0:	d506      	bpl.n	80088c0 <__swbuf_r+0x6c>
 80088b2:	2e0a      	cmp	r6, #10
 80088b4:	d104      	bne.n	80088c0 <__swbuf_r+0x6c>
 80088b6:	4621      	mov	r1, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	f000 f927 	bl	8008b0c <_fflush_r>
 80088be:	b988      	cbnz	r0, 80088e4 <__swbuf_r+0x90>
 80088c0:	4638      	mov	r0, r7
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <__swbuf_r+0x9c>)
 80088c6:	429c      	cmp	r4, r3
 80088c8:	d101      	bne.n	80088ce <__swbuf_r+0x7a>
 80088ca:	68ac      	ldr	r4, [r5, #8]
 80088cc:	e7cf      	b.n	800886e <__swbuf_r+0x1a>
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <__swbuf_r+0xa0>)
 80088d0:	429c      	cmp	r4, r3
 80088d2:	bf08      	it	eq
 80088d4:	68ec      	ldreq	r4, [r5, #12]
 80088d6:	e7ca      	b.n	800886e <__swbuf_r+0x1a>
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f81a 	bl	8008914 <__swsetup_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d0cb      	beq.n	800887c <__swbuf_r+0x28>
 80088e4:	f04f 37ff 	mov.w	r7, #4294967295
 80088e8:	e7ea      	b.n	80088c0 <__swbuf_r+0x6c>
 80088ea:	bf00      	nop
 80088ec:	080095fc 	.word	0x080095fc
 80088f0:	0800961c 	.word	0x0800961c
 80088f4:	080095dc 	.word	0x080095dc

080088f8 <__ascii_wctomb>:
 80088f8:	4603      	mov	r3, r0
 80088fa:	4608      	mov	r0, r1
 80088fc:	b141      	cbz	r1, 8008910 <__ascii_wctomb+0x18>
 80088fe:	2aff      	cmp	r2, #255	; 0xff
 8008900:	d904      	bls.n	800890c <__ascii_wctomb+0x14>
 8008902:	228a      	movs	r2, #138	; 0x8a
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	4770      	bx	lr
 800890c:	2001      	movs	r0, #1
 800890e:	700a      	strb	r2, [r1, #0]
 8008910:	4770      	bx	lr
	...

08008914 <__swsetup_r>:
 8008914:	4b32      	ldr	r3, [pc, #200]	; (80089e0 <__swsetup_r+0xcc>)
 8008916:	b570      	push	{r4, r5, r6, lr}
 8008918:	681d      	ldr	r5, [r3, #0]
 800891a:	4606      	mov	r6, r0
 800891c:	460c      	mov	r4, r1
 800891e:	b125      	cbz	r5, 800892a <__swsetup_r+0x16>
 8008920:	69ab      	ldr	r3, [r5, #24]
 8008922:	b913      	cbnz	r3, 800892a <__swsetup_r+0x16>
 8008924:	4628      	mov	r0, r5
 8008926:	f000 f985 	bl	8008c34 <__sinit>
 800892a:	4b2e      	ldr	r3, [pc, #184]	; (80089e4 <__swsetup_r+0xd0>)
 800892c:	429c      	cmp	r4, r3
 800892e:	d10f      	bne.n	8008950 <__swsetup_r+0x3c>
 8008930:	686c      	ldr	r4, [r5, #4]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008938:	0719      	lsls	r1, r3, #28
 800893a:	d42c      	bmi.n	8008996 <__swsetup_r+0x82>
 800893c:	06dd      	lsls	r5, r3, #27
 800893e:	d411      	bmi.n	8008964 <__swsetup_r+0x50>
 8008940:	2309      	movs	r3, #9
 8008942:	6033      	str	r3, [r6, #0]
 8008944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	e03e      	b.n	80089ce <__swsetup_r+0xba>
 8008950:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <__swsetup_r+0xd4>)
 8008952:	429c      	cmp	r4, r3
 8008954:	d101      	bne.n	800895a <__swsetup_r+0x46>
 8008956:	68ac      	ldr	r4, [r5, #8]
 8008958:	e7eb      	b.n	8008932 <__swsetup_r+0x1e>
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <__swsetup_r+0xd8>)
 800895c:	429c      	cmp	r4, r3
 800895e:	bf08      	it	eq
 8008960:	68ec      	ldreq	r4, [r5, #12]
 8008962:	e7e6      	b.n	8008932 <__swsetup_r+0x1e>
 8008964:	0758      	lsls	r0, r3, #29
 8008966:	d512      	bpl.n	800898e <__swsetup_r+0x7a>
 8008968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896a:	b141      	cbz	r1, 800897e <__swsetup_r+0x6a>
 800896c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008970:	4299      	cmp	r1, r3
 8008972:	d002      	beq.n	800897a <__swsetup_r+0x66>
 8008974:	4630      	mov	r0, r6
 8008976:	f7ff fb75 	bl	8008064 <_free_r>
 800897a:	2300      	movs	r3, #0
 800897c:	6363      	str	r3, [r4, #52]	; 0x34
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	2300      	movs	r3, #0
 8008988:	6063      	str	r3, [r4, #4]
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f043 0308 	orr.w	r3, r3, #8
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b94b      	cbnz	r3, 80089ae <__swsetup_r+0x9a>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a4:	d003      	beq.n	80089ae <__swsetup_r+0x9a>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4630      	mov	r0, r6
 80089aa:	f000 fa07 	bl	8008dbc <__smakebuf_r>
 80089ae:	89a0      	ldrh	r0, [r4, #12]
 80089b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089b4:	f010 0301 	ands.w	r3, r0, #1
 80089b8:	d00a      	beq.n	80089d0 <__swsetup_r+0xbc>
 80089ba:	2300      	movs	r3, #0
 80089bc:	60a3      	str	r3, [r4, #8]
 80089be:	6963      	ldr	r3, [r4, #20]
 80089c0:	425b      	negs	r3, r3
 80089c2:	61a3      	str	r3, [r4, #24]
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	b943      	cbnz	r3, 80089da <__swsetup_r+0xc6>
 80089c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089cc:	d1ba      	bne.n	8008944 <__swsetup_r+0x30>
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	0781      	lsls	r1, r0, #30
 80089d2:	bf58      	it	pl
 80089d4:	6963      	ldrpl	r3, [r4, #20]
 80089d6:	60a3      	str	r3, [r4, #8]
 80089d8:	e7f4      	b.n	80089c4 <__swsetup_r+0xb0>
 80089da:	2000      	movs	r0, #0
 80089dc:	e7f7      	b.n	80089ce <__swsetup_r+0xba>
 80089de:	bf00      	nop
 80089e0:	20000024 	.word	0x20000024
 80089e4:	080095fc 	.word	0x080095fc
 80089e8:	0800961c 	.word	0x0800961c
 80089ec:	080095dc 	.word	0x080095dc

080089f0 <abort>:
 80089f0:	2006      	movs	r0, #6
 80089f2:	b508      	push	{r3, lr}
 80089f4:	f000 fa52 	bl	8008e9c <raise>
 80089f8:	2001      	movs	r0, #1
 80089fa:	f7f8 ff56 	bl	80018aa <_exit>
	...

08008a00 <__sflush_r>:
 8008a00:	898a      	ldrh	r2, [r1, #12]
 8008a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	4605      	mov	r5, r0
 8008a08:	0710      	lsls	r0, r2, #28
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	d458      	bmi.n	8008ac0 <__sflush_r+0xc0>
 8008a0e:	684b      	ldr	r3, [r1, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dc05      	bgt.n	8008a20 <__sflush_r+0x20>
 8008a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc02      	bgt.n	8008a20 <__sflush_r+0x20>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d0f9      	beq.n	8008a1a <__sflush_r+0x1a>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a2c:	682f      	ldr	r7, [r5, #0]
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	d032      	beq.n	8008a98 <__sflush_r+0x98>
 8008a32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	075a      	lsls	r2, r3, #29
 8008a38:	d505      	bpl.n	8008a46 <__sflush_r+0x46>
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	1ac0      	subs	r0, r0, r3
 8008a3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a40:	b10b      	cbz	r3, 8008a46 <__sflush_r+0x46>
 8008a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a44:	1ac0      	subs	r0, r0, r3
 8008a46:	2300      	movs	r3, #0
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	6a21      	ldr	r1, [r4, #32]
 8008a50:	47b0      	blx	r6
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	d106      	bne.n	8008a66 <__sflush_r+0x66>
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	291d      	cmp	r1, #29
 8008a5c:	d82c      	bhi.n	8008ab8 <__sflush_r+0xb8>
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <__sflush_r+0x108>)
 8008a60:	40ca      	lsrs	r2, r1
 8008a62:	07d6      	lsls	r6, r2, #31
 8008a64:	d528      	bpl.n	8008ab8 <__sflush_r+0xb8>
 8008a66:	2200      	movs	r2, #0
 8008a68:	6062      	str	r2, [r4, #4]
 8008a6a:	6922      	ldr	r2, [r4, #16]
 8008a6c:	04d9      	lsls	r1, r3, #19
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	d504      	bpl.n	8008a7c <__sflush_r+0x7c>
 8008a72:	1c42      	adds	r2, r0, #1
 8008a74:	d101      	bne.n	8008a7a <__sflush_r+0x7a>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b903      	cbnz	r3, 8008a7c <__sflush_r+0x7c>
 8008a7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	2900      	cmp	r1, #0
 8008a82:	d0ca      	beq.n	8008a1a <__sflush_r+0x1a>
 8008a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	d002      	beq.n	8008a92 <__sflush_r+0x92>
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f7ff fae9 	bl	8008064 <_free_r>
 8008a92:	2000      	movs	r0, #0
 8008a94:	6360      	str	r0, [r4, #52]	; 0x34
 8008a96:	e7c1      	b.n	8008a1c <__sflush_r+0x1c>
 8008a98:	6a21      	ldr	r1, [r4, #32]
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b0      	blx	r6
 8008aa0:	1c41      	adds	r1, r0, #1
 8008aa2:	d1c7      	bne.n	8008a34 <__sflush_r+0x34>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0c4      	beq.n	8008a34 <__sflush_r+0x34>
 8008aaa:	2b1d      	cmp	r3, #29
 8008aac:	d001      	beq.n	8008ab2 <__sflush_r+0xb2>
 8008aae:	2b16      	cmp	r3, #22
 8008ab0:	d101      	bne.n	8008ab6 <__sflush_r+0xb6>
 8008ab2:	602f      	str	r7, [r5, #0]
 8008ab4:	e7b1      	b.n	8008a1a <__sflush_r+0x1a>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e7ad      	b.n	8008a1c <__sflush_r+0x1c>
 8008ac0:	690f      	ldr	r7, [r1, #16]
 8008ac2:	2f00      	cmp	r7, #0
 8008ac4:	d0a9      	beq.n	8008a1a <__sflush_r+0x1a>
 8008ac6:	0793      	lsls	r3, r2, #30
 8008ac8:	bf18      	it	ne
 8008aca:	2300      	movne	r3, #0
 8008acc:	680e      	ldr	r6, [r1, #0]
 8008ace:	bf08      	it	eq
 8008ad0:	694b      	ldreq	r3, [r1, #20]
 8008ad2:	eba6 0807 	sub.w	r8, r6, r7
 8008ad6:	600f      	str	r7, [r1, #0]
 8008ad8:	608b      	str	r3, [r1, #8]
 8008ada:	f1b8 0f00 	cmp.w	r8, #0
 8008ade:	dd9c      	ble.n	8008a1a <__sflush_r+0x1a>
 8008ae0:	4643      	mov	r3, r8
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	6a21      	ldr	r1, [r4, #32]
 8008ae8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008aea:	47b0      	blx	r6
 8008aec:	2800      	cmp	r0, #0
 8008aee:	dc06      	bgt.n	8008afe <__sflush_r+0xfe>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295
 8008af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	e78e      	b.n	8008a1c <__sflush_r+0x1c>
 8008afe:	4407      	add	r7, r0
 8008b00:	eba8 0800 	sub.w	r8, r8, r0
 8008b04:	e7e9      	b.n	8008ada <__sflush_r+0xda>
 8008b06:	bf00      	nop
 8008b08:	20400001 	.word	0x20400001

08008b0c <_fflush_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b913      	cbnz	r3, 8008b1c <_fflush_r+0x10>
 8008b16:	2500      	movs	r5, #0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	b118      	cbz	r0, 8008b26 <_fflush_r+0x1a>
 8008b1e:	6983      	ldr	r3, [r0, #24]
 8008b20:	b90b      	cbnz	r3, 8008b26 <_fflush_r+0x1a>
 8008b22:	f000 f887 	bl	8008c34 <__sinit>
 8008b26:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <_fflush_r+0x6c>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	d11b      	bne.n	8008b64 <_fflush_r+0x58>
 8008b2c:	686c      	ldr	r4, [r5, #4]
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0ef      	beq.n	8008b16 <_fflush_r+0xa>
 8008b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b38:	07d0      	lsls	r0, r2, #31
 8008b3a:	d404      	bmi.n	8008b46 <_fflush_r+0x3a>
 8008b3c:	0599      	lsls	r1, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_fflush_r+0x3a>
 8008b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b42:	f000 f915 	bl	8008d70 <__retarget_lock_acquire_recursive>
 8008b46:	4628      	mov	r0, r5
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7ff ff59 	bl	8008a00 <__sflush_r>
 8008b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b50:	4605      	mov	r5, r0
 8008b52:	07da      	lsls	r2, r3, #31
 8008b54:	d4e0      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d4dd      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5e:	f000 f908 	bl	8008d72 <__retarget_lock_release_recursive>
 8008b62:	e7d9      	b.n	8008b18 <_fflush_r+0xc>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <_fflush_r+0x70>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <_fflush_r+0x62>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7df      	b.n	8008b2e <_fflush_r+0x22>
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <_fflush_r+0x74>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7da      	b.n	8008b2e <_fflush_r+0x22>
 8008b78:	080095fc 	.word	0x080095fc
 8008b7c:	0800961c 	.word	0x0800961c
 8008b80:	080095dc 	.word	0x080095dc

08008b84 <std>:
 8008b84:	2300      	movs	r3, #0
 8008b86:	b510      	push	{r4, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b92:	6083      	str	r3, [r0, #8]
 8008b94:	8181      	strh	r1, [r0, #12]
 8008b96:	6643      	str	r3, [r0, #100]	; 0x64
 8008b98:	81c2      	strh	r2, [r0, #14]
 8008b9a:	6183      	str	r3, [r0, #24]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	305c      	adds	r0, #92	; 0x5c
 8008ba2:	f7fd fba1 	bl	80062e8 <memset>
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <std+0x38>)
 8008ba8:	6224      	str	r4, [r4, #32]
 8008baa:	6263      	str	r3, [r4, #36]	; 0x24
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <std+0x3c>)
 8008bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bb0:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <std+0x40>)
 8008bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <std+0x44>)
 8008bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	bf00      	nop
 8008bbc:	08008ed5 	.word	0x08008ed5
 8008bc0:	08008ef7 	.word	0x08008ef7
 8008bc4:	08008f2f 	.word	0x08008f2f
 8008bc8:	08008f53 	.word	0x08008f53

08008bcc <_cleanup_r>:
 8008bcc:	4901      	ldr	r1, [pc, #4]	; (8008bd4 <_cleanup_r+0x8>)
 8008bce:	f000 b8af 	b.w	8008d30 <_fwalk_reent>
 8008bd2:	bf00      	nop
 8008bd4:	08008b0d 	.word	0x08008b0d

08008bd8 <__sfmoreglue>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	2568      	movs	r5, #104	; 0x68
 8008bdc:	1e4a      	subs	r2, r1, #1
 8008bde:	4355      	muls	r5, r2
 8008be0:	460e      	mov	r6, r1
 8008be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008be6:	f7ff fa89 	bl	80080fc <_malloc_r>
 8008bea:	4604      	mov	r4, r0
 8008bec:	b140      	cbz	r0, 8008c00 <__sfmoreglue+0x28>
 8008bee:	2100      	movs	r1, #0
 8008bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8008bf4:	300c      	adds	r0, #12
 8008bf6:	60a0      	str	r0, [r4, #8]
 8008bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bfc:	f7fd fb74 	bl	80062e8 <memset>
 8008c00:	4620      	mov	r0, r4
 8008c02:	bd70      	pop	{r4, r5, r6, pc}

08008c04 <__sfp_lock_acquire>:
 8008c04:	4801      	ldr	r0, [pc, #4]	; (8008c0c <__sfp_lock_acquire+0x8>)
 8008c06:	f000 b8b3 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	20000374 	.word	0x20000374

08008c10 <__sfp_lock_release>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__sfp_lock_release+0x8>)
 8008c12:	f000 b8ae 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	20000374 	.word	0x20000374

08008c1c <__sinit_lock_acquire>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__sinit_lock_acquire+0x8>)
 8008c1e:	f000 b8a7 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	2000036f 	.word	0x2000036f

08008c28 <__sinit_lock_release>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__sinit_lock_release+0x8>)
 8008c2a:	f000 b8a2 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	2000036f 	.word	0x2000036f

08008c34 <__sinit>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	4604      	mov	r4, r0
 8008c38:	f7ff fff0 	bl	8008c1c <__sinit_lock_acquire>
 8008c3c:	69a3      	ldr	r3, [r4, #24]
 8008c3e:	b11b      	cbz	r3, 8008c48 <__sinit+0x14>
 8008c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c44:	f7ff bff0 	b.w	8008c28 <__sinit_lock_release>
 8008c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <__sinit+0x68>)
 8008c50:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <__sinit+0x6c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	bf08      	it	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	bf08      	it	eq
 8008c60:	61a3      	streq	r3, [r4, #24]
 8008c62:	f000 f81f 	bl	8008ca4 <__sfp>
 8008c66:	6060      	str	r0, [r4, #4]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f81b 	bl	8008ca4 <__sfp>
 8008c6e:	60a0      	str	r0, [r4, #8]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f817 	bl	8008ca4 <__sfp>
 8008c76:	2200      	movs	r2, #0
 8008c78:	2104      	movs	r1, #4
 8008c7a:	60e0      	str	r0, [r4, #12]
 8008c7c:	6860      	ldr	r0, [r4, #4]
 8008c7e:	f7ff ff81 	bl	8008b84 <std>
 8008c82:	2201      	movs	r2, #1
 8008c84:	2109      	movs	r1, #9
 8008c86:	68a0      	ldr	r0, [r4, #8]
 8008c88:	f7ff ff7c 	bl	8008b84 <std>
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	2112      	movs	r1, #18
 8008c90:	68e0      	ldr	r0, [r4, #12]
 8008c92:	f7ff ff77 	bl	8008b84 <std>
 8008c96:	2301      	movs	r3, #1
 8008c98:	61a3      	str	r3, [r4, #24]
 8008c9a:	e7d1      	b.n	8008c40 <__sinit+0xc>
 8008c9c:	0800925c 	.word	0x0800925c
 8008ca0:	08008bcd 	.word	0x08008bcd

08008ca4 <__sfp>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	f7ff ffac 	bl	8008c04 <__sfp_lock_acquire>
 8008cac:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <__sfp+0x84>)
 8008cae:	681e      	ldr	r6, [r3, #0]
 8008cb0:	69b3      	ldr	r3, [r6, #24]
 8008cb2:	b913      	cbnz	r3, 8008cba <__sfp+0x16>
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7ff ffbd 	bl	8008c34 <__sinit>
 8008cba:	3648      	adds	r6, #72	; 0x48
 8008cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	d503      	bpl.n	8008ccc <__sfp+0x28>
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	b30b      	cbz	r3, 8008d0c <__sfp+0x68>
 8008cc8:	6836      	ldr	r6, [r6, #0]
 8008cca:	e7f7      	b.n	8008cbc <__sfp+0x18>
 8008ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd0:	b9d5      	cbnz	r5, 8008d08 <__sfp+0x64>
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <__sfp+0x88>)
 8008cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cd8:	60e3      	str	r3, [r4, #12]
 8008cda:	6665      	str	r5, [r4, #100]	; 0x64
 8008cdc:	f000 f847 	bl	8008d6e <__retarget_lock_init_recursive>
 8008ce0:	f7ff ff96 	bl	8008c10 <__sfp_lock_release>
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cf0:	6025      	str	r5, [r4, #0]
 8008cf2:	61a5      	str	r5, [r4, #24]
 8008cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cf8:	f7fd faf6 	bl	80062e8 <memset>
 8008cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d04:	4620      	mov	r0, r4
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d08:	3468      	adds	r4, #104	; 0x68
 8008d0a:	e7d9      	b.n	8008cc0 <__sfp+0x1c>
 8008d0c:	2104      	movs	r1, #4
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f7ff ff62 	bl	8008bd8 <__sfmoreglue>
 8008d14:	4604      	mov	r4, r0
 8008d16:	6030      	str	r0, [r6, #0]
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1d5      	bne.n	8008cc8 <__sfp+0x24>
 8008d1c:	f7ff ff78 	bl	8008c10 <__sfp_lock_release>
 8008d20:	230c      	movs	r3, #12
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	e7ee      	b.n	8008d04 <__sfp+0x60>
 8008d26:	bf00      	nop
 8008d28:	0800925c 	.word	0x0800925c
 8008d2c:	ffff0001 	.word	0xffff0001

08008d30 <_fwalk_reent>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4606      	mov	r6, r0
 8008d36:	4688      	mov	r8, r1
 8008d38:	2700      	movs	r7, #0
 8008d3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d42:	f1b9 0901 	subs.w	r9, r9, #1
 8008d46:	d505      	bpl.n	8008d54 <_fwalk_reent+0x24>
 8008d48:	6824      	ldr	r4, [r4, #0]
 8008d4a:	2c00      	cmp	r4, #0
 8008d4c:	d1f7      	bne.n	8008d3e <_fwalk_reent+0xe>
 8008d4e:	4638      	mov	r0, r7
 8008d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d54:	89ab      	ldrh	r3, [r5, #12]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d907      	bls.n	8008d6a <_fwalk_reent+0x3a>
 8008d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	d003      	beq.n	8008d6a <_fwalk_reent+0x3a>
 8008d62:	4629      	mov	r1, r5
 8008d64:	4630      	mov	r0, r6
 8008d66:	47c0      	blx	r8
 8008d68:	4307      	orrs	r7, r0
 8008d6a:	3568      	adds	r5, #104	; 0x68
 8008d6c:	e7e9      	b.n	8008d42 <_fwalk_reent+0x12>

08008d6e <__retarget_lock_init_recursive>:
 8008d6e:	4770      	bx	lr

08008d70 <__retarget_lock_acquire_recursive>:
 8008d70:	4770      	bx	lr

08008d72 <__retarget_lock_release_recursive>:
 8008d72:	4770      	bx	lr

08008d74 <__swhatbuf_r>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	461d      	mov	r5, r3
 8008d82:	b096      	sub	sp, #88	; 0x58
 8008d84:	da07      	bge.n	8008d96 <__swhatbuf_r+0x22>
 8008d86:	2300      	movs	r3, #0
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	89b3      	ldrh	r3, [r6, #12]
 8008d8c:	061a      	lsls	r2, r3, #24
 8008d8e:	d410      	bmi.n	8008db2 <__swhatbuf_r+0x3e>
 8008d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d94:	e00e      	b.n	8008db4 <__swhatbuf_r+0x40>
 8008d96:	466a      	mov	r2, sp
 8008d98:	f000 f902 	bl	8008fa0 <_fstat_r>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	dbf2      	blt.n	8008d86 <__swhatbuf_r+0x12>
 8008da0:	9a01      	ldr	r2, [sp, #4]
 8008da2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008da6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008daa:	425a      	negs	r2, r3
 8008dac:	415a      	adcs	r2, r3
 8008dae:	602a      	str	r2, [r5, #0]
 8008db0:	e7ee      	b.n	8008d90 <__swhatbuf_r+0x1c>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	2000      	movs	r0, #0
 8008db6:	6023      	str	r3, [r4, #0]
 8008db8:	b016      	add	sp, #88	; 0x58
 8008dba:	bd70      	pop	{r4, r5, r6, pc}

08008dbc <__smakebuf_r>:
 8008dbc:	898b      	ldrh	r3, [r1, #12]
 8008dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dc0:	079d      	lsls	r5, r3, #30
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	d507      	bpl.n	8008dd8 <__smakebuf_r+0x1c>
 8008dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	6163      	str	r3, [r4, #20]
 8008dd4:	b002      	add	sp, #8
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	466a      	mov	r2, sp
 8008dda:	ab01      	add	r3, sp, #4
 8008ddc:	f7ff ffca 	bl	8008d74 <__swhatbuf_r>
 8008de0:	9900      	ldr	r1, [sp, #0]
 8008de2:	4605      	mov	r5, r0
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff f989 	bl	80080fc <_malloc_r>
 8008dea:	b948      	cbnz	r0, 8008e00 <__smakebuf_r+0x44>
 8008dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df0:	059a      	lsls	r2, r3, #22
 8008df2:	d4ef      	bmi.n	8008dd4 <__smakebuf_r+0x18>
 8008df4:	f023 0303 	bic.w	r3, r3, #3
 8008df8:	f043 0302 	orr.w	r3, r3, #2
 8008dfc:	81a3      	strh	r3, [r4, #12]
 8008dfe:	e7e3      	b.n	8008dc8 <__smakebuf_r+0xc>
 8008e00:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <__smakebuf_r+0x7c>)
 8008e02:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	6020      	str	r0, [r4, #0]
 8008e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	9b00      	ldr	r3, [sp, #0]
 8008e10:	6120      	str	r0, [r4, #16]
 8008e12:	6163      	str	r3, [r4, #20]
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	b15b      	cbz	r3, 8008e30 <__smakebuf_r+0x74>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e1e:	f000 f8d1 	bl	8008fc4 <_isatty_r>
 8008e22:	b128      	cbz	r0, 8008e30 <__smakebuf_r+0x74>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	81a3      	strh	r3, [r4, #12]
 8008e30:	89a0      	ldrh	r0, [r4, #12]
 8008e32:	4305      	orrs	r5, r0
 8008e34:	81a5      	strh	r5, [r4, #12]
 8008e36:	e7cd      	b.n	8008dd4 <__smakebuf_r+0x18>
 8008e38:	08008bcd 	.word	0x08008bcd

08008e3c <_malloc_usable_size_r>:
 8008e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e40:	1f18      	subs	r0, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbc      	itt	lt
 8008e46:	580b      	ldrlt	r3, [r1, r0]
 8008e48:	18c0      	addlt	r0, r0, r3
 8008e4a:	4770      	bx	lr

08008e4c <_raise_r>:
 8008e4c:	291f      	cmp	r1, #31
 8008e4e:	b538      	push	{r3, r4, r5, lr}
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	d904      	bls.n	8008e60 <_raise_r+0x14>
 8008e56:	2316      	movs	r3, #22
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e62:	b112      	cbz	r2, 8008e6a <_raise_r+0x1e>
 8008e64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e68:	b94b      	cbnz	r3, 8008e7e <_raise_r+0x32>
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f000 f830 	bl	8008ed0 <_getpid_r>
 8008e70:	462a      	mov	r2, r5
 8008e72:	4601      	mov	r1, r0
 8008e74:	4620      	mov	r0, r4
 8008e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e7a:	f000 b817 	b.w	8008eac <_kill_r>
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d00a      	beq.n	8008e98 <_raise_r+0x4c>
 8008e82:	1c59      	adds	r1, r3, #1
 8008e84:	d103      	bne.n	8008e8e <_raise_r+0x42>
 8008e86:	2316      	movs	r3, #22
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	e7e7      	b.n	8008e5e <_raise_r+0x12>
 8008e8e:	2400      	movs	r4, #0
 8008e90:	4628      	mov	r0, r5
 8008e92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e96:	4798      	blx	r3
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e7e0      	b.n	8008e5e <_raise_r+0x12>

08008e9c <raise>:
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <raise+0xc>)
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	f7ff bfd3 	b.w	8008e4c <_raise_r>
 8008ea6:	bf00      	nop
 8008ea8:	20000024 	.word	0x20000024

08008eac <_kill_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4d06      	ldr	r5, [pc, #24]	; (8008ecc <_kill_r+0x20>)
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	602b      	str	r3, [r5, #0]
 8008eba:	f7f8 fce6 	bl	800188a <_kill>
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	d102      	bne.n	8008ec8 <_kill_r+0x1c>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	b103      	cbz	r3, 8008ec8 <_kill_r+0x1c>
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	bd38      	pop	{r3, r4, r5, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000368 	.word	0x20000368

08008ed0 <_getpid_r>:
 8008ed0:	f7f8 bcd4 	b.w	800187c <_getpid>

08008ed4 <__sread>:
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008edc:	f000 f894 	bl	8009008 <_read_r>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	bfab      	itete	ge
 8008ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ee8:	181b      	addge	r3, r3, r0
 8008eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eee:	bfac      	ite	ge
 8008ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ef2:	81a3      	strhlt	r3, [r4, #12]
 8008ef4:	bd10      	pop	{r4, pc}

08008ef6 <__swrite>:
 8008ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	461f      	mov	r7, r3
 8008efc:	898b      	ldrh	r3, [r1, #12]
 8008efe:	4605      	mov	r5, r0
 8008f00:	05db      	lsls	r3, r3, #23
 8008f02:	460c      	mov	r4, r1
 8008f04:	4616      	mov	r6, r2
 8008f06:	d505      	bpl.n	8008f14 <__swrite+0x1e>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f10:	f000 f868 	bl	8008fe4 <_lseek_r>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	4632      	mov	r2, r6
 8008f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	4628      	mov	r0, r5
 8008f20:	463b      	mov	r3, r7
 8008f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2a:	f000 b817 	b.w	8008f5c <_write_r>

08008f2e <__sseek>:
 8008f2e:	b510      	push	{r4, lr}
 8008f30:	460c      	mov	r4, r1
 8008f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f36:	f000 f855 	bl	8008fe4 <_lseek_r>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	bf15      	itete	ne
 8008f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f4a:	81a3      	strheq	r3, [r4, #12]
 8008f4c:	bf18      	it	ne
 8008f4e:	81a3      	strhne	r3, [r4, #12]
 8008f50:	bd10      	pop	{r4, pc}

08008f52 <__sclose>:
 8008f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f56:	f000 b813 	b.w	8008f80 <_close_r>
	...

08008f5c <_write_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	2200      	movs	r2, #0
 8008f66:	4d05      	ldr	r5, [pc, #20]	; (8008f7c <_write_r+0x20>)
 8008f68:	602a      	str	r2, [r5, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f7f8 fcc4 	bl	80018f8 <_write>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_write_r+0x1e>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_write_r+0x1e>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	20000368 	.word	0x20000368

08008f80 <_close_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	2300      	movs	r3, #0
 8008f84:	4d05      	ldr	r5, [pc, #20]	; (8008f9c <_close_r+0x1c>)
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	f7f8 fcd0 	bl	8001930 <_close>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_close_r+0x1a>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_close_r+0x1a>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20000368 	.word	0x20000368

08008fa0 <_fstat_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4d06      	ldr	r5, [pc, #24]	; (8008fc0 <_fstat_r+0x20>)
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	4611      	mov	r1, r2
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	f7f8 fcca 	bl	8001946 <_fstat>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d102      	bne.n	8008fbc <_fstat_r+0x1c>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b103      	cbz	r3, 8008fbc <_fstat_r+0x1c>
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000368 	.word	0x20000368

08008fc4 <_isatty_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4d05      	ldr	r5, [pc, #20]	; (8008fe0 <_isatty_r+0x1c>)
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	f7f8 fcc8 	bl	8001964 <_isatty>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_isatty_r+0x1a>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_isatty_r+0x1a>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20000368 	.word	0x20000368

08008fe4 <_lseek_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4611      	mov	r1, r2
 8008fec:	2200      	movs	r2, #0
 8008fee:	4d05      	ldr	r5, [pc, #20]	; (8009004 <_lseek_r+0x20>)
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f8 fcc0 	bl	8001978 <_lseek>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_lseek_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_lseek_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000368 	.word	0x20000368

08009008 <_read_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	2200      	movs	r2, #0
 8009012:	4d05      	ldr	r5, [pc, #20]	; (8009028 <_read_r+0x20>)
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f7f8 fc51 	bl	80018be <_read>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_read_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_read_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000368 	.word	0x20000368

0800902c <_init>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr

08009038 <_fini>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr
